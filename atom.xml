<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Ribose Yim&#39;s Blog</title>
  <subtitle>愿交天下士，罄我怀中藏。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://riboseyim.github.com/"/>
  <updated>2018-06-12T13:30:48.914Z</updated>
  <id>http://riboseyim.github.com/</id>
  
  <author>
    <name>RiboseYim</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>2018 Docker 用户报告 - Sysdig Edition</title>
    <link href="http://riboseyim.github.com/2018/06/12/DevOps-Container-Usage/"/>
    <id>http://riboseyim.github.com/2018/06/12/DevOps-Container-Usage/</id>
    <published>2018-06-12T05:22:14.000Z</published>
    <updated>2018-06-12T13:30:48.914Z</updated>
    
    <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><ul>
<li>应用排行榜</li>
<li>容器运行环境</li>
<li>容器编排器</li>
<li>容器监控</li>
</ul>
<a id="more"></a>
<p>This article is part of an <strong>Virtualization Technology</strong> tutorial series. Make sure to check out my other articles as well:</p>
<ul>
<li><a href="https://riboseyim.github.io/2018/06/12/DevOps-Container-Usage/" target="_blank" rel="external">2018 年度 Docker 用户报告 - Sysdig Edition </a></li>
<li><a href="https://riboseyim.github.io/2017/11/12/DevOps-Container-Security/" target="_blank" rel="external">Cyber-Security: Linux 容器安全的十重境界</a></li>
<li><a href="https://riboseyim.github.io/2017/08/21/DevOps-Docker/" target="_blank" rel="external">DevOps漫谈：Docker ABC</a></li>
</ul>
<p>根据 <a href="https://sysdig.com/opensource/" target="_blank" rel="external">Sysdig</a> 发表的年度 Docker 用户报告，在容器市场 Docker 仍然是事实上的行业标准，但是其它品牌的容器运行环境正在发展；Kubernetes 仍然是容器编排领域的王者。报告的数据来源主要依据 Sysdig Monitor 和 Sysdig Secure cloud service 提供的容器使用状况的实时快照报告，它们从容器健康、性能和安全性等方面提供度量指标和可视化服务。样本集包括垂直行业和各类规模不等的大中型企业，地域覆盖北美洲、拉丁美洲、EMEA（欧洲、中东、非洲）和亚太地区。与去年一样，这份报告并不是用来代表整个容器市场。因为数据仅限于 Sysdig 客户，所以对于那些选择商业和开源解决方案的公司来说不具有代表性。但是来自 90000 个容器用户汇总数据，确实提供了了解真实生产环境容器使用状况的独特视角。</p>
<h2 id="2018-Docker-用户报告-Sysdig-Edition"><a href="#2018-Docker-用户报告-Sysdig-Edition" class="headerlink" title="2018 Docker 用户报告 - Sysdig Edition"></a>2018 Docker 用户报告 - Sysdig Edition</h2><h4 id="容器应用排行榜"><a href="#容器应用排行榜" class="headerlink" title="容器应用排行榜"></a>容器应用排行榜</h4><p>容器部署应用帮手：Java Virtual Machines (JVM)。在容器时代之前，Java 就广泛应用于企业级服务，目前两者 —— Java 和容器更加紧密地融合到了一起。</p>
<p>我们还看到数据库解决方案的使用在增加, 例如在容器环境中运行 PostgreSQL 和 MongoDB 。这是一个信号, 表明在容器中部署有状态服务已经成为现实。容器的短暂性，让许多人对于在容器中运行高价值数据服务抱有怀疑态度, 但是市场回答了问题的解决方案–即为微服务设计的持久、便携和共享存储。数据显示, 客户开始转向完全由容器驱动的环境。</p>
<p><img src="http://omb2onfvy.bkt.clouddn.com/Docker_2018_01.png" alt=""></p>
<h4 id="容器密度"><a href="#容器密度" class="headerlink" title="容器密度"></a>容器密度</h4><p>在2017年每个主机的容器数的中位数是 10 。2018年，这个数字上升到 15，同比增长 50% 。另一方面，我们看到一个客户的单台主机上运行了 154 个容器，比我们去年观察到的最大 95 个增长了。</p>
<p><img src="http://omb2onfvy.bkt.clouddn.com/Docker_2018_02.png" alt=""></p>
<p><img src="http://omb2onfvy.bkt.clouddn.com/Docker_2018_03.png" alt=""></p>
<h4 id="容器运行环境"><a href="#容器运行环境" class="headerlink" title="容器运行环境"></a>容器运行环境</h4><blockquote>
<p>Docker still reigns, but we’re seeing what might be the first signs of cracks in the dam.</p>
</blockquote>
<p>事实上的容器运行环境依然是 Docker 。我们在 2017 年的报告中没有提及其他容器运行环境的详细信息, 因为在当时 Docker 的占有率接近 99% 。但是, 鉴于最近的一些变化： Red Hat  收购 CoreOS 的 (RKT 的制造商)，以及 Open Container Initiative (OCI) 项目 — 旨在推进容器运行环境和镜像标准化。</p>
<p>事实上，在过去的一年里, 客户对其他平台的使用增加了。CoreOS RKT 显著增长到 12% , Mesos containerizer 占有 4% 。LXC 也在增长, 尽管从业人员规模比例还较低。数据显示, 客户在生产环境中使用 “non-Docker” 解决方案更加便利了。</p>
<p><img src="http://omb2onfvy.bkt.clouddn.com/Docker_2018_04.png" alt="Container runtimes: Docker leads, followed by rkt and Mesos."></p>
<h4 id="容器存活周期"><a href="#容器存活周期" class="headerlink" title="容器存活周期"></a>容器存活周期</h4><p>95% 的容器存活时间低于一周。</p>
<p><img src="http://omb2onfvy.bkt.clouddn.com/Docker_2018_05.png" alt=""></p>
<p>容器和服务的生存时间是多少？ 我们观察了容器、容器镜像和服务的数量, 它们在短时间内开始并停止, 存活10秒或更短, 或者一周或更长。下图显示不同间隔内的容器百分比。 11% 的容器活了不到10秒。大部分容器（27%） 的生存期在五分钟之内。</p>
<p>为什么这么多的容器寿命如此之短呢？我们知道许多定制的系统都是按照需求来扩展的。容器被创建, 做他们的工作, 然后离开。例如, 一个客户为他们在 Jenkins 创建的每个作业配置一个容器，执行变更测试, 然后关闭容器。对他们来说, 类似活动每天会发生上千次。（Jenkins：一个用 Java 编写的开源持续集成工具，MIT许可证。它支持软件配置管理工具，如CVS、Subversion 和 Git 等，可以执行基于 Apache Ant 和 Apache Maven 的项目，以及任意的Shell 脚本/批处理命令。）</p>
<h4 id="镜像存活周期"><a href="#镜像存活周期" class="headerlink" title="镜像存活周期"></a>镜像存活周期</h4><p>我们还观察了容器镜像的使用时间。通过查看这些数据, 我们了解到客户在 DevOps CI/CD 流程的一部分中是如何频繁地进行新的容器更新部署的。 一小部分 – 一个百分点–在不到10秒内更新。69% 的容器镜像在一周的跨度内更新。</p>
<p><img src="http://omb2onfvy.bkt.clouddn.com/Docker_2018_06.png" alt=""></p>
<h4 id="服务存活周期"><a href="#服务存活周期" class="headerlink" title="服务存活周期"></a>服务存活周期</h4><p>“服务的寿命是多少？” 在 Kubernetes 中, 服务抽象定义了一组提供特定函数以及如何访问它们的 Pods 。服务允许 Pods 在不影响应用程序的情况下注销和复制。例如, 一个群集可以运行一个 Node.js  JavaScript 运行时服务、MySQL 数据库服务和 NGINX 前端服务。</p>
<p>我们看到大多数服务(67%)生存期超过一周。少量的服务在更频繁的基础上被停止, 但是对于大多数客户来说, 目标是让应用程序 24 小时持续工作。容器和 Pods 可能会来了又走, 但是服务持续处于启动并且可用状态。</p>
<p><img src="http://omb2onfvy.bkt.clouddn.com/Docker_2018_07.png" alt="Most container-based services stay up beyond a week."></p>
<h4 id="容器编排器"><a href="#容器编排器" class="headerlink" title="容器编排器"></a>容器编排器</h4><blockquote>
<p>First place goes to Kubernetes, followed by Kubernetes and then Kubernetes.</p>
</blockquote>
<p>例如, Mesosphere 能够在 DC/OS 环境中部署和管理 “Kubernetes-as-a-service”。可以将多个 Kubernetes 群集部署在一个 Mesosphere 群集上。</p>
<p>今年 Docker Swarm 的排名上升到第二位, 超过了基于 Mesos 的工具。根据 Sysdig ServiceVision 我们能自动标识出是否使用编排器, 并将逻辑基础结构对象与容器度量关联起来。在 2018 年, Kubernetes 可以确保领先地位。</p>
<ol>
<li><p>Swarm 的进入门槛<br>例如, 微软使用 Kubernetes 为其 Azure Kubernetes 服务 (AKS), IBM 的云容器服务和私有云产品也是基于 Kubernetes 。即使是 Docker 和 Mesosphere 也增加支持了 Kubernetes 的功能。</p>
</li>
<li><p>Docker 企业版, 具有通用控制平面 (Universal Control Plane (UCP) ), 在许多操作层面上降低了启动 Swarm 的门槛。</p>
</li>
</ol>
<p><img src="http://omb2onfvy.bkt.clouddn.com/Docker_2018_08.png" alt="编排器份额： Kubernetes 和 Swarm 增长, Mesos 萎缩。"></p>
<h4 id="容器集群大小"><a href="#容器集群大小" class="headerlink" title="容器集群大小"></a>容器集群大小</h4><blockquote>
<p>Mesos owns the big cluster game.</p>
</blockquote>
<p>”集群大小对与组织选择编排器的影响是什么？“<br>这项研究显示基于 Mesos 的编排器, 包括 Mesos Marathon 和 Mesosphere DC/OS 降至第三位。在使用 Mesos 的地方, 部署的容器数（中位数）比 Kubernetes 环境多 50% 。鉴于 Mesos 倾向于在大规模的容器和云部署, 所以这是有意义的。因此, 虽然 Mesos 集群的数量较少, 但是 Mesos 集群通常是意味着更大的企业规模。</p>
<p>我们的客户, 往往是更大的企业（在私有数据中心运行 Sysdig 解决方案）采用 OpenShift 的数量比我们的 SaaS 客户数量还要多。 Rancher Labs 于 2015 年出现, 为 Docker Swarm 和 Kubernetes 提供支持。直到 2017 年, Rancher （“大农场主”）才完全兼容 Kubernetes 作为其编排器。</p>
<p><img src="http://omb2onfvy.bkt.clouddn.com/Docker_2018_09.png" alt="Mesos clusters 50% larger than Kubernetes. Swarm 30% smaller."></p>
<h4 id="Kubernetes-分发版"><a href="#Kubernetes-分发版" class="headerlink" title="Kubernetes 分发版"></a>Kubernetes 分发版</h4><p>今年我们分析了使用 Kubernetes 的“品牌”分布, 看看在使用的 Kubernetes 是开源版本, 或由特定供应商提供的软件包。我们发现开源 Kubernetes 继续占有最大的份额, 但是 OpenShift 似乎正在取得突破进展, Rancher 也占有了一些份额。</p>
<p>OpenShift 获得接受不应该是一个惊喜。Kubernetes 于 2014 年诞生于 Google , Red Hat 也发布了该平台的 OpenShift 分发版, 并提出了针对企业客户实现 Kubernetes 的目标。</p>
<p><img src="http://omb2onfvy.bkt.clouddn.com/Docker_2018_10.png" alt="Open source Kubernetes most used, followed by OpenShift and Rancher distributions."></p>
<h4 id="容器健康与应用性能监控"><a href="#容器健康与应用性能监控" class="headerlink" title="容器健康与应用性能监控"></a>容器健康与应用性能监控</h4><p>了解用户体验的四个“黄金信号” ：延迟（latency），流量（traffic），错误（errors）和饱和度（saturation）。<br>响应时间（Response time）是配置最广泛的告警类型，紧随其后的是正常运行时间（uptime）和停机告警。基于主机的告警是最常用的，包括主要资源指标 -  CPU ，内存和磁盘使用率等仍然被广泛使用。用户想知道托管 Docker 的服务器（物理机，虚拟机或云实例）是否处于资源紧张或达到容量上限的状态。这些告警的触发条件通常设置在利用率达到 80%-95％ 之间。</p>
<p>同时，出现了越来越多的以容器为中心的资源告警。最主要有两种风格：</p>
<ul>
<li>1）资源利用率</li>
<li>2）容器数量</li>
</ul>
<p><img src="http://omb2onfvy.bkt.clouddn.com/Docker_2018_11.png" alt="最流行的告警条件：服务响应时间和正常运行时间"></p>
<p><strong>默认情况下容器没有资源限制</strong> 。鉴于客户越来越注意容器限制方面的告警，这意味着他们正在使用 Docker运行时配置来控制容器使用内存，CPU或磁盘I / O 的上限，用户希望知道何时会超出阈值，应用程序的性能风险需要处于可控状态。</p>
<p>对于容器数量来说，这个问题通常与用户至少需要 X 个给定类型的容器并运行以提供所需的服务级别有关，特别是在微服务部署中。例如，“我知道如果需要确保应用程序运行良好，至少有三个 NGINX 容器可用。如果任何一个有问题，我都想知道。”</p>
<p>基于编排的告警（Orchestration-focused alerts）也越来越受欢迎。与我们 2017 年的报告类似，“Pod Restart Count” 位列榜首。在一个 Pod 中，一个或多个容器是定位相同、共同调度（通常作为微服务的一部分）。如果某个容器重新启动太频繁，则表示存在可能影响应用程序性能的问题。</p>
<p>Kubernetes 管理员也经常使用基于事件的告警（ Event-based alerts ）。与基于度量的告警相比，它的区别在于，监控程序需要查找环境中生成的事件消息，例如 Kurthnetes “CrashLoopBackoff” 条件 — 代表 Pod 反复失败或重启，或者“Liveness probe failed”，表示容器是否为活跃和运行。这些告警有助于 DevOps 工程师快速定位问题。</p>
<p>Http 错误可能表明软件或基础架构存在问题，最终会影响性能。</p>
<p><img src="http://omb2onfvy.bkt.clouddn.com/Docker_2018_12.png" alt="Kubernetes pod and namespace rises to top of alert scoping in 2018."></p>
<blockquote>
<p>Alerts are not a one-size-fits-all approach.</p>
</blockquote>
<p>告警不是一种万能的方法。有时需要设置基于指定范围的告警，无论是逻辑或物理实体，还是整个基础结构（注：Sysdig 通过标签实现）。</p>
<p>在 2018 年的研究中，用于确定告警范围的最常用标签与 Kubernetes 有关（Scoping by pods），命名空间（namespace）紧随其后。特定的容器范围（Container specific scoping）也很受欢迎，包括容器名称，容器镜像和容器 ID 。2018年再次名列榜首的是云服务提供商标签，通常针对“名称”，“环境”，“ID”和“区域”标签以区分开发、测试和生产资源，以及标记云数据中心的位置。</p>
<h4 id="容器和基础设施自定义监控指标"><a href="#容器和基础设施自定义监控指标" class="headerlink" title="容器和基础设施自定义监控指标"></a>容器和基础设施自定义监控指标</h4><blockquote>
<p>There’s no one custom metrics format to rule them all.</p>
</blockquote>
<p>“在环境中运行容器的客户，使用自定义指标的比例是多少，都是哪些？”</p>
<p>55％ 的 Sysdig SaaS 用户使用与 Java 应用程序相关的 JMX 指标。这与我们看到的 Java 应用程序部署非常广泛的事实一致。 StatsD 占有 29％ 的份额，Prometheus 占有 20％ 的份额（预计这个数字会随着时间的推移而增长）。</p>
<p><img src="http://omb2onfvy.bkt.clouddn.com/Docker_2018_13.png" alt="JMX is the most used custom metric format."></p>
<h4 id="容器注册"><a href="#容器注册" class="headerlink" title="容器注册"></a>容器注册</h4><blockquote>
<p>It’s a split decision - registries are critical but there’s no clear leader.</p>
</blockquote>
<p>注册管理机构至关重要，但是目前没有明确的领导者。<br>容器注册表（container registry）是任何容器部署的基本组件。市场上有许多解决方案：一些是公共的，一些是私有的，一些是作为服务提供，一些是作为本地软件（private registry）部署。</p>
<p>2018 年前三名中，Google Container Registry（GCR）的比例最高，其次是 Quay ,之后是 Docker和 Amazon Elastic Container Registry（ECR）。 GCR 和 ACR 都是完全基于云托管的（private Docker container registries）。Quay 和 Docker 既可以用作本地解决方案也可以在云中运行（注：Sysdig 的用户群只有 50％ 能够清楚地识别出容器注册方案）</p>
<p><img src="http://omb2onfvy.bkt.clouddn.com/Docker_2018_14.png" alt="Container registry use is divided across public and private solutions."></p>
<blockquote>
<p>New approaches are maturing and helping organizations develop applications more quickly to solve real business challenges and compete in the digital marketplace.</p>
</blockquote>
<h2 id="扩展阅读-网络安全专题合辑《Cyber-Security-Manual》"><a href="#扩展阅读-网络安全专题合辑《Cyber-Security-Manual》" class="headerlink" title="扩展阅读: 网络安全专题合辑《Cyber-Security Manual》"></a>扩展阅读: 网络安全专题合辑《Cyber-Security Manual》</h2><ul>
<li><a href="https://riboseyim.github.io/2017/11/12/DevOps-Container-Security/" target="_blank" rel="external">Cyber-Security: Linux 容器安全的十重境界</a></li>
<li><a href="https://riboseyim.github.io/2017/10/29/CyberSecurity-WiFi/" target="_blank" rel="external">Cyber-Security: 警惕 Wi-Fi 漏洞，争取安全上网</a></li>
<li><a href="https://riboseyim.github.io/2017/08/31/CyberSecurity-Headers/" target="_blank" rel="external">Cyber-Security: Web应用安全：攻击、防护和检测</a></li>
<li><a href="https://riboseyim.github.io/2017/08/09/Protocol-IPv6/" target="_blank" rel="external">Cyber-Security: IPv6 &amp; Security</a></li>
<li><a href="https://riboseyim.github.io/2016/10/06/CyberSecurity-SSH/" target="_blank" rel="external">Cyber-Security: OpenSSH 并不安全</a></li>
<li><a href="https://riboseyim.github.io/2016/06/12/CyberSecurity-Trojan/" target="_blank" rel="external">Cyber-Security: Linux/XOR.DDoS 木马样本分析</a></li>
<li><a href="https://riboseyim.github.io/2017/07/14/Network-sFlow/" target="_blank" rel="external">浅谈基于数据分析的网络态势感知</a></li>
<li><a href="https://riboseyim.github.io/2017/06/16/Network-Pcap/" target="_blank" rel="external">Packet Capturing:关于网络数据包的捕获、过滤和分析</a></li>
<li><a href="https://riboseyim.github.io/2016/04/26/Network-Ntopng/" target="_blank" rel="external">新一代Ntopng网络流量监控—可视化和架构分析</a></li>
<li><a href="http://www.jianshu.com/p/670c4d2bb419" target="_blank" rel="external">Cyber-Security: 事与愿违的后门程序 | Economist</a></li>
<li><a href="https://riboseyim.github.io/2016/10/07/CyberSecurity/" target="_blank" rel="external">Cyber-Security: 美国网络安全立法策略</a></li>
<li><a href="https://riboseyim.github.io/2017/04/09/CyberSecurity-CSTCB/" target="_blank" rel="external">Cyber-Security: 香港警务处拟增设网络安全与科技罪案总警司</a></li>
</ul>
<h2 id="扩展阅读：DevOps-漫谈系列"><a href="#扩展阅读：DevOps-漫谈系列" class="headerlink" title="扩展阅读：DevOps 漫谈系列"></a>扩展阅读：<a href="https://riboseyim.github.io/2016/07/28/DevOps/" target="_blank" rel="external">DevOps 漫谈系列</a></h2><ul>
<li><a href="https://riboseyim.github.io/2018/04/10/DevOps-Phoenix/" target="_blank" rel="external">《凤凰项目》：从作坊到工厂的寓言故事</a></li>
<li><a href="https://riboseyim.github.io/2017/08/06/TeamWork-Kanban/" target="_blank" rel="external">Kanban 看板管理实践</a></li>
<li><a href="https://riboseyim.github.io/2018/03/26/DevOps-Deployment/" target="_blank" rel="external">DevOps 漫谈：基础设施部署和配置管理</a></li>
<li><a href="https://riboseyim.github.io/2017/11/12/DevOps-Container-Security/" target="_blank" rel="external">Linux 容器安全的十重境界</a></li>
<li><a href="https://riboseyim.github.io/2017/06/27/Technology-English/" target="_blank" rel="external">工程师的自我修养：全英文技术学习实践</a></li>
</ul>
<h4 id="DevOps-实践的本质是文化"><a href="#DevOps-实践的本质是文化" class="headerlink" title="DevOps 实践的本质是文化"></a><a href="https://riboseyim.github.io/2018/03/29/DevOps-Culture/" target="_blank" rel="external">DevOps 实践的本质是文化</a></h4><ul>
<li>学习力－团队生命之根</li>
<li>带领团队翻译书籍</li>
<li>Don’t make me think</li>
<li>凡是被很多人不断重复的好习惯，要将其自动化整合到工具</li>
</ul>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://www.ibm.com/developerworks/cn/linux/1607_caoyq_sysdig/index.html" target="_blank" rel="external">用 Sysdig 监控服务器和 Docker 容器 | 曹元其 | 2016 年 7 月 15 日发布</a></li>
<li><a href="http://cizixs.com/2017/04/27/sysdig-for-linux-system-monitor-and-analysis" target="_blank" rel="external">使用 sysdig 进行监控和调试 linux 机器</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;应用排行榜&lt;/li&gt;
&lt;li&gt;容器运行环境&lt;/li&gt;
&lt;li&gt;容器编排器&lt;/li&gt;
&lt;li&gt;容器监控&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="DevOps" scheme="http://riboseyim.github.com/tags/DevOps/"/>
    
      <category term="Cyber-Security" scheme="http://riboseyim.github.com/tags/Cyber-Security/"/>
    
      <category term="网络协议" scheme="http://riboseyim.github.com/tags/%E7%BD%91%E7%BB%9C%E5%8D%8F%E8%AE%AE/"/>
    
  </entry>
  
  <entry>
    <title>Linux-Perf-App</title>
    <link href="http://riboseyim.github.com/2018/06/11/Linux-Perf-App/"/>
    <id>http://riboseyim.github.com/2018/06/11/Linux-Perf-App/</id>
    <published>2018-06-11T06:57:15.000Z</published>
    <updated>2018-06-11T07:01:14.226Z</updated>
    
    <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>应用性能分析</p>
<a id="more"></a>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://www.ibm.com/developerworks/cn/java/j-lo-performance-tuning-practice/index.html" target="_blank" rel="external">Java 应用性能调优实践</a></li>
<li><a href="https://mp.weixin.qq.com/s/4Y77jUqfgKeBS2hnitrUrg" target="_blank" rel="external">动态追踪技术-应用性能瓶颈排障利器之火焰图</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h2&gt;&lt;p&gt;应用性能分析&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Linux-FileSystems</title>
    <link href="http://riboseyim.github.com/2018/06/07/Linux-FileSystems/"/>
    <id>http://riboseyim.github.com/2018/06/07/Linux-FileSystems/</id>
    <published>2018-06-07T09:45:08.000Z</published>
    <updated>2018-06-08T06:04:21.322Z</updated>
    
    <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://docs.oracle.com/cd/E26926_01/html/E25884/fscreate-6.html" target="_blank" rel="external">创建和挂载 Oracle Solaris 文件系统</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h2&gt;&lt;h2 id=&quot;参考文献&quot;&gt;&lt;a href=&quot;#参考文献&quot; class=&quot;headerlink&quot; title=&quot;参考文献&quot;&gt;&lt;/a&gt;参考文献&lt;/h
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>TeamWork-Project-Risk</title>
    <link href="http://riboseyim.github.com/2018/06/05/TeamWork-Project-Risk/"/>
    <id>http://riboseyim.github.com/2018/06/05/TeamWork-Project-Risk/</id>
    <published>2018-06-05T02:54:27.000Z</published>
    <updated>2018-06-05T04:05:01.134Z</updated>
    
    <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><a id="more"></a>
<h2 id="绪论"><a href="#绪论" class="headerlink" title="绪论"></a>绪论</h2><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><ul>
<li>What is Risk ?</li>
</ul>
<p>风险是损失或收益发生的不确定性。风险通常指一定时期内，某一事件的预期结果与实际结果的变动程度，变动程度越大，风险越大。</p>
<h2 id="How-to-Manage-Risk"><a href="#How-to-Manage-Risk" class="headerlink" title="How to Manage Risk"></a>How to Manage Risk</h2><h4 id="Risk-Management-Framework"><a href="#Risk-Management-Framework" class="headerlink" title="Risk Management Framework"></a>Risk Management Framework</h4><h4 id="Risk-Management-Plan"><a href="#Risk-Management-Plan" class="headerlink" title="Risk Management Plan"></a>Risk Management Plan</h4><h4 id="Risk-Identification"><a href="#Risk-Identification" class="headerlink" title="Risk Identification"></a>Risk Identification</h4><h4 id="Risk-Response-Planning"><a href="#Risk-Response-Planning" class="headerlink" title="Risk Response Planning"></a>Risk Response Planning</h4><h2 id="Managing-Risk-throughout-the-Organization"><a href="#Managing-Risk-throughout-the-Organization" class="headerlink" title="Managing Risk throughout the Organization"></a>Managing Risk throughout the Organization</h2><h2 id="Risk-Analysis"><a href="#Risk-Analysis" class="headerlink" title="Risk Analysis"></a>Risk Analysis</h2><h4 id="Risk-Efficiency-measurement"><a href="#Risk-Efficiency-measurement" class="headerlink" title="Risk Efficiency measurement"></a>Risk Efficiency measurement</h4><h4 id="Risk-Metrics"><a href="#Risk-Metrics" class="headerlink" title="Risk Metrics"></a>Risk Metrics</h4><h4 id="Risk-Audit"><a href="#Risk-Audit" class="headerlink" title="Risk Audit"></a>Risk Audit</h4><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://en.wikipedia.org/wiki/Project_risk_management" target="_blank" rel="external">维基百科：Project risk management</a></li>
<li><a href="https://www.projectsmart.co.uk/10-golden-rules-of-project-risk-management.php" target="_blank" rel="external">10 GOLDEN RULES OF PROJECT RISK MANAGEMENT | ~ By Bart Jutte</a></li>
<li><a href="https://www.pmi.org/learning/library/risk-analysis-project-management-7070" target="_blank" rel="external">Risk analysis and management | a vital key to effective project management | 3 March 2008 Lavanya, N. | Malarvizhi, T.</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h2&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>DevOps 漫谈:分布式追踪系统体系概要</title>
    <link href="http://riboseyim.github.com/2018/05/18/DevOps-OpenTracing/"/>
    <id>http://riboseyim.github.com/2018/05/18/DevOps-OpenTracing/</id>
    <published>2018-05-18T03:36:46.000Z</published>
    <updated>2018-05-31T06:28:59.162Z</updated>
    
    <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><ul>
<li>Key Words: metrics、logging、tracing</li>
<li>Google Dapper Family : Uber Jaeger、淘宝 EagleEye、微博 Watchman、京东 CallGraph、美团 MTrace</li>
<li>数据可视化 | Exporters</li>
</ul>
<a id="more"></a>
<p>This article is part of an <strong>Distributed Tracing and Monitoring System</strong> tutorial series. Make sure to check out my other articles as well:</p>
<ul>
<li><a href="https://riboseyim.github.io/2018/04/27/DevOps-OpenCensus" target="_blank" rel="external">DevOps 漫谈：开源分布式跟踪系统 OpenCensus</a></li>
<li><a href="https://riboseyim.github.io/2018/05/18/DevOps-OpenTracing/" target="_blank" rel="external">DevOps 漫谈：分布式追踪系统标准体系</a></li>
</ul>
<h2 id="绪论"><a href="#绪论" class="headerlink" title="绪论"></a>绪论</h2><p>讨论分布式追踪技术，首先需要明确的是：什么是跟踪 ？</p>
<h4 id="metrics"><a href="#metrics" class="headerlink" title="metrics"></a>metrics</h4><p>度量（metrics）的特征是聚合: 它们是在一段时间内组成单一逻辑标尺、计数器或直方图的跨度。例如：HTTP 请求的数量可以建模为计数器(counter）, 其更新逻辑很简单，只需通过加法聚合; 如果设定一段持续的观察时间，请求数可以被建模成一个直方图。<a href="https://riboseyim.github.io/2016/11/04/OpenSource-Ganglia/" target="_blank" rel="external">《基于Ganglia实现服务集群性能态势感知》</a> 介绍的就是以记录度量为主的故障监控系统。</p>
<h4 id="logging"><a href="#logging" class="headerlink" title="logging"></a>logging</h4><p>日志（logging）的特征是处理离散事件。按照事件发生的源可以分为 Application Events、System Events、Service Events、DNS Events 等。通常也包含针对原始记录的处理过程，例如：通过 Syslog 将应用程序调试或错误消息发送到 Elasticsearch ; 审计记录通过 Kafka 将数据推送到类似 BigTable 的数据池; 从服务调用中提取特定的请求元数据, 并发送错误跟踪服务（例如 <a href="https://ruby-china.org/topics/22379" target="_blank" rel="external">NewRelic</a>）。</p>
<p><img src="http://og2061b3n.bkt.clouddn.com/DTM-MetricsTracingLogging-v2.png" alt=""></p>
<h4 id="tracing"><a href="#tracing" class="headerlink" title="tracing"></a>tracing</h4><p>跟踪（tracing）的特征：跟踪处理的是请求范围内的信息（request-scoped），例如 SQL 语句在数据库的实际执行时间或 HTTP 请求耗时。以 DTrace &amp; SystemTap 为代表的 <a href="https://riboseyim.github.io/2016/11/26/DTrace/" target="_blank" rel="external">动态追踪技术</a> 基于操作系统内核，不需要埋点就可以提供高级性能分析和调试功能。但是在分布式架构场景中也有一些不足，例如某些功能需要多次调用 RPC 远程服务，这些服务分布在多台不同的 host/vm/docker 中，如果需要测量该功能响应的完整持续时间就有难度。</p>
<h4 id="示例（Use-OpenCensus-with-OpenZipkin）"><a href="#示例（Use-OpenCensus-with-OpenZipkin）" class="headerlink" title="示例（Use OpenCensus with OpenZipkin）"></a>示例（Use OpenCensus with OpenZipkin）</h4><p><a href="https://riboseyim.github.io/2018/05/18/DevOps-OpenTracing/" target="_blank" rel="external">OpenCensus</a> 作为埋点 API ，导出 tracing data 到 OpenZipkin，由 Zipkin 的 Web UI 提供数据展示和交互能力，可以很清晰地看到函数调用顺序和耗时。从理解系统行为的角度上说，与动态追踪技术中的火焰图（flame graph）有异曲同工之妙。</p>
<ul>
<li>串行调用函数方法，包括网络访问和持久化操作</li>
</ul>
<p><img src="http://og2061b3n.bkt.clouddn.com/zipkin-%E4%B8%B2%E8%A1%8C.png" alt=""></p>
<ul>
<li>示例（OpenCensus with OpenZipkin）：并行调用函数方法（Go routine）</li>
</ul>
<p><img src="http://og2061b3n.bkt.clouddn.com/zipkin-%E5%B9%B6%E8%A1%8C.png" alt=""></p>
<h2 id="Google-Dapper-Family"><a href="#Google-Dapper-Family" class="headerlink" title="Google Dapper Family"></a>Google Dapper Family</h2><p>讨论分布式跟踪，就一定会谈到 Dapper —— Google 公司研发并应用于自己生产环境的一款跟踪系统（设计之初参考了一些 Magpie 和 X-Trace 的理念 ）。Dapper 不仅为业内提供了非常有参考价值的实现，同步发表论文的也成为了当前分布式跟踪系统的重要理论基础。Google Dapper 的理念影响了一批分布式跟踪系统的发展，例如 2012 年，Twitter 公司严格按照 Dapper 论文的要求实现了 Zipkin （Scala 编写，集成到 Twitter 公司自己的分布式服务 Finagle ）；Uber 公司基于 Google Dapper 和 Twitter Zipkin 的灵感，开发了开源分布式跟踪系统 Jaeger。</p>
<ul>
<li><a href="https://static.googleusercontent.com/media/research.google.com/zh-CN//archive/papers/dapper-2010-1.pdf" target="_blank" rel="external">《Dapper, a Large-Scale Distributed Systems Tracing Infrastructure|Google Technical Report dapper-2010-1, April 2010》</a></li>
</ul>
<p>OpenTracing 通过提供平台无关、厂商无关的API，使得开发人员能够方便的添加（或更换）追踪系统的实现。 OpenTracing 提供了用于运营支撑系统的和针对特定平台的辅助程序库。除了 API 之外，一个完整的分布式追踪系统还需要包括数据存储、支持代理转发、用户友好的 WebUI 等特性，例如：Zipkin 专注于 tracing 领域；Prometheus 开始专注于 metrics，同时可能会发展更多的 tracing 功能，但不太可能深入 logging 领域；基于 ELK 之类的日志系统专注于 logging 领域，但也可能集成其他领域的特性。总之，各式各样的分布式追踪系统都是以 tracing 为基础，同时根据自己的需要在其他两个领域各有所侧重而已。</p>
<h4 id="Uber-Jaeger"><a href="#Uber-Jaeger" class="headerlink" title="Uber Jaeger"></a>Uber Jaeger</h4><p><a href="http://www.infoq.com/cn/articles/evolving-distributed-tracing-at-uber-engineering" target="_blank" rel="external">Uber Jaeger</a> 是 Uber 工程团队开源的分布式追踪系统。自 2016年 起，Jaeger 在 Uber 内部实现大范围应用。Uber 同时开发了一种适用于 RPC 的网络多路复用和框架协议 —— <a href="https://github.com/uber/tchannel" target="_blank" rel="external">TChannel | Support: Node.js,Python,Go,Java</a>，该协议融入了分布式追踪能力。</p>
<p>TChannel 协议规范在二进制格式中直接定义了追踪字段：“ spanid:8 parentid:8 traceid:8 traceflags:1 ”。</p>
<ul>
<li>jaeger-client：支持多种语言的客户端库，如Go, Java, Python等语言</li>
<li>jaeger-agent：客户端代理负责将追踪数据转发到服务端，这样能方便应用的快速处理，同时减轻服务端的直接压力；另外可以在客户端代理动态调整采样的频率，进行追踪数据采样的控制</li>
<li>jaeger-collector：数据收集器主要进行数据收集和处理，从客户端代理收集数据进行处理后持久化到数据存储中</li>
<li>数据存储：目前支持将收集到的数据持久化到 Cassandra 、 Elasticsearch</li>
<li>jaeger-query：主要根据不同的条件到数据存储中进行搜索，支撑前端页面的展示</li>
<li>jaeger-ui：一个基于 React 的前端 webui</li>
<li>jaeger spark: 是一个基于 Spark 聚合数据管道，用以完成服务依赖分析</li>
</ul>
<p><img src="http://og2061b3n.bkt.clouddn.com/DTM-Uber-Jaeger.png" alt=""></p>
<h4 id="淘宝-EagleEye（鹰眼）"><a href="#淘宝-EagleEye（鹰眼）" class="headerlink" title="淘宝 EagleEye（鹰眼）"></a>淘宝 EagleEye（鹰眼）</h4><p><a href="http://jm.taobao.org/2014/03/04/3465/" target="_blank" rel="external">EagleEye（鹰眼）</a> 是Google 的分布式调用跟踪系统 Dapper 在淘宝的实现。主要特点是通过每台应用机器上的 Agent 实时抓取 EagleEye 日志，按照日志类型不分别处理：</p>
<ul>
<li>全量原始日志直接存储到 HDFS ；创建 MapReduce 任务完成调用链合并、分析和统计；</li>
<li>有实时标记的原始日志存储到 HBase ；</li>
<li>业务日志：一部分会被直接处理存储到 HBase，有一部分会作为消息发送出去，由特定的业务系统订阅处理；</li>
<li>调用实时统计，提供分钟级别的实时链路调用视图，辅助故障定位。</li>
</ul>
<h4 id="国内其他衍生系统"><a href="#国内其他衍生系统" class="headerlink" title="国内其他衍生系统"></a>国内其他衍生系统</h4><ul>
<li><p><a href="http://www.infoq.com/cn/articles/weibo-watchman" target="_blank" rel="external">微博 Watchman</a>：微博平台的链路追踪及服务质量保障系统。watchman-aspect 组件通过异步日志（async-logger）在各个节点上输出日志文件；以流式的方式处理数据，watchman-prism 组件（基于 Scribe），将日志推送到 watchman-stream 组件（基于Storm）, 根据需求进行聚合、统计等计算（针对性能数据），规范化、排序（针对调用链数据），之后写入 HBase 。</p>
</li>
<li><p><a href="http://zhuanlan.51cto.com/art/201701/528304.htm" target="_blank" rel="external">京东 CallGraph</a>：全局 TraceID 的调用链。核心包（完成埋点逻辑，日志存放在内存磁盘上由 Agent 收集发送到JMQ）、JMQ（日志数据管道）、Storm（对数据日志并行整理和计算）、存储（实时数据存储JimDB/HBase/ES，离线数据存储包括HDFS和Spark）、CallGraph-UI（用户交互界面）、UCC（存放配置信息并同步到各服务器）、管理元数据（存放链路签名与应用映射关系等）。日志格式：固定部分（TraceID、RpcID、开始时间、调用类型、对端IP、调用耗时、调用结果等）、可变部分。</p>
</li>
<li><p><a href="https://tech.meituan.com/mt-mtrace.html" target="_blank" rel="external">美团 MTrace</a>：美团点评内部的分布式会话跟踪系统。基于全局 TraceID 的调用链，客户端与后端服务之间有一层 Kafka，实现两边工程的解耦。实时数据主要使用 Hbase ，traceID 作为 RowKey；离线数据主要使用 Hive，可以通过 SQL 进行一些结构化数据的定制分析。</p>
</li>
<li><p><a href="https://patents.google.com/patent/WO2017071134A1/zh" target="_blank" rel="external">CN105224445B | WO2017071134A1 | 分布式追踪系统| 北京汇商融通信息技术有限公司 | 2015-10-28</a></p>
</li>
<li><p><strong>不完全统计</strong></p>
</li>
</ul>
<table>
<thead>
<tr>
<th>名称</th>
<th>原理</th>
<th>客户端</th>
<th>依赖分析</th>
<th>存储</th>
<th>可视化</th>
</tr>
</thead>
<tbody>
<tr>
<td>Google Dapper</td>
<td>TraceID</td>
<td>—–</td>
<td>—–</td>
<td>—–</td>
<td>—–</td>
</tr>
<tr>
<td>OpenTracing</td>
<td>TraceID</td>
<td>go,java,python,js,objective-c,c++</td>
<td>—–</td>
<td>—–</td>
<td>—–</td>
</tr>
<tr>
<td>OpenCensus</td>
<td>TraceID</td>
<td>go,java,python,C++,.Net,js,Erlang</td>
<td>—–</td>
<td>—–</td>
<td>no web-ui,Support Exporter</td>
</tr>
<tr>
<td>Uber Jaeger</td>
<td>TraceID</td>
<td>java,go,python <br> Support Agent Proxy</td>
<td>Spark</td>
<td>Cassandra、ES</td>
<td>React Web-ui</td>
</tr>
<tr>
<td>淘宝 EagleEye（鹰眼）</td>
<td>TraceID</td>
<td>yes</td>
<td>MapReduce</td>
<td>HDFS(全量) <br> HBase(实时)</td>
<td>yes</td>
</tr>
<tr>
<td>微博 Watchman</td>
<td>日志</td>
<td>watchman-aspect</td>
<td>Storm</td>
<td>HBase</td>
<td>yes</td>
</tr>
<tr>
<td>京东 CallGraph</td>
<td>TraceID</td>
<td>Agent-&gt;JMQ</td>
<td>Storm</td>
<td>JimDB（实时）<br>ES、Spark（离线）</td>
<td>yes</td>
</tr>
<tr>
<td>美团 MTrace</td>
<td>TraceID</td>
<td>Agent-&gt; Kafka <br> Support Agent  Proxy</td>
<td>Storm</td>
<td>HBase(实时)<br> Hive(离线)</td>
<td>yes</td>
</tr>
</tbody>
</table>
<h2 id="Exporters-数据可视化"><a href="#Exporters-数据可视化" class="headerlink" title="Exporters | 数据可视化"></a>Exporters | 数据可视化</h2><h3 id="Prometheus-普罗米修斯"><a href="#Prometheus-普罗米修斯" class="headerlink" title="Prometheus|普罗米修斯"></a><a href="https://prometheus.io" target="_blank" rel="external">Prometheus|普罗米修斯</a></h3><h3 id="Stackdriver"><a href="#Stackdriver" class="headerlink" title="Stackdriver"></a><a href="https://cloud.google.com/stackdriver/" target="_blank" rel="external">Stackdriver</a></h3><p>适用于 Google Cloud Platform 与 AWS 应用的监控、日志记录和诊断工具</p>
<h3 id="SignalFX"><a href="#SignalFX" class="headerlink" title="SignalFX"></a><a href="https://signalfx.com" target="_blank" rel="external">SignalFX</a></h3><h3 id="Amazon-AWS-X-Ray"><a href="#Amazon-AWS-X-Ray" class="headerlink" title="Amazon AWS X-Ray"></a>Amazon AWS X-Ray</h3><h3 id="Zipkin"><a href="#Zipkin" class="headerlink" title="Zipkin"></a><a href="https://zipkin.io" target="_blank" rel="external">Zipkin</a></h3><p>Zipkin 的 Span 模型几乎完全仿造了 Dapper 中的 Span 设计，Zipkin 的 Span 包括基础数据（traceId、spanId、parentId、name、timestamp 和 duration，主要用于表示跟踪树中节点的关联关系）、 Annotation（记录请求特定事件相关信息）、BinaryAnnotation（扩展信息）。</p>
<p>Zipkin 包括四大组件：</p>
<ul>
<li>Zipkin Collector: 处理跟踪数据的守护进程 (validate,store,index)；</li>
<li>Storage: 设计之初支持 Cassandra 存储（Twitter 广泛应用），目前也支持 ElasticSearch 和 MySQL；</li>
<li>Zipkin Query Service: JSON API；</li>
<li>Web UI: 没有内置身份认证。</li>
</ul>
<p><img src="https://zipkin.io/public/img/architecture-1.png" alt="Zipkin Architecture"></p>
<ul>
<li><a href="https://logz.io/blog/zipkin-elk/?utm_source=twitter&amp;utm_medium=social&amp;utm_content=zipkin-elk/&amp;utm_campaign=blog_post" target="_blank" rel="external">扩展阅读 | Distributed Tracing with Zipkin and ELK</a></li>
</ul>
<p><img src="https://logz.io/wp-content/uploads/2018/05/zipkin_and_elk_-_article.jpg" alt=""></p>
<figure class="highlight c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">$ docker image pull openzipkin/zipkin</div><div class="line"></div><div class="line">$ docker container run -p <span class="number">9411</span>:<span class="number">9411</span> openzipkin/zipkin</div><div class="line">                                    ********</div><div class="line">                                  **        **</div><div class="line">                                 *            *</div><div class="line">                                **            **</div><div class="line">                                **            **</div><div class="line">                                 **          **</div><div class="line">                                  **        **</div><div class="line">                                    ********</div><div class="line">                                      ****</div><div class="line">                                      ****</div><div class="line">        ****                          ****</div><div class="line">     ******                           ****                                 ***</div><div class="line">  ****************************************************************************</div><div class="line">    *******                           ****                                 ***</div><div class="line">        ****                          ****</div><div class="line">                                       **</div><div class="line">                                       **</div><div class="line"></div><div class="line"></div><div class="line">             *****      **     *****     ** **       **     **   **</div><div class="line">               **       **     **  *     ***         **     **** **</div><div class="line">              **        **     *****     ****        **     **  ***</div><div class="line">             ******     **     **        **  **      **     **   **</div><div class="line"></div><div class="line">:: Powered by Spring Boot ::         (v2<span class="number">.0</span><span class="number">.1</span>.RELEASE)</div><div class="line"></div><div class="line">$ docker container ls --all</div><div class="line">CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS                        PORTS                              NAMES</div><div class="line">f9935fcaf4ba        openzipkin/zipkin   <span class="string">"/bin/sh -c 'test -n"</span>   <span class="number">5</span> seconds ago       Up <span class="number">4</span> seconds                  <span class="number">9410</span>/tcp, <span class="number">0.0</span><span class="number">.0</span><span class="number">.0</span>:<span class="number">9411</span>-&gt;<span class="number">9411</span>/tcp   musing_jepsen</div></pre></td></tr></table></figure>
<ul>
<li><a href="https://medium.com/merapar/exposing-zipkin-trace-id-and-span-id-in-logging-for-use-in-kibana-25d1e5b6bfbb" target="_blank" rel="external">扩展阅读 | Tracing microservices with Zipkin and Kibana</a></li>
</ul>
<p><img src="https://cdn-images-1.medium.com/max/1600/1*edyzJ1zutH1IA2jpITp5Pg.png" alt=""></p>
<h2 id="OpenCensus-vs-OpenTracing"><a href="#OpenCensus-vs-OpenTracing" class="headerlink" title="OpenCensus vs OpenTracing"></a><a href="https://zipkin.io" target="_blank" rel="external">OpenCensus</a> vs <a href="http://opentracing.io/" target="_blank" rel="external">OpenTracing</a></h2><table>
<thead>
<tr>
<th>Future</th>
<th>OpenTracing</th>
<th>OpenCensus</th>
<th>Google Dapper</th>
</tr>
</thead>
<tbody>
<tr>
<td>API 支持</td>
<td><a href="https://github.com/opentracing/opentracing-go" target="_blank" rel="external">Go</a>、 <a href="https://github.com/opentracing/opentracing-python" target="_blank" rel="external">Python</a>、<a href="https://github.com/opentracing/opentracing-javascript" target="_blank" rel="external">Javascript</a>、 <a href="https://github.com/opentracing/opentracing-objc" target="_blank" rel="external">Objective-C</a><br><a href="https://github.com/opentracing/opentracing-java" target="_blank" rel="external">Java</a>、<a href="https://github.com/opentracing/opentracing-cpp" target="_blank" rel="external">C++</a> <br> 研发中：<a href="#">PHP</a> 、<a href="#">Ruby </a></td>
<td>Go、Java、C++、.Net，Node.js，Erlang <br> 研发中：<br> Python(STATS In Progress) 、 PHP(STATS Planned) 、 Ruby(STATS Planned)</td>
<td>–</td>
</tr>
<tr>
<td>EXPORTERS</td>
<td>–</td>
<td>SignalFX (Java、C++) <br> Prometheus (Java、C++、Go、Erlang) <br> Jaeger (Java、Go) <br> Stackdriver (Java、C++、Go、Python、ERLANG-Trace Only) <br> Zipkin (Java、C++、Go、Erlang) <br> Instana (Java)</td>
<td>–</td>
</tr>
</tbody>
</table>
<ul>
<li><p><a href="https://opencensus.io/roadmap.html" target="_blank" rel="external">OpenCensus ROADMAP</a></p>
</li>
<li><p><a href="https://gianarb.it/blog/what-is-distributed-tracing-opentracing-opencensus" target="_blank" rel="external">What is distributed tracing. Zoom on opencensus and opentracing</a></p>
</li>
</ul>
<p><blockquote class="twitter-tweet" data-lang="en"><p lang="en" dir="ltr">What&#39;s the difference between opencensus and opentracing?</p>&mdash; #GoldenBlackChild 🌟🏆🏅🥇 (@nevi_me) <a href="https://twitter.com/nevi_me/status/953683034229833728?ref_src=twsrc%5Etfw" target="_blank" rel="external">January 17, 2018</a></blockquote></p>
<script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script>


<h2 id="Sensor-Sensibility-Format"><a href="#Sensor-Sensibility-Format" class="headerlink" title="Sensor Sensibility Format"></a>Sensor Sensibility Format</h2><p>The Sensor Sensibility Format — or SSF for short — is a language agnostic format for transmitting observability data such as trace spans, metrics, events and more. <a href="https://github.com/stripe/veneur/tree/master/ssf" target="_blank" rel="external">https://github.com/stripe/veneur/tree/master/ssf</a></p>
<h2 id="管理负载-Managing-Tracing-Overhead"><a href="#管理负载-Managing-Tracing-Overhead" class="headerlink" title="管理负载 Managing Tracing Overhead"></a>管理负载 Managing Tracing Overhead</h2><p>目前多数分布式追踪系统采用异步写入日志、建立缓冲存储（基于内存或者内存数据库）、设置采样阈值策略（包括一定情况下直接丢弃）的方式控制追踪负载。Google Dapper 公布的性能损耗测评数据如下：</p>
<p><img src="http://og2061b3n.bkt.clouddn.com/DTM-Dapper-Overhead-1.jpg" alt=""></p>
<p><img src="http://og2061b3n.bkt.clouddn.com/DTM-Dapper-Overhead-2.jpg" alt=""></p>
<p><strong>淘宝 EagleEye</strong> ：1）专属日志输出实现，日志异步写入来避免 hang 住业务线程，可调节日志输出缓冲大小，控制每秒写日志的 IO 次数等。2）全局采样开关，在运行期控制调用链的采样率（根据 TraceId 来决定当前的这一次访问日志是否输出）。比如采样率被设置为 10，一部分调用链日志完全不输出，只有 hash(traceId) mod 10 的值等于0的日志才会输出。例如核心入口的调用量样本空间足够大（每日百万次以上级别），假设统计误差 0.1% ，即使开启1/10的采样总和误差也是可以接受的。</p>
<p><strong>微博 Watchman</strong>：如某个服务由于瞬时访问高峰，造成底层资源压力变大从而服务响应时间变长，控制策略可以根据设定随机丢弃后续的请求，如果情况加剧就会自动降级该服务，保证核心服务路径。</p>
<h2 id="扩展阅读：分布式追踪系统"><a href="#扩展阅读：分布式追踪系统" class="headerlink" title="扩展阅读：分布式追踪系统"></a>扩展阅读：分布式追踪系统</h2><ul>
<li><a href="https://riboseyim.github.io/2018/04/27/DevOps-OpenCensus" target="_blank" rel="external">DevOps 漫谈：开源分布式跟踪系统 OpenCensus</a></li>
<li><a href="https://riboseyim.github.io/2018/05/18/DevOps-OpenTracing/" target="_blank" rel="external">DevOps 漫谈：分布式追踪系统标准体系</a></li>
<li><a href="https://riboseyim.github.io/2017/10/30/Protocol-gRPC/" target="_blank" rel="external">远程通信协议：从 CORBA 到 gRPC</a></li>
<li><a href="https://riboseyim.github.io/2017/05/24/Log/" target="_blank" rel="external">应用程序开发中的日志管理(Go语言描述)</a></li>
</ul>
<h2 id="扩展阅读：动态追踪技术"><a href="#扩展阅读：动态追踪技术" class="headerlink" title="扩展阅读：动态追踪技术"></a>扩展阅读：动态追踪技术</h2><ul>
<li><a href="https://riboseyim.github.io/2016/11/26/DTrace/" target="_blank" rel="external">动态追踪技术(一)：DTrace 导论</a></li>
<li><a href="https://mp.weixin.qq.com/s?__biz=MjM5MTY1MjQ3Nw==&amp;mid=2651939588&amp;idx=1&amp;sn=35f71c5f88d1edf23cb2efc812ab8e6c&amp;chksm=bd578c168a20050041c08618281691f0111f61c789097a69095933057618637fc54817815921#rd" target="_blank" rel="external">动态追踪技术(二)：strace+gdb 溯源 Nginx 内存溢出异常 </a></li>
<li><a href="https://riboseyim.github.io/2017/04/17/DTrace_FTrace/" target="_blank" rel="external">动态追踪技术(三)：Tracing Your Kernel Function!</a></li>
<li><a href="https://riboseyim.github.io/2017/06/27/DTrace_bcc/" target="_blank" rel="external">动态追踪技术(四)：基于 Linux bcc/BPF 实现 Go 程序动态追踪</a></li>
<li><a href="https://riboseyim.github.io/2018/02/16/DTrace-Linux/" target="_blank" rel="external">动态追踪技术(五)：Welcome DTrace for Linux</a></li>
</ul>
<h2 id="扩展阅读：开源架构技术漫谈"><a href="#扩展阅读：开源架构技术漫谈" class="headerlink" title="扩展阅读：开源架构技术漫谈"></a>扩展阅读：开源架构技术漫谈</h2><ul>
<li><a href="https://riboseyim.github.io/2017/05/23/RestfulAPI/" target="_blank" rel="external">基于Go语言快速构建一个RESTful API服务</a></li>
<li><a href="https://riboseyim.github.io/2017/06/12/OpenSource-Kafka-Microservice/" target="_blank" rel="external">基于Kafka构建事件溯源型微服务</a></li>
<li><a href="https://riboseyim.github.io/2017/12/04/Visualization-Graphite/" target="_blank" rel="external">数据可视化（七）Graphite 体系结构详解</a></li>
<li><a href="https://riboseyim.github.io/2016/08/15/OpenSource-Kafka/" target="_blank" rel="external">DevOps 资讯 | LinkedIn 开源 Kafka Monitor</a></li>
</ul>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://wu-sheng.gitbooks.io/opentracing-io/content/" target="_blank" rel="external">OpenTraing 文档 | 中文 </a></li>
<li><a href="https://medium.com/opentracing/the-difference-between-tracing-tracing-and-tracing-84b49b2d54ea" target="_blank" rel="external">The difference between tracing, tracing, and tracing</a></li>
<li><a href="https://medium.com/jaegertracing/using-opentracing-with-istio-envoy-d8a4246bdc15" target="_blank" rel="external">Using OpenTracing with Istio/Envoy</a></li>
<li><a href="http://www.infoq.com/cn/articles/evolving-distributed-tracing-at-uber-engineering" target="_blank" rel="external">优步分布式追踪技术再度精进</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/34318538" target="_blank" rel="external">开放分布式追踪（OpenTracing）入门与 Jaeger 实现</a></li>
<li><a href="https://github.com/jaegertracing/jaeger" target="_blank" rel="external">Github | CNCF Jaeger, a Distributed Tracing System</a></li>
<li><a href="https://sematext.com/blog/opentracing-jaeger-as-distributed-tracer/?utm_source=getresponse&amp;utm_medium=email&amp;utm_campaign=devopslinks&amp;utm_content=DevOpsLinks+%23112:+Jenkins+Scripted+Pipelines,+The+State+Of+Stateful+Apps+on+K8S+%26+Never+Write+Your+Own+Database" target="_blank" rel="external">OpenTracing: Jaeger as Distributed Tracer</a></li>
<li><a href="https://medium.com/@Pinterest_Engineering/distributed-tracing-at-pinterest-with-new-open-source-tools-a4f8a5562f6b" target="_blank" rel="external">Distributed tracing at Pinterest with new open source tools</a></li>
<li><a href="https://medium.com/devthoughts/instrumenting-a-go-application-with-zipkin-b79cc858ac3e" target="_blank" rel="external">Instrumenting a Go application with Zipkin</a></li>
<li><a href="http://manzhizhen.iteye.com/blog/2348175" target="_blank" rel="external">分布式跟踪系统（一）：Zipkin的背景和设计</a></li>
<li><a href="http://ginobefunny.com/post/learning_distributed_systems_tracing/" target="_blank" rel="external">分布式调用跟踪系统调研笔记</a></li>
<li><a href="https://www.youtube.com/watch?v=Fbhhc4jtGW4&amp;feature=youtu.be" target="_blank" rel="external">Node.js Performance and Highly Scalable Micro-Services - Chris Bailey, IBM</a></li>
<li><a href="https://tech.meituan.com/mt-mtrace.html" target="_blank" rel="external">分布式会话跟踪系统架构设计与实践 | 美团点评技术团队 | 志桐 ·2016-10-14 18:13</a></li>
<li><a href="http://peter.bourgon.org/blog/2017/02/21/metrics-tracing-and-logging.html" target="_blank" rel="external">Metrics, tracing, and logging | 2017 02 21</a></li>
<li><a href="https://blog.codingnow.com/2018/05/skynet_trace.html" target="_blank" rel="external">跟踪 skynet 服务间的消息请求及性能分析 | 云风的Blog</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Key Words: metrics、logging、tracing&lt;/li&gt;
&lt;li&gt;Google Dapper Family : Uber Jaeger、淘宝 EagleEye、微博 Watchman、京东 CallGraph、美团 MTrace&lt;/li&gt;
&lt;li&gt;数据可视化 | Exporters&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="OpenSource" scheme="http://riboseyim.github.com/tags/OpenSource/"/>
    
      <category term="DevOps" scheme="http://riboseyim.github.com/tags/DevOps/"/>
    
      <category term="Linux" scheme="http://riboseyim.github.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>嗑药简史：咖啡上瘾，喝还是不喝？</title>
    <link href="http://riboseyim.github.com/2018/05/14/Addiction-Decision-Coffee/"/>
    <id>http://riboseyim.github.com/2018/05/14/Addiction-Decision-Coffee/</id>
    <published>2018-05-14T11:23:23.000Z</published>
    <updated>2018-05-15T05:50:55.921Z</updated>
    
    <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><ul>
<li>咖啡的保健作用及临床实证研究案例</li>
<li>咖啡种类、制作工艺对健康效益的影响<a id="more"></a>
</li>
</ul>
<p><img src="http://osgiyhxhy.bkt.clouddn.com/100315_coffee_opener_NEW_0.jpg" alt=""></p>
<h1 id="嗑药简史：咖啡上瘾，喝还是不喝？"><a href="#嗑药简史：咖啡上瘾，喝还是不喝？" class="headerlink" title="嗑药简史：咖啡上瘾，喝还是不喝？"></a>嗑药简史：咖啡上瘾，喝还是不喝？</h1><p>对于一种历史上曾不被信任的饮料，咖啡被证明是一种健康的上瘾（healthy addiction）。</p>
<p>早在 20 世纪 80 年代，挪威研究人员的报告中就已经提出咖啡似乎可以抵御肝脏疾病。从那时起，已经有研究显示深褐色饮料出对肝癌、二型糖尿病、心脏病和中风等具有保健价值。咖啡甚至可以预防抑郁症（depression）、帕金森病（Parkinson）和阿尔茨海默病（Alzheimer）。总的来说，研究结果非常惊人。美国研究人员在 2012 年报告说，一天喝两杯或更多杯咖啡的人比不喝咖啡的人长寿。日本、苏格兰和芬兰的研究结论也是如此。</p>
<p>咖啡因（caffeine）具有轻微成瘾性。咖啡不仅能让你振作起来，也可能会使你的情绪低落。目前，咖啡依然被很多人视为不利健康。它可能是世界上消费最广泛的饮料之一，但是人们一直认为，至少具有咖啡因活性的咖啡仍然有问题。“人们注意到咖啡因，” 心脏病学家 Arthur Klatsky 说，他在 Kaiser Permanente （位于加利福尼亚州·奥克兰）研究咖啡几十年。“大众通常认为，任何对神经系统有影响的东西都会有坏的东西。”</p>
<p>在 20 世纪 70 年代的研究中，咖啡怀疑者表示咖啡有心脏病风险。也有传言说它可能阻碍生长或致癌。没错，咖啡对某些人来说有负面影响，但并不包括上述担忧。</p>
<p>孕妇应该更加慎重，因为过量的咖啡因与流产风险有关。含咖啡因的咖啡会干扰睡眠或使人紧张。咖啡因可以增加心率，但其与慢性高血压（chronic high blood）的联系目前仍存在疑问。</p>
<p>新加坡国立大学的一位荷兰籍营养流行病学家 Rob van Dam 说：“饮用咖啡并不是一定与高血压联系在一起。” 事实上，大多数与咖啡和咖啡因有关的忧虑，包括胃溃疡，胃酸反流和称为 heart flutter 的心脏颤动（atrial fibrillation），在大量的研究中并没有出现。事实上，大多数研究表明咖啡有益或至少无害。</p>
<p>因此，大众对于咖啡饮料的观念正在改变。但是，由于科学家还没有完全确定咖啡是如何工作的，所以接受的速度很慢。在其成分中，咖啡因（caffeine）和多酚（polyphenols）显然是积极的参与者，但除此之外，其它的咖啡成分及作用就非常复杂了。</p>
<p>哈佛大学营养流行病学家 Frank Hu 说，“要研究出咖啡中各种成分的影响是非常困难的，因为它们中有很多难以分离的成分。” “他们总是搅和在一起。”</p>
<h2 id="保护肝脏"><a href="#保护肝脏" class="headerlink" title="保护肝脏"></a>保护肝脏</h2><p>咖啡最明显的好处是肝脏保健功能，肝是一个庞大大而繁忙的器官。食物中的营养物质通过胃肠道吸收并进入血液。这些营养素在肝脏代谢 - 排毒 - 调节血脂和血糖。</p>
<p>慢性肝病影响美国 15％ 的人口。肝脏最常因饮酒过量，感染丙型肝炎病毒或发生与肥胖有关的脂肪肝疾病而受损。正如皮肤在受损区域会形成坚硬的胶原蛋白斑块一样，肝脏也是如此。随着时间的推移，这一过程会导致纤维化的胶原瘢痕或纤维化（fibrosis），纤维化可能破坏血液流过肝脏。肝纤维化的潜在风险就是肝硬化（cirrhosis），最终导致肝衰竭（liver failure），Jonathan Dranoff 如是说，它是一位胃肠病学家和肝病学家，来自阿肯色大学医学院（University of Arkansas for Medical Sciences ，小石城）。</p>
<p>当肝脏感受到组织损伤时，复方腺苷（compound adenosine）与肝脏星状细胞（stellate cells）上的受体蛋白（receptor proteins）结合 —— 它们使胶原蛋白形成纤维性疤痕。咖啡因与腺苷受体结合并中断信号传导过程（interrupts the signaling process），从而抑制胶原蛋白大量生产。</p>
<blockquote>
<p>肝脏一直是神秘生理学的重要标志。它是最大的器官，它含有最多的血液，被认为是人类内脏中最黑暗、最深不可测的器官。因此，它被认为包含了命运的秘密，被用来算命。在柏拉图时代及后来的生理学中，肝脏代表着最黑暗的激情，特别是愤怒、嫉妒和贪婪的血腥烟雾，驱使人们的行为。因此，肝脏意味着感情冲动的生命本身。– 詹姆斯·希尔曼(James Hillman),心理学家，深度心理学最重要的代表人物之一。</p>
</blockquote>
<p>咖啡因抑制胶原蛋白过度生产的第二种方式是：它能够影响谷丙转氨酶（即肝功能检查中的 ALT 指标），这种酶与肝纤维化有关。同样是肝脏疾病患者，日常饮用咖啡的人（含咖啡因）比少量饮用者产生的酶更少。</p>
<p>在美国去年的一项大型研究中也显示，每天喝两杯或更多杯咖啡的能抑制这个麻烦的酶。其他研究表明，咖啡中的某些多酚（在咖啡豆或普通咖啡中发现）可以降低 ALT 水平（knock down）。</p>
<p>患有丙型病毒肝炎（可导致肝纤维化和癌症的病毒感染）的咖啡饮者，也显示出类似的益处。根据2010 年《Hepatology》的一项研究，177 名肝病患者中（大多数患有丙型肝炎），每天喝两杯以上咖啡（含咖啡因）的人比很少喝咖啡者的纤维化低。奇怪的是，其他来源的咖啡因，如能量饮料，则没有发现这项益处。</p>
<p>咖啡也可能对脂肪肝有效，该疾病随着肥胖率上升而蔓延。美国科学家挑选了 306 名未被诊断患有肝病的超重人群。超声波图像（Ultrasound images）和肝活检（biopsies）显示 180 人的肝脏有脂肪沉积现象，纤维化的早期迹象。基于这些测试，完全不喝咖啡者比咖啡消费者更快地走向纤维化。 2012 年《Hepatology》的一份报告指出，患有晚期脂肪肝的人平均每日饮用咖啡（含咖啡因）少于一杯，而那些仍处于疾病早期阶段的人每天接近两杯。</p>
<p><img src="http://osgiyhxhy.bkt.clouddn.com/Stage_of_liver_damage.JPG" alt=""></p>
<p>在抗肝癌方面，咖啡显示出惊人效果。今年早些时候，一个欧洲团队报告说，每天喝 2.5 杯咖啡以上的女性或 3.5 杯以上的的男性，患肝癌的概率比喝不到三分之一杯的人少72％ 。该研究持续监测 11 年，覆盖大约 50 万名健康人群。在研究期间，一共有 201 人发展成肝癌。科学家将研究成果发表在 4 月 15 日的 《 International Journal of Cancer》（国际癌症杂志），他们表示，即使考虑到肝炎的因素加以调整后，研究结果仍具有鲁棒性（稳健性）。</p>
<p>肝癌监测结果表明 “很可能是咖啡对慢性肝病保护作用的延伸”，Anna  Flögel 说。他是该研究的共同作者，来自德国 Potsdam-Rehbrücke 人类营养研究所。</p>
<p>一些医生认可这一结论。 “我要为患者的处方中加上咖啡吗？” Dranoff 问道。 “对于慢性肝病患者，答案是肯定的。”  2014 年 Liver International ，来自加州大学洛杉矶分校的医生 Sammy Saab及其同事表示，应该鼓励肝病患者“每天喝咖啡”。</p>
<h2 id="预防糖尿病"><a href="#预防糖尿病" class="headerlink" title="预防糖尿病"></a>预防糖尿病</h2><p>2002 年开始，有研究发现咖啡对二型糖尿病的保护作用。在一项针对健康人群的研究中，van Dam 和他的荷兰同事 Edith Feskens 发现，那些平均每天喝七杯咖啡的人比那些每天喝两杯或更少的人患糖尿病的概率要低一半。在这项研究中，年龄在 30 岁到 60 岁之间的人，保护作用开始发生的起点似乎是每天三杯，随着摄入量增加而增强。</p>
<p>该报告发表在《 Lancet 》(柳叶刀) 上，引发了数十项试图复制它的研究。在 2014 的 《 Diabetes Care 》( 糖尿病护理 ) 中发表了 28 项国际研究回顾，包括超过 100 万名健康受试者、监测 10 个月至 20 年。在研究中大约有 45000 例二型糖尿病患者。在一天喝三杯 vs 不足一杯的情况下对比，罹患糖尿病的可能性降低了 21 %。对于每天喝六杯的人来说，风险降低了 33% 。普通咖啡与无因咖啡结果一样。</p>
<p>二型糖尿病的发病之前的现象是能量代谢不良（inefficient energy metabolism）。细胞不能有效地摄取葡萄糖，从而导致高血糖。咖啡因和被称为绿原酸（chlorogenic acids）的多酚提高了代谢效率。当澳大利亚科学家给老鼠喂食高脂肪、高碳水化合物的食物时，动物开始表现出能量代谢不良的现象，其中一些发生了脂肪肝甚至心脏病的早期征兆。咖啡提取物，包括咖啡因、绿原酸和其他成分，提高了动物处理葡萄糖的能力，降低了血压，减缓了对心脏和肝脏的损害。该报告发表在 2012 年的《Journal of Nutrition》（营养杂志）。</p>
<p>当然，加糖会减损咖啡的神奇效果。另外，牛奶富含钙和蛋白质，但会稀释咖啡。因此，<strong>不建议刻意喝浓咖啡，普通咖啡即可。对于有非酒精性脂肪肝或者体重较重人群，无糖咖啡更合适</strong>。</p>
<h2 id="寻找完美的杯子"><a href="#寻找完美的杯子" class="headerlink" title="寻找完美的杯子"></a>寻找完美的杯子</h2><p>阿拉伯咖啡（Arabica，小果咖啡）和 罗布斯塔（Robusta，亦称中果咖啡 Coffea canephora，占世界咖啡产量的 20% ）。罗布斯塔的味道更具攻击性，咖啡因和益多酚（绿原酸）的含量更高。阿拉伯咖啡较温和也更受欢迎，但糖和油脂含量更高，邓肯甜甜圈和星巴克都声称只使用阿拉伯咖啡。</p>
<p>冲泡一杯健康的咖啡，制备方法可能与选择咖啡豆种类一样重要。根据 2013 年 《Food Chemistry》的一份报告，焙烤对咖啡豆中的绿原酸有很好的烹饪效果（见图表）。</p>
<p><img src="http://osgiyhxhy.bkt.clouddn.com/Coffee_Effect.png" alt=""></p>
<p><img src="http://osgiyhxhy.bkt.clouddn.com/Caffee_Caffeine_Content.png" alt=""></p>
<p>当今流行的滴滤器用于从咖啡中去除胆固醇油脂。煮咖啡和法式滤压壶（French press）可以过滤油脂；意大利浓咖啡只滤出部分油脂（油花和香气影响风味）。在2012 年发表的一项研究中，意大利浓咖啡饮用者相对于过滤咖啡的饮用者，高密度脂蛋白（High-density lipoprotein，HDL，“好的胆固醇”）水平更低、甘油三酯（TG）水平更高。但是过滤也有其缺点，包括抗癌成分的损失。</p>
<p>随着研究的深入，研究者们试图定义完美的杯子。“我们已经到达了一个有趣的十字路口，”Jonathan Dranoff 说，“在 <strong>手艺和健康之间</strong> 。”</p>
<h2 id="在显微镜下"><a href="#在显微镜下" class="headerlink" title="在显微镜下"></a>在显微镜下</h2><p>咖啡的抗癌作用似乎可以延伸到肝脏以外，但程度比较温和。例如，2月份发表的《Cancer Epidemiology, Biomarkers &amp; Prevention》（癌症流行病学、生物标记物与预防）报道，与少量饮用者相比，每天喝三杯咖啡的欧洲女性患子宫癌的风险低 19％。早些时候，日本研究人员发现，日常饮用咖啡的人相对极少饮用的人，稍微不太容易患上口腔和咽喉癌。咖啡也表现出对抗结肠癌，黑色素瘤和乳腺癌的潜力。</p>
<p>如果没有生物学解释，上述流行病学研究将大打折扣。对于癌症，咖啡有几个候选项。咖啡和咖啡因中的多酚促进 DNA 基因修复，这是保持细胞免于癌变的关键步骤。主要的多酚，绿原酸和咖啡酸（与咖啡因无关）是去甲基化剂，这意味着它们可以阻止甲基向 DNA 添加。甲基化（Methylation）可能是癌症的触发因素。</p>
<p><img src="http://osgiyhxhy.bkt.clouddn.com/Coffee_Kahweol.png" alt=""></p>
<p>称为二萜（diterpenes）的咖啡成分也可能与癌症发生作用。在细胞培养和动物研究中，称为咖啡醇（cafestol）和咖啡豆醇（kahweol）的两种二萜能抑制某些致癌物质并降低肝 DNA 加合物（与致癌化学物质结合的DNA片段）的浓度。 咖啡豆醇具有抗炎作用并抑制血管生成——肿瘤所需的血管生长紊乱。作为额外的好处，二萜类化合物可以提高谷胱甘肽（glutathione）的水平，谷胱甘肽是一种有效的抗氧化剂，可以预防肝脏损伤。在实验室的人类间皮瘤测试中（通常由石棉暴露引起的肺部癌症），二萜靶向并杀死癌细胞。</p>
<p>同时，巴西研究人员在 5 月份的《 Journal of Agricultural and Food Chemistry 》杂志上报道，绿原酸和咖啡酸也可以作为抗氧化剂，能够清除有害的自由基。在肠损伤的大鼠模型中，绿原酸和咖啡酸减少了自由基的损害。英国团队发现，在肠内，咖啡也可能有助于双歧杆菌的生长。这些天然的肠道居民已被用作益生菌治疗腹泻和溃疡性结肠炎。</p>
<p>葫芦巴碱（Trigonelline）是另外一种咖啡成分，似乎有助于抗糖尿病作用，同时还可作为抗氧化剂并有益于大脑。最近，科学家们开始对称为羟基氢醌（hydroxy­hydroquinone，HHQ）的咖啡化学成分感兴趣，它随着焙烧过程而增加。好消息是HHQ 可能具有抗癌特性。坏消息是它可能会抑制一些绿原酸的作用，特别是它们降低血压的能力。咖啡酸可以增强人体内的一氧化氮，使血管更灵活，利于血管扩张。</p>
<h2 id="放心剂量：一到四杯"><a href="#放心剂量：一到四杯" class="headerlink" title="放心剂量：一到四杯"></a>放心剂量：一到四杯</h2><p>所有这些生物效应，无论它们如何工作，都可能会阻止收割者。 2012 年《New England Journal of Medicine》的报道了一份死亡率研究，从 1995 年至 2008 年针对包括超过 400,000 名中年和老年人进行观测，研究发现咖啡消费可以降低死亡风险 6％ 至 16％。</p>
<p>在日本，最近一项对超过 9 万人进行的研究显示，每天饮用三到四杯咖啡似乎是最佳选择。研究人员在 5 月份的 《American Journal of Clinical Nutrition》（美国临床营养学杂志）中报道，根据接近 19 年的随访，每天饮用三到四杯咖啡的饮用者比不喝咖啡的人死亡率低 24％ 。</p>
<p>美国国家癌症研究所（ National Cancer Institute）的生物化学家和流行病学家尼尔·弗里德曼（Neal Freedman）说：“这些研究为常规饮用咖啡者提供了参考依据，这似乎是一种相对安全的行为。” 他共同撰写了 2012 年的研究报告。</p>
<p>在早期的工作中，van Dam 试图建立咖啡摄入量的安全上限。他和其他人发现，每天喝六杯的人中没有增加死亡风险。</p>
<p>尽管积极的调查结果大量涌现，但一些研究人员仍然保持谨慎态度。 Klatsky 提供了一个例子，关于研究显示房颤和咖啡、咖啡因之间是否相关。 “出现咖啡因症状的人倾向于停止饮用，” 他说。因此，在一些研究中喝咖啡的人会是那些没有任何不良影响的人，这是一个自我选择的群体。其他研究往往没有注意到人们喝咖啡的种类，烘焙程度或其他可能影响的细节。</p>
<p>尽管如此，咖啡的新地位 —— 作为一种不会带来内疚的快乐，可能正在成为主流。美国专家组会每五年审查一次膳食指南（dietary guidelines）并向联邦政府提出建议。其 2015 年 2 月的报告支出，每天喝三到五杯咖啡不会带来慢性疾病风险。该报告甚至指出了饮用咖啡对糖尿病，心脏病和帕金森症的明显益处。</p>
<p>“这是一种范式转变，” 专家小组成员 Hu 表示，科学家们持谨慎态度，并担心过多的咖啡因可能对孩子不利。但在成年人中，咖啡的图景日渐清晰。</p>
<p>“喝咖啡不是万能的，”  “这只是一种可能获得健康益处的饮用习惯。”</p>
<h2 id="总结：咖啡与健康"><a href="#总结：咖啡与健康" class="headerlink" title="总结：咖啡与健康"></a>总结：咖啡与健康</h2><p>国际癌症研究机构（International Agency for Research on Cancer，简称 IARC）是世界卫生组织下属的一个跨政府机构（办公地点：法国里昂）。该机构的主要任务是进行和促进对癌症病因的研究，也进行世界范围内的癌症的流行病学调查和研究工作。该机构还负责编纂关于各种提高患癌概率因素的论文集，这些因素包括化学品，混合物，辐射，物理和生物制剂和生活状态因素等。各国的卫生部门据此作为控制致癌因素的科学基础。</p>
<p>IARC 将致癌因素分为以下几类：</p>
<ul>
<li>1 类：对人类有确认的致癌性，包括放射性同位素、苯、石棉、黄曲霉素、酒精、烟草、槟榔、马兜铃酸（关木通、广防己、青木香、天仙藤、马兜铃等中药材）等。</li>
<li>2A 类：对人类很可能有致癌性，包括氯霉素、甲醛、苯乙烯、柴油内燃机废气等。</li>
<li>2B 类：有可能对人类致癌，包括电磁波、汽油引擎废气、黄樟素、乙醛等。</li>
<li>3 类：尚不能确定其是否对人体致癌</li>
<li>4 类：对人体基本无致癌作用</li>
</ul>
<p>1991 年，IARC 曾将咖啡中的咖啡酸与红肉一并列为 2B 类致癌物（限于膀胱癌），即“有可能对人体致癌”。不过，IARC 在 2016 年 6 月 15 日发表报告说明，经过彻底的审视 1000 份研究报告后，发现没有足够的证据支持“咖啡有可能致癌”的论点。</p>
<h4 id="咖啡因-Caffeine"><a href="#咖啡因-Caffeine" class="headerlink" title="咖啡因 Caffeine"></a>咖啡因 Caffeine</h4><ul>
<li>减少肝纤维化</li>
<li>减缓心脏和肝脏损伤</li>
<li>预防帕金森病，痴呆症和抑郁症</li>
<li>促进多巴胺分泌（使人感觉良好）</li>
</ul>
<h4 id="多酚-Polyphenols（绿原酸-chlorogenic-acids，咖啡酸-caffeic-acid）"><a href="#多酚-Polyphenols（绿原酸-chlorogenic-acids，咖啡酸-caffeic-acid）" class="headerlink" title="多酚 Polyphenols（绿原酸 chlorogenic acids，咖啡酸 caffeic acid）"></a>多酚 Polyphenols（绿原酸 chlorogenic acids，咖啡酸 caffeic acid）</h4><ul>
<li>减少肝纤维化</li>
<li>促进DNA修复</li>
<li>减少血栓</li>
<li>提高代谢率</li>
<li>降低血压（抵消咖啡因引起的短暂血压升高效应）</li>
<li>充当去甲基化剂</li>
<li>减少自由基引起的肠道损伤</li>
</ul>
<h4 id="二萜类化合物-Diterpenes（咖啡醇-cafestol-和-咖啡豆醇-kahweol）"><a href="#二萜类化合物-Diterpenes（咖啡醇-cafestol-和-咖啡豆醇-kahweol）" class="headerlink" title="二萜类化合物 Diterpenes（咖啡醇 cafestol 和 咖啡豆醇 kahweol）"></a>二萜类化合物 Diterpenes（咖啡醇 cafestol 和 咖啡豆醇 kahweol）</h4><ul>
<li>抗致癌物质</li>
<li>减少肝脏DNA加合物（与致癌物结合的DNA位）</li>
<li>提高谷胱甘肽的水平（一种防止肝损伤的抗氧化剂）</li>
<li>靶向并杀死肺组织中的间皮瘤细胞</li>
<li>咖啡豆醇具有抗炎作用，减少血液流向肿瘤</li>
<li>风险：可能导致更高水平的低密度脂蛋白胆固醇（LDL，“坏胆固醇”）</li>
</ul>
<h4 id="胡芦巴碱-Trigonelline"><a href="#胡芦巴碱-Trigonelline" class="headerlink" title="胡芦巴碱 Trigonelline"></a>胡芦巴碱 Trigonelline</h4><ul>
<li>抗氧化</li>
<li>降低血糖</li>
<li>可能有益于大脑</li>
</ul>
<h2 id="好马配好鞍，好咖啡更需要好音乐"><a href="#好马配好鞍，好咖啡更需要好音乐" class="headerlink" title="好马配好鞍，好咖啡更需要好音乐"></a>好马配好鞍，好咖啡更需要好音乐</h2><p>有人说，音乐、书和咖啡馆是三胞胎、不分彼此。冲上一壶好咖啡，如果再能来上一段乌兰诺娃的《天鹅湖》就更有味道了。黑胶唱片释放出来的美妙旋律，芭蕾舞演员极致轻盈、优雅舒展的舞姿，王子和公主登上金色的帆船，驶向幸福的远方 …… Perfect ！</p>
<p><img src="http://osgiyhxhy.bkt.clouddn.com/IMG_4860.png" alt=""></p>
<p><img src="http://osgiyhxhy.bkt.clouddn.com/IMG_4862.png" alt=""><br><img src="http://osgiyhxhy.bkt.clouddn.com/IMG_4864.png" alt=""><br><img src="http://osgiyhxhy.bkt.clouddn.com/IMG_4863.png" alt=""><br><img src="http://osgiyhxhy.bkt.clouddn.com/IMG_4865.png" alt=""></p>
<h2 id="扩展阅读：《嗑药简史》"><a href="#扩展阅读：《嗑药简史》" class="headerlink" title="扩展阅读：《嗑药简史》"></a>扩展阅读：《嗑药简史》</h2><h4 id="嗑药简史（一）：药物成瘾与神经系统"><a href="#嗑药简史（一）：药物成瘾与神经系统" class="headerlink" title="嗑药简史（一）：药物成瘾与神经系统"></a><a href="https://riboseyim.github.io/2017/09/04/Addiction-Decision/" target="_blank" rel="external">嗑药简史（一）：药物成瘾与神经系统</a></h4><ul>
<li>什么是瘾？成瘾分类：物质成瘾、行为成瘾</li>
<li>药物成瘾：管制药品及毒品、宗教致幻剂、酒精和烟草</li>
<li>行为成瘾：饮食、运动、性、暴力和战争</li>
<li>瘾的形成机制：奖赏路径和神经递质（多巴胺、肾上腺素、内啡肽和催产素）</li>
</ul>
<h4 id="嗑药简史（二）：瘾品跨境流动与外交关系"><a href="#嗑药简史（二）：瘾品跨境流动与外交关系" class="headerlink" title="嗑药简史（二）：瘾品跨境流动与外交关系"></a><a href="https://riboseyim.github.io/2017/11/06/Addiction-Decision-Fentanyl/" target="_blank" rel="external">嗑药简史（二）：瘾品跨境流动与外交关系</a></h4><p>扰动中美大国外交的 China Girl (芬太尼)</p>
<ul>
<li>什么是芬太尼,Fentanyl</li>
<li>大国外交的头等优先事项</li>
<li>预测：暗黑幽灵无国界</li>
</ul>
<h4 id="嗑药简史（三）：瘾品管制背后的情与法"><a href="#嗑药简史（三）：瘾品管制背后的情与法" class="headerlink" title="嗑药简史（三）：瘾品管制背后的情与法"></a><a href="https://riboseyim.github.io/2018/01/07/Addiction-Decision-Law/" target="_blank" rel="external">嗑药简史（三）：瘾品管制背后的情与法</a></h4><ul>
<li>严刑峻法：瘾品管制与定罪量刑</li>
<li>戈尔巴乔夫的禁酒运动</li>
</ul>
<h4 id="嗑药简史（四）：咖啡上瘾，喝还是不喝？"><a href="#嗑药简史（四）：咖啡上瘾，喝还是不喝？" class="headerlink" title="嗑药简史（四）：咖啡上瘾，喝还是不喝？"></a><a href="https://riboseyim.github.io/2018/05/14/Addiction-Decision-Coffee/" target="_blank" rel="external">嗑药简史（四）：咖啡上瘾，喝还是不喝？</a></h4><ul>
<li>咖啡的保健作用及临床实证研究案例</li>
<li>咖啡种类、制作工艺对健康效益的影响</li>
</ul>
<h4 id="嗑药简史（附录）：NIDA-美国青年人群药物滥用情况-2016-2017"><a href="#嗑药简史（附录）：NIDA-美国青年人群药物滥用情况-2016-2017" class="headerlink" title="嗑药简史（附录）：NIDA | 美国青年人群药物滥用情况(2016~2017)"></a><a href="https://riboseyim.github.io/2017/12/20/Addiction-Decision-2016-USA-Students/" target="_blank" rel="external">嗑药简史（附录）：NIDA | 美国青年人群药物滥用情况(2016~2017)</a></h4><h4 id="医学常识-NIH-情绪健康检查单"><a href="#医学常识-NIH-情绪健康检查单" class="headerlink" title="医学常识| NIH 情绪健康检查单"></a><a href="https://riboseyim.github.io/2018/01/22/Health-Emotional/" target="_blank" rel="external">医学常识| NIH 情绪健康检查单</a></h4><h4 id="医学常识-肝系统健康状况评价指标体系"><a href="#医学常识-肝系统健康状况评价指标体系" class="headerlink" title="医学常识| 肝系统健康状况评价指标体系"></a><a href="https://riboseyim.github.io/2017/07/19/Medicine-Hepar/" target="_blank" rel="external">医学常识| 肝系统健康状况评价指标体系</a></h4><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="http://monographs.iarc.fr/ENG/Monographs/vol51/mono51-6.pdf" target="_blank" rel="external">IARC 1991 | Coffee has never been a mere beverage | </a></li>
<li><a href="https://www.iarc.fr/en/media-centre/pr/2016/pdfs/pr244_E.pdf" target="_blank" rel="external">IARC 2016 | IARC Monographs evaluate drinking coffee, maté, and very hot beverages</a></li>
<li><a href="https://www.sciencenews.org/article/coffee-reveals-itself-unlikely-elixir?mode=topic&amp;context=69" target="_blank" rel="external">Coffee reveals itself as an unlikely elixir | From liver disease to diabetes, coffee compounds protect against an array of health conditions|BY NATHAN SEPPA 12:02PM, SEPTEMBER 18, 2015</a></li>
<li><a href="https://mp.weixin.qq.com/s/tNQgU-L_1I5jnXMbLjskZA" target="_blank" rel="external">咖啡，该给你处方了！—咖啡与肝脏疾病</a></li>
<li><a href="https://web.archive.org/web/20160305055908/https://www.scribd.com/doc/7577310/KUNDALINI-the-evolutionary-energy-in-man" target="_blank" rel="external">The evolutionary energy in man</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;咖啡的保健作用及临床实证研究案例&lt;/li&gt;
&lt;li&gt;咖啡种类、制作工艺对健康效益的影响
    
    </summary>
    
    
      <category term="Medical" scheme="http://riboseyim.github.com/tags/Medical/"/>
    
      <category term="Science" scheme="http://riboseyim.github.com/tags/Science/"/>
    
      <category term="Health" scheme="http://riboseyim.github.com/tags/Health/"/>
    
      <category term="Economist" scheme="http://riboseyim.github.com/tags/Economist/"/>
    
  </entry>
  
  <entry>
    <title>Machine Learning:神经网络基础</title>
    <link href="http://riboseyim.github.com/2018/05/07/Machine-Learning-Neural-Network/"/>
    <id>http://riboseyim.github.com/2018/05/07/Machine-Learning-Neural-Network/</id>
    <published>2018-05-07T09:42:51.000Z</published>
    <updated>2018-05-08T01:56:09.840Z</updated>
    
    <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><ul>
<li>Introduction</li>
<li>工作流程：Forward-Propagation、Backward Propagation、Partial Derivatives、Hyper Parameters</li>
<li>深度网络：A single layer Neural Network、Wide Neural Network  vs  Deep Neural Network</li>
<li>维度诅咒、权衡</li>
</ul>
<a id="more"></a>
<p><img src="http://omb2onfvy.bkt.clouddn.com/AI-Neurons.jpg" alt=""></p>
<h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>神经网络试图复制人脑的工作以使事情更加智能化。</p>
<p>神经网络通常是一种有监督的学习方法。这意味着需要有一套训练集。理想情况下，训练集合包含了绝对真值（tags | 标签，classes | 类 ）的例子。例如在文本情感分析的情况下，训练集是句子列表和它们各自对应的情绪。（注意：未标记的数据集也可以用来训练神经网络，但这里仅考虑最基本的情况。）</p>
<p>例如：将文本称为 X ，将它们的标签称为 Y 。 有一些函数可以定义 X 和 Y 之间的关系，比如是什么特征（词/短语/句子结构等）导致一个句子是否定的或肯定的的含义。早期的人们习惯于手动查找这些特征，这被称为特征工程（feature engineering）。神经网络使得这一过程实现自动化处理。</p>
<blockquote>
<p>So there are many ways you can understand a concept, choose whichever suits you, being persistent about the learning part. At the end knowing maths is a useful tool when it comes to optimisations or experimentations.</p>
</blockquote>
<h2 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h2><p><img src="http://omb2onfvy.bkt.clouddn.com/NeuralNetwork-Basic-1.jpg" alt=""></p>
<p>人工神经网络由3个组成部分组成：</p>
<ul>
<li>输入层 Input Layer</li>
<li>隐藏（计算）层 Hidden (computation) Layers</li>
<li>输出层 Output Layer</li>
</ul>
<p>学习过程分两步进行：</p>
<ul>
<li>前向传播 Forward-Propagation：猜测答案</li>
<li>反向传播 Back-Propagation：最小化实际答案和猜测答案之间的误差</li>
</ul>
<h4 id="前向传播-Forward-Propagation"><a href="#前向传播-Forward-Propagation" class="headerlink" title="前向传播 Forward-Propagation"></a>前向传播 Forward-Propagation</h4><p><img src="http://omb2onfvy.bkt.clouddn.com/NeuralNetwork-Basic-2.png" alt=""></p>
<p>随机初始化权重（Randomly initialize weights）</p>
<ul>
<li>w1</li>
<li>w2</li>
<li>w3<br>输入层的数据乘以权重形成隐藏层</li>
<li>h1 = (x1 * w1) + (x2 * w1)</li>
<li>h2 = (x1 * w2) + (x2 * w2)</li>
<li>h3 = (x1 * w3) + (x2 * w3)<br>隐藏层的输出通过非线性函数(激活函数)以形成猜测输出(guessed output)</li>
<li>y_ = fn( h1 , h2, h3 )</li>
</ul>
<h4 id="反向传播-Backward-Propagation"><a href="#反向传播-Backward-Propagation" class="headerlink" title="反向传播 Backward Propagation"></a>反向传播 Backward Propagation</h4><p><img src="http://omb2onfvy.bkt.clouddn.com/NeuralNetwork-Basic-3.jpg" alt=""></p>
<ul>
<li>总误差  total_error 通过一个代价函数 (cost function) 来计算，参数为计算期望值( expected value ) y（训练集中的值）和观测值(observed value)  y_（前向传播值）</li>
<li>按每一个权重计算误差的偏导数（这些偏微分是每一个权重在总误差中的量度）</li>
<li>微分后乘以一个小数 ( η ) ，η  称为学习率（learning rate）</li>
<li>然后从各自的权重中减去结果</li>
</ul>
<p>反向传播的结果是以下更新的权重：</p>
<ul>
<li>w1 = w1 - (η * ∂(err) / ∂(w1))</li>
<li>w2 = w2 - (η * ∂(err) / ∂(w2))</li>
<li>w3 = w3 - (η * ∂(err) / ∂(w3))</li>
</ul>
<p>基本上我们对权重初始化时是随机的，并假设他们会产生准确的答案。</p>
<blockquote>
<p>Those familiar with Taylor Series, backpropogation shares the same end result with it. But instead of an indefinite series we try to optimise the first element only.</p>
</blockquote>
<p>偏差（Bias）是添加到隐藏层的权重。它们也被随机初始化并以隐藏层相似的方式更新。虽然隐藏层的作用是映射数据中底层函数（underlying function）的模型，但偏差的作用是横向移动学习函数（the learned function），使其与原始函数（the original function）重叠。</p>
<p><img src="http://omb2onfvy.bkt.clouddn.com/NeuralNetwork-Basic-4.jpg" alt=""></p>
<h4 id="偏导数-Partial-Derivatives"><a href="#偏导数-Partial-Derivatives" class="headerlink" title="偏导数 Partial Derivatives"></a>偏导数 Partial Derivatives</h4><p>计算偏导数使我们能够知道每个权重对误差的贡献。</p>
<p>导数的需求是显而易见的。例如：假设一个试图找到自动驾驶汽车最佳速度的神经网络。现在，如果汽车发现速度比预期的更快或者更慢，那么神经网络会通过加速或减速来改变速度。什么是加速/减速？速度的导数。</p>
<h4 id="解释偏导数：射飞镖"><a href="#解释偏导数：射飞镖" class="headerlink" title="解释偏导数：射飞镖"></a>解释偏导数：射飞镖</h4><p>假设有几个孩子被要求向飞镖靶掷飞镖，瞄准中心。最初的结果是：</p>
<p><img src="http://omb2onfvy.bkt.clouddn.com/NeuralNetwork-Basic-5.jpg" alt=""></p>
<p>现在如果我们确认了总误差并简单地从所有权重中减去，那么我们可以概括每个学生的误差。假设一个孩子瞄准的目标太低，但是我们要求所有的孩子都瞄准得更高一些，结果是：</p>
<p><img src="http://omb2onfvy.bkt.clouddn.com/NeuralNetwork-Basic-6.jpg" alt=""></p>
<p>一些学生的错误可能会减少，但总体错误仍然会增加。通过查找偏导数，我们可以找出每个权重单独产生的误差。单独修正每个权重会得到以下结果：</p>
<p><img src="http://omb2onfvy.bkt.clouddn.com/NeuralNetwork-Basic-7.jpg" alt=""></p>
<h2 id="超参数-Hyper-Parameters"><a href="#超参数-Hyper-Parameters" class="headerlink" title="超参数 Hyper Parameters"></a>超参数 Hyper Parameters</h2><p>虽然神经网络被用于自动化特征选择，但是仍然有一些参数我们必须手动输入。</p>
<h4 id="学习速率-Learning-Rate"><a href="#学习速率-Learning-Rate" class="headerlink" title="学习速率 Learning Rate"></a>学习速率 Learning Rate</h4><p>学习速率是一个非常关键的超参数。如果学习速率太小，那么即使在长时间训练神经网络之后，它仍将远离最优结果。结果看起来像：</p>
<p><img src="http://omb2onfvy.bkt.clouddn.com/NeuralNetwork-Basic-8.jpg" alt=""></p>
<p>相反，如果学习率太高，那么学习者就会过早地得出结论。产生以下结果：</p>
<p><img src="http://omb2onfvy.bkt.clouddn.com/NeuralNetwork-Basic-9.jpg" alt=""></p>
<h4 id="激活函数-Activation-Function"><a href="#激活函数-Activation-Function" class="headerlink" title="激活函数 Activation Function"></a>激活函数 Activation Function</h4><p>简单来说，激活函数（激励函数）负责决定哪些神经元将被激活，即什么信息将传递给其他层。没有激活函数，深度神经网络将失去大量的描述学习能力。</p>
<p>这些函数的非线性负责增加学习者的自由度，使他们能够在较低维度上推广高维的问题。<br>下面是一些流行的激活函数的例子：<br><img src="http://omb2onfvy.bkt.clouddn.com/NeuralNetwork-Basic-10.png" alt=""></p>
<h4 id="成本函数-Cost-Function"><a href="#成本函数-Cost-Function" class="headerlink" title="成本函数 Cost Function"></a>成本函数 Cost Function</h4><p>成本函数是神经网络的核心。它用于计算真实和观察结果的损失(loss)。我们的目标是尽量减少这种损失。因此，成本函数有效地推动了神经网络对其目标的学习。</p>
<p>成本函数是神经网络做的“有多好”的量度，在给定训练样本和预期输出方面。它也可能取决于变量，如权重(weights)和偏差(biases)。</p>
<p>成本函数是一个单一的值，而不是一个矢量，因为它评价了神经网络作为一个整体的效果。<br>一些最着名的成本函数是：</p>
<ul>
<li>平方平均数 Quadratic Cost ，简称均方根 Root Mean Square</li>
<li>交叉熵 Cross Entropy</li>
<li>指数 Exponential (AdaBoost)</li>
<li>相对熵 Kullback–Leibler divergence 或者 信息收益 Information Gain</li>
</ul>
<p>均方根是其中最简单和最常用的。它被简单地定义为：</p>
<blockquote>
<p>Loss = √(expected_output ** 2) - (real_output ** 2)</p>
</blockquote>
<p>神经网络中的成本函数应满足两个条件：</p>
<ul>
<li>成本函数必须能够写成平均值</li>
<li>成本函数不能取决于除一个神经网络中的输出值以外的的任何激活值</li>
</ul>
<p><img src="http://omb2onfvy.bkt.clouddn.com/NeuralNetwork-Basic-11.jpg" alt=""></p>
<h2 id="深度网络"><a href="#深度网络" class="headerlink" title="深度网络"></a>深度网络</h2><p>深度学习是一类机器学习算法，可以从数据中学习更深入（更抽象）的洞察力。</p>
<ul>
<li>使用级联，类似流水线的依次传递管道，拥有多层处理单元（非线性）进行特征提取和转换。</li>
<li>基于以无监督方式学习数据的特征（表示数据知识）。更高级别的特征（在后面的处理图层中找到）是从更低级别的特征（可在初始处理图层中找到）导出的。</li>
<li>多级表示相对应的不同抽象级别；这些级别构成了概念的层次结构。</li>
</ul>
<h4 id="单层神经网络-A-single-layer-Neural-Network"><a href="#单层神经网络-A-single-layer-Neural-Network" class="headerlink" title="单层神经网络 A single layer Neural Network"></a>单层神经网络 A single layer Neural Network</h4><p>单层神经网络，无论第一层（绿色神经元）如何学习，他们只需将其传递给输出即可。</p>
<p><img src="http://omb2onfvy.bkt.clouddn.com/NeuralNetwork-Basic-12.png" alt=""></p>
<h4 id="双层神经网络-Two-layer-Neural-Network"><a href="#双层神经网络-Two-layer-Neural-Network" class="headerlink" title="双层神经网络 Two layer Neural Network"></a>双层神经网络 Two layer Neural Network</h4><p>对于两层神经网络，无论绿色隐藏层学习什么，都要传递到蓝色隐藏层，进一步学习（关于绿色层学习）。因此，隐藏层的数量越多，对先前已经学习过的概念的学习就越多。</p>
<p><img src="http://omb2onfvy.bkt.clouddn.com/NeuralNetwork-Basic-13.png" alt=""></p>
<h4 id="Wide-Neural-Network-vs-Deep-Neural-Network"><a href="#Wide-Neural-Network-vs-Deep-Neural-Network" class="headerlink" title="Wide Neural Network  vs  Deep Neural Network"></a>Wide Neural Network  vs  Deep Neural Network</h4><p>在一层中存在更多神经元的情况下，它不会获得更深层次的洞察力。相反，它的结果是学习到更多的概念。</p>
<p>例：学习英语语法，它需要理解大量的概念。在这种情况下，单层宽神经网络比深度神经网络的效果要好得多，而深度神经网络的宽度要小得多。</p>
<p><img src="http://omb2onfvy.bkt.clouddn.com/NeuralNetwork-Basic-14.png" alt=""></p>
<p>但在学习傅立叶变换(Fourier Transform)的情况下，学习者（神经网络）需要深入学习，因为没有太多的概念需要学习，但每个概念都足够复杂，需要深度学习。</p>
<p><strong>Balance is Key</strong></p>
<p>每个任务都使用深度和宽度神经网络是非常诱人的。这可能是一个非常糟糕的主意，因为：</p>
<ul>
<li>两者都显然需要更多的数据才能达到最低的理想精度（desirable accuracy）</li>
<li>两者都具有成倍增加的时间复杂度（time complexity）</li>
<li>太深的神经网络将尝试更深入地分解一个基本概念，但在这一点上它将对这个概念做出错误的假设，并试图找到不存在的伪模式（pseudo patterns）</li>
<li>太宽的神经网络会试图找到更多数量的特征（可测量特性）。因此，与上面类似，它将开始对数据做出错误的假设。</li>
</ul>
<h2 id="维度诅咒"><a href="#维度诅咒" class="headerlink" title="维度诅咒"></a>维度诅咒</h2><p>维度诅咒（The curse of dimensionality）是指在高维空间（通常具有数百或数千维度）中分析和组织数据时出现的各种现象，这些现象在低维设置中不会发生。</p>
<p>像英语语法或股票奖品等有很多影响他们的特征。使用机器学习必须用具有有限和相对小得多的长度（比实际存在的特征的数量）的阵列（array）/ 矩阵（matrix）来表示这些特征。要做到这一点可能产生两个问题：</p>
<ul>
<li>made by a learner：由于学习者的错误假设而出现偏差。高偏差会导致算法错过功能与目标输出之间的相关关系。这种现象被称为欠拟合（underfitting）。</li>
<li>insufficient learning : 由于对特征的了解不全面，训练集中的小波动导致较大偏差。高方差导致过度拟合（overfitting），将错误作为相关信息进行学习。</li>
</ul>
<h2 id="权衡"><a href="#权衡" class="headerlink" title="权衡"></a>权衡</h2><p><strong>It is typically impossible to have low bias and low variance.</strong></p>
<p>在训练早期因为网络输出远未达到要求，偏差很大。由于数据影响较小，方差很小。在训练后期因为网络已经学会了潜在的功能，偏差很小。</p>
<p><img src="http://omb2onfvy.bkt.clouddn.com/NeuralNetwork-Basic-15.jpg" alt=""></p>
<p>然而，如果训练太长，网络也将学习该数据集特殊的噪声。这导致在不同数据集上测试的结果表现为高方差，因为不同数据集的噪声存在变化。实际上，具有高偏差的算法通常产生更简单的模型，这些模型不倾向于过度拟合，但可能会削弱其训练数据，而不能捕获重要的模式或特征的属性。具有低偏差和高方差的模型在结构上通常更复杂，使得它们能够更准确地表示训练集。然而，在这一过程中，它们也可能代表训练集中的占比较大的噪声，使得它们的预测尽管复杂性增加，但精度却不太精确。</p>
<p>因此，低偏差和低方差同时存在通常是不可能的。</p>
<p>目前，依靠丰富的数据和工具，我们可以轻松地创建复杂的机器学习模型。如果学习者没有提供足够的信息时，实际上偏差就发生了，处理过度拟合将变成中心工作。如果提供更多的例子，则意味着更多的变化，包括模式的数量都增加了。</p>
<h2 id="扩展阅读-《The-Machine-Learning-Master》"><a href="#扩展阅读-《The-Machine-Learning-Master》" class="headerlink" title="扩展阅读:《The Machine Learning Master》"></a>扩展阅读:<a href="https://www.gitbook.com/book/riboseyim/machine-learning" target="_blank" rel="external">《The Machine Learning Master》</a></h2><p><img src="http://p11slcnom.bkt.clouddn.com/banner-MLM-201803.png" alt=""></p>
<ul>
<li><a href="https://riboseyim.github.io/2018/01/17/Machine-Learning-TensorFlow/" target="_blank" rel="external">Machine Learning(一):基于 TensorFlow 实现宠物血统智能识别</a></li>
<li><a href="https://riboseyim.github.io/2018/01/15/Machine-Learning-OpenCV/" target="_blank" rel="external">Machine Learning(二):宠物智能识别之 Using OpenCV with Node.js</a></li>
<li><a href="https://riboseyim.github.io/2018/02/09/Machine-Learning-Projects/" target="_blank" rel="external">Machine Learning:机器学习项目</a></li>
<li><a href="https://riboseyim.github.io/2018/02/10/Machine-Learning-Algorithms/" target="_blank" rel="external">Machine Learning:机器学习算法</a></li>
<li><a href="https://riboseyim.github.io/2018/04/02/Machine-Learning-Algorithms-Sheet/" target="_blank" rel="external">Machine Learning:如何选择机器学习算法</a></li>
<li><a href="https://riboseyim.github.io/2018/05/07/Machine-Learning-Neural-Network" target="_blank" rel="external">Machine Learning:神经网络基础</a></li>
<li><a href="https://riboseyim.github.io/2018/01/25/Machine-Learning-Books/" target="_blank" rel="external">Machine Learning:机器学习书单</a></li>
<li><a href="https://riboseyim.github.io/2017/08/29/Machine-Learning-News" target="_blank" rel="external">Machine Learning:人工智能媒体报道集</a></li>
<li><a href="https://riboseyim.github.io/2018/02/16/Machine-Learning-Law/" target="_blank" rel="external">Machine Learning:机器学习技术与知识产权法</a></li>
<li><a href="https://riboseyim.github.io/2018/03/09/Machine-Learning-Economist/" target="_blank" rel="external">Machine Learning:经济学家谈人工智能</a></li>
<li><a href="https://riboseyim.github.io/2017/09/15/Visualization-Graphviz/" target="_blank" rel="external">数据可视化（三）基于 Graphviz 实现程序化绘图</a></li>
</ul>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://becominghuman.ai/basics-of-neural-network-bef2ba97d2cf" target="_blank" rel="external">Basics of Neural Network | Mukul Malik</a></li>
<li><a href="https://morvanzhou.github.io/tutorials/machine-learning/ML-intro/3-04-activation-function/" target="_blank" rel="external">为什么需要激励函数 (Activation Function)</a></li>
<li><a href="http://selbydavid.com/2018/01/09/neural-network/" target="_blank" rel="external">Building a neural network from scratch in R</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Introduction&lt;/li&gt;
&lt;li&gt;工作流程：Forward-Propagation、Backward Propagation、Partial Derivatives、Hyper Parameters&lt;/li&gt;
&lt;li&gt;深度网络：A single layer Neural Network、Wide Neural Network  vs  Deep Neural Network&lt;/li&gt;
&lt;li&gt;维度诅咒、权衡&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="架构师" scheme="http://riboseyim.github.com/tags/%E6%9E%B6%E6%9E%84%E5%B8%88/"/>
    
      <category term="数学与算法" scheme="http://riboseyim.github.com/tags/%E6%95%B0%E5%AD%A6%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
      <category term="Machine-Learning" scheme="http://riboseyim.github.com/tags/Machine-Learning/"/>
    
  </entry>
  
  <entry>
    <title>玩转编程语言:基于Golang开发Web应用</title>
    <link href="http://riboseyim.github.com/2018/04/27/Language-Go-lang-Web/"/>
    <id>http://riboseyim.github.com/2018/04/27/Language-Go-lang-Web/</id>
    <published>2018-04-27T09:39:48.000Z</published>
    <updated>2018-04-30T11:32:59.695Z</updated>
    
    <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><a id="more"></a>
<h2 id="beego"><a href="#beego" class="headerlink" title="beego"></a>beego</h2><h4 id="Beego-ABC"><a href="#Beego-ABC" class="headerlink" title="Beego ABC"></a>Beego ABC</h4><ul>
<li><p>lib</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">go</span> get github.com/astaxie/beego</div><div class="line"><span class="keyword">go</span> get github.com/beego/admin/src/lib</div></pre></td></tr></table></figure>
</li>
<li><p>tools<br>bee 可执行文件默认路径 $GOPATH/bin</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">go</span> get github.com/beego/bee  <span class="comment">//tools</span></div></pre></td></tr></table></figure>
</li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">The commands are:</div><div class="line">    new         create an application base on beego framework</div><div class="line">    run         run the app <span class="built_in">which</span> can hot compile</div><div class="line">    pack        compress an beego project</div><div class="line">    api         create an api application base on beego framework</div><div class="line">    bale        packs non-Go files to Go <span class="built_in">source</span> files</div><div class="line">    version     show the bee &amp; beego version</div><div class="line">    generate    <span class="built_in">source</span> code generator</div><div class="line">    migrate     run database migrations</div></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">bash-3.2$ bee new hello</div><div class="line">______</div><div class="line">| ___ \</div><div class="line">| |_/ /  ___   ___</div><div class="line">| ___ \ / _ \ / _ \</div><div class="line">| |_/ /|  __/|  __/</div><div class="line">\____/  \___| \___| v1.9.1</div></pre></td></tr></table></figure>
<h4 id="Beego-Resources"><a href="#Beego-Resources" class="headerlink" title="Beego Resources"></a>Beego Resources</h4><ul>
<li><a href="https://beego.me/docs/intro/" target="_blank" rel="external">The architecture of Beego</a></li>
<li><a href="https://github.com/beego/tutorial/blob/master/README_zh.md" target="_blank" rel="external">beego入门教程</a></li>
<li><a href="https://github.com/beego/admin" target="_blank" rel="external">基于beego的后台管理系统</a></li>
</ul>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://blog.usejournal.com/top-6-web-frameworks-for-go-as-of-2017-23270e059c4b" target="_blank" rel="external">Top 6 web frameworks for Go as of 2017</a>.doc   </li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h2&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>DevOps 漫谈：开源分布式跟踪系统 OpenCensus</title>
    <link href="http://riboseyim.github.com/2018/04/27/DevOps-OpenCensus/"/>
    <id>http://riboseyim.github.com/2018/04/27/DevOps-OpenCensus/</id>
    <published>2018-04-27T02:33:09.000Z</published>
    <updated>2018-05-31T05:36:31.116Z</updated>
    
    <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><ul>
<li>Distributed Tracing and Monitoring System</li>
<li>OpenCensus: A framework for distributed tracing</li>
<li>OpenCensus Principle: data structure 、Context</li>
</ul>
<a id="more"></a>
<p><img src="http://og2061b3n.bkt.clouddn.com/DTM-OpenCensus-Theme.png" alt=""></p>
<p>This article is part of an <strong>Distributed Tracing and Monitoring System</strong> tutorial series. Make sure to check out my other articles as well:</p>
<ul>
<li><a href="https://riboseyim.github.io/2018/04/27/DevOps-OpenCensus" target="_blank" rel="external">DevOps 漫谈：开源分布式跟踪系统 OpenCensus</a></li>
<li><a href="https://riboseyim.github.io/2018/05/18/DevOps-OpenTracing/" target="_blank" rel="external">DevOps 漫谈：分布式追踪系统标准体系</a></li>
</ul>
<h2 id="绪论"><a href="#绪论" class="headerlink" title="绪论"></a>绪论</h2><p>随着互联网技术的高速发展，以往单应用的服务架构已经很难处理如山洪般增长的信息数据，随着云计算技术的大规模应用，以微服务、RESTful 为代表的各种软件架构广泛应用，跨团队、跨编程语言的大规模分布式系统也越来越多。相对而言，现在要理解系统行为，追踪诊断性能问题会复杂得多。</p>
<p>在单应用环境下，业务都在同一个服务器上，如果出现错误和异常只需要盯住一个点，就可以快速定位和处理问题；但是在微服务的架构下，功能模块天然是分布式部署运行的，前后台的业务流会经过很多个微服务的处理和传递，就连日志监控都会成为一个大问题（日志分散在多个服务器、无状态服务下如何查看业务流的处理顺序等），更不要说服务之间还有复杂的交互关系。</p>
<p>用户的一个请求在系统中会经过多个子系统（或者多个微服务）的处理，而且是发生在不同机器甚至是不同集群，当发生异常时需要快速发现问题，并准确定位到是哪个环节出了问题。对系统行为进行跟踪必须持续进行，因为异常的发生是无法预料的，有些甚至难以重现。跟踪需要无所不在，否则可能会遗漏某些重要的故障点。</p>
<p>为了解决上述问题，分布式跟踪系统 —— 一种帮助理解分布式系统行为、帮助分析性能问题的工具应运而生。</p>
<p><img src="http://og2061b3n.bkt.clouddn.com/DTM-OpenCensus-Micro-1.png" alt=""></p>
<p><img src="http://og2061b3n.bkt.clouddn.com/DTM-OpenCensus-Micro-2.png" alt=""></p>
<h2 id="第一部分-Google-Dapper-Distributed-Tracing-and-Monitoring-System"><a href="#第一部分-Google-Dapper-Distributed-Tracing-and-Monitoring-System" class="headerlink" title="第一部分 Google Dapper : Distributed Tracing and Monitoring System"></a>第一部分 Google Dapper : Distributed Tracing and Monitoring System</h2><blockquote>
<p>Modern Internet services are often implemented as complex, large-scale distributed systems.These applications are constructed from collections of software modules that may be developed by different teams, perhaps in different programming languages, and could span many thousands of machines across multiple physical facilities. Tools that aid in understanding system behavior and reasoning about performance issues are invaluable in such an environment.</p>
</blockquote>
<p>在分布式追踪领域著名的论文<a href="https://static.googleusercontent.com/media/research.google.com/zh-CN//archive/papers/dapper-2010-1.pdf" target="_blank" rel="external">《Dapper, a Large-Scale Distributed Systems Tracing Infrastructure|Google Technical Report dapper-2010-1, April 2010》</a> Google 工程师提出了关于分布式跟踪系统的一些重要概念：</p>
<ul>
<li><p>Annotation-based，基于标注或植入点(埋点)<br>在应用程序或中间件中明确定义全局标注（Annotation），一个特殊的ID，通过这个 ID 连接每一条请求记录。当然，这需要代码植入，在生产环境中可以通过一个通用组件开放给开发人员。</p>
</li>
<li><p>跟踪树（trace tree）和 span<br>在 Dapper 跟踪树中，基本单元是树节点（分配 spanid）。节点之间通过连线表示父子关系，通过 parentId 和 spanId 把所有的关系串联起来，实现记录业务流的作用。</p>
</li>
</ul>
<p><img src="http://og2061b3n.bkt.clouddn.com/DTM-Dapper-TraceTree-Span.png" alt=""></p>
<h2 id="第二部分-OpenCensus-A-framework-for-distributed-tracing"><a href="#第二部分-OpenCensus-A-framework-for-distributed-tracing" class="headerlink" title="第二部分 OpenCensus: A framework for distributed tracing"></a>第二部分 OpenCensus: A framework for distributed tracing</h2><blockquote>
<p>OpenCensus is a framework for stats collection and distributed tracing.</p>
</blockquote>
<p>Google Dapper 的定位更准确的说是分析系统，并不能解决从生产服务中提取数据的难题，OpenCensus 项目为此提供了解决方案。</p>
<p><img src="http://og2061b3n.bkt.clouddn.com/DTM-OpenCensus-Logo.png" alt=""></p>
<p>OpenCensus 项目是 Google 开源的一个用来收集和追踪应用指标的第三方库。OpenCensus 能够提供了一套统一的测量工具：跨服务捕获跟踪跨度（span）、应用级别指标以及来自其他应用的元数据（例如日志）。OpenCensus 有如下一些主要特点：</p>
<ul>
<li>标准通信协议和一致的 API ：用于处理 metric 和 trace</li>
<li>多语言库，包括Java，C++，Go，.Net，<a href="https://github.com/census-instrumentation/opencensus-python" target="_blank" rel="external">Python</a>，PHP，Node.js，Erlang 和 Ruby</li>
<li>与 RPC 框架的集成，可以提供开箱即用的追踪和指标。</li>
<li>集成的存储和分析工具</li>
<li>完全开源，支持第三方集成和输出的插件化</li>
<li>不需要额外的服务器或守护进程来支持 OpenCensus</li>
<li>In process debugging：一个可选的代理程序，用于在目标主机上显示请求和指标数据</li>
</ul>
<p><img src="http://og2061b3n.bkt.clouddn.com/DTM-OpenCensus-Language.png" alt=""></p>
<h2 id="OpenCensus-Concepts"><a href="#OpenCensus-Concepts" class="headerlink" title="OpenCensus Concepts"></a>OpenCensus Concepts</h2><h4 id="Tags-标签"><a href="#Tags-标签" class="headerlink" title="Tags | 标签"></a>Tags | 标签</h4><p>OpenCensus 允许系统在记录时将度量与维度相关联。记录的数据使我们能够从各种不同的角度分析测量结果，即使在高度互连和复杂的系统中也能够应付。<br>标签以键值对的形式在上下文中传递，并且允许在当前上下文中添加或修改。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ctx, err = tag.New(ctx,</div><div class="line">	tag.Insert(osKey, <span class="string">"macOS-10.12.5"</span>),</div><div class="line">	tag.Upsert(userIDKey, <span class="string">"cde36753ed"</span>),</div><div class="line">)</div></pre></td></tr></table></figure>
<h4 id="Stats-统计"><a href="#Stats-统计" class="headerlink" title="Stats | 统计"></a>Stats | 统计</h4><p>Stats 收集库和应用程序记录的测量结果，汇总、导出统计数据。为了实现低开销（ a low-overhead framework even if instrumentation is always enabled ），数据点记录和数据聚合是分离的，OpenCensus 统计收集分两个阶段进行：</p>
<ul>
<li>测量的定义和数据点的记录 | Definition of measures and recording of data points</li>
<li>视图的定义和记录数据的聚合 | Definition of views and aggregation of the recorded data</li>
</ul>
<h4 id="Recording-记录"><a href="#Recording-记录" class="headerlink" title="Recording | 记录"></a>Recording | 记录</h4><p>量度 (Measurements) 是与测量相关联的数据点。(Measurements are data points associated with a measure.)<br>记录 (Recording) 利用上下文中所提供的标签隐式地标记量度集合。(Recording implicitly tags the set of Measurements with the tags from the provided context.)</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">stats.Record(ctx, videoSize.M(<span class="number">102478</span>))</div></pre></td></tr></table></figure>
<h4 id="Trace-跟踪"><a href="#Trace-跟踪" class="headerlink" title="Trace | 跟踪"></a>Trace | 跟踪</h4><p>Trace 是嵌套 Span (跨度)的集合。Trace 包括单个用户请求的处理进度，直到用户请求得到响应。Trace 通常跨越分布式系统中的多个节点。跟踪由 TraceId 唯一标识， Trace 中的所有 Span 都具有相同的 TraceId 。</p>
<p>一个 Span 代表一个操作或一个工作单位。多个 Span 可以是“Trace”的一部分，它代表跨多个进程/节点的执行路径（通常是分布式的）。同一轨迹内的 Span 具有相同的 TraceId。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ctx, span := trace.StartSpan(ctx, <span class="string">"your function name"</span>)</div><div class="line"><span class="keyword">defer</span> span.End()</div></pre></td></tr></table></figure>
<h4 id="视图-Views"><a href="#视图-Views" class="headerlink" title="视图 | Views"></a>视图 | Views</h4><p>视图用于聚合测量结果。你可以把它们看作是对记录数据点（量度）集合的查询。<br>视图包括两个部分：分组标签（group by）和聚合类型（aggregation type）。<br>目前 OpenCensus  ( Golang API ) 支持三种类型的聚合：</p>
<ul>
<li>CountAggregation 用于记录被抽样的次数；</li>
<li>DistributionAggregation 用于提供包含一系列样本值的直方图；</li>
<li>SumAggregation 用于汇总所有样本值。</li>
</ul>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">distAgg := view.Distribution(<span class="number">0</span>, <span class="number">1</span>&lt;&lt;<span class="number">32</span>, <span class="number">2</span>&lt;&lt;<span class="number">32</span>, <span class="number">3</span>&lt;&lt;<span class="number">32</span>)</div><div class="line">countAgg := view.Count()</div><div class="line">sumAgg := view.Sum()</div></pre></td></tr></table></figure>
<p>示例：创建一个视图（ DistributionAggregation，指标 “videoSize” ）<br><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> err := view.Register(&amp;view.View&#123;</div><div class="line">	Name:        <span class="string">"my.org/video_size_distribution"</span>,</div><div class="line">	Description: <span class="string">"distribution of processed video size over time"</span>,</div><div class="line">	Measure:     videoSize,</div><div class="line">	Aggregation: view.Distribution(<span class="number">0</span>, <span class="number">1</span>&lt;&lt;<span class="number">32</span>, <span class="number">2</span>&lt;&lt;<span class="number">32</span>, <span class="number">3</span>&lt;&lt;<span class="number">32</span>),</div><div class="line">&#125;); err != <span class="literal">nil</span> &#123;</div><div class="line">	log.Fatalf(<span class="string">"Failed to subscribe to view: %v"</span>, err)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="Introspection-内省"><a href="#Introspection-内省" class="headerlink" title="Introspection | 内省"></a>Introspection | 内省</h4><p>OpenCensus 提供在线仪表板，显示进程中的诊断数据。这些页面被称为 z-pages ，它们有助于了解如何查看来自特定进程的数据，而不必依赖任何度量收集器或分布式跟踪后端。</p>
<p><img src="http://og2061b3n.bkt.clouddn.com/DTM-OpenCensus-traceZ.png" alt=""></p>
<h2 id="OpenCensus-Examples"><a href="#OpenCensus-Examples" class="headerlink" title="OpenCensus Examples"></a>OpenCensus Examples</h2><h4 id="创建指标"><a href="#创建指标" class="headerlink" title="创建指标"></a>创建指标</h4><ul>
<li>定义指标类型</li>
<li>定义显示方式</li>
</ul>
<p>Track Metrics 一般需要考虑服务负载（Server Load）、响应时间（Response Time）、误码率(Error Rates)等。</p>
<p>实例：</p>
<ul>
<li><a href="https://github.com/census-instrumentation/opencensus-go/blob/master/examples/http/helloworld_server/main.go" target="_blank" rel="external">opencensus-go-examples-helloworld</a></li>
<li><a href="https://github.com/census-instrumentation/opencensus-java" target="_blank" rel="external">opencensus-java-examples</a></li>
<li><a href="https://medium.com/@orijtech/hello-world-for-web-servers-in-go-with-opencensus-29955b3f02c6" target="_blank" rel="external">“Hello, world!” for web servers in Go with OpenCensus</a></li>
</ul>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> (</div><div class="line">  <span class="string">"go.opencensus.io/stats"</span></div><div class="line">  <span class="string">"go.opencensus.io/tag"</span></div><div class="line">  <span class="string">"go.opencensus.io/stats/view"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="keyword">var</span> (</div><div class="line">  requestCounter             *stats.Float64Measure</div><div class="line">  codeKey                    tag.Key</div><div class="line">  DefaultLatencyDistribution = view.DistributionAggregation&#123;<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">10</span>, <span class="number">13</span>, <span class="number">16</span>, <span class="number">20</span>, <span class="number">25</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>, <span class="number">65</span>, <span class="number">80</span>, <span class="number">100</span>, <span class="number">130</span>, <span class="number">160</span>, <span class="number">200</span>, <span class="number">250</span>, <span class="number">300</span>, <span class="number">400</span>, <span class="number">500</span>, <span class="number">650</span>, <span class="number">800</span>, <span class="number">1000</span>, <span class="number">2000</span>, <span class="number">5000</span>, <span class="number">10000</span>, <span class="number">20000</span>, <span class="number">50000</span>, <span class="number">100000</span>&#125;</div><div class="line">)</div><div class="line">	codeKey, _ = tag.NewKey(<span class="string">"banias/keys/code"</span>)</div><div class="line"></div><div class="line">  requestCounter, _ = stats.Float64(<span class="string">"banias/measures/request_count"</span>, <span class="string">"Count of HTTP requests processed"</span>, stats.UnitNone)</div><div class="line">	view.Subscribe(</div><div class="line">		&amp;view.View&#123;</div><div class="line">			Name:        <span class="string">"request_count"</span>,</div><div class="line">			Description: <span class="string">"Count of HTTP requests processed"</span>,</div><div class="line">			TagKeys:     []tag.Key&#123;codeKey&#125;,</div><div class="line">			Measure:     requestCounter,</div><div class="line">			Aggregation: view.CountAggregation&#123;&#125;,</div><div class="line">		&#125;)</div><div class="line"></div><div class="line">    <span class="comment">// requestlatency .....</span></div><div class="line"></div><div class="line">	view.SetReportingPeriod(<span class="number">1</span> * time.Second)</div></pre></td></tr></table></figure>
<h4 id="收集指标数据"><a href="#收集指标数据" class="headerlink" title="收集指标数据"></a>收集指标数据</h4><ul>
<li>Call the Record method</li>
</ul>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// Go Code Example</span></div><div class="line"><span class="comment">// 说明：defer 用于资源的释放，会在函数返回之前进行调用。</span></div><div class="line"><span class="comment">// 如果有多个 defer表达式，调用顺序类似于栈，越后面的 defer 表达式越先被调用。</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Collector)</span> <span class="title">Collect</span><span class="params">(ctx *fasthttp.RequestCtx)</span></span> &#123;</div><div class="line"></div><div class="line">  <span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">(begin time.Time)</span></span> &#123;</div><div class="line">      responseTime := <span class="keyword">float64</span>(time.Since(begin).Nanoseconds() / <span class="number">1000</span>)</div><div class="line">      occtx, _ := tag.New(context.Background(), tag.Insert(codeKey, strconv.Itoa(ctx.Response.StatusCode())), )</div><div class="line"></div><div class="line">      stats.Record(occtx, requestCounter.M(<span class="number">1</span>))</div><div class="line">      stats.Record(occtx, requestlatency.M(responseTime))</div><div class="line"></div><div class="line">    &#125;(time.Now())</div><div class="line"></div><div class="line">    <span class="comment">/*do some stuff */</span></div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="第三方数据接口-Exporter"><a href="#第三方数据接口-Exporter" class="headerlink" title="第三方数据接口 | Exporter"></a>第三方数据接口 | Exporter</h4><p>OpenCensus 是独立于供应商的。OpenCensus 收集和跟踪的应用指标可以在本地显示，也可将其发送到第三方分析工具或监控系统实现可视化，例如：</p>
<ul>
<li><a href="https://prometheus.io" target="_blank" rel="external">Prometheus|普罗米修斯</a></li>
<li><a href="https://cloud.google.com/stackdriver/" target="_blank" rel="external">Stackdriver|适用于 Google Cloud Platform 与 AWS 应用的监控、日志记录和诊断工具</a> | <a href="https://medium.com/@orijtech/cloud-spanner-instrumented-by-opencensus-and-exported-to-stackdriver-6ed61ed6ab4e" target="_blank" rel="external">示例</a></li>
<li><a href="https://zipkin.io" target="_blank" rel="external">Zipkin</a></li>
<li><a href="https://medium.com/@DazWilkin/opencensus-tracing-w-jaeger-2ada1656a2bf" target="_blank" rel="external">OpenCensus Tracing with Uber’s Jaeger project</a></li>
</ul>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line"> <span class="keyword">import</span> (</div><div class="line"> 	 <span class="string">"go.opencensus.io/exporter/prometheus"</span></div><div class="line">   <span class="string">"go.opencensus.io/exporter/stackdriver"</span></div><div class="line">    openzipkin <span class="string">"github.com/openzipkin/zipkin-go"</span></div><div class="line">  	 <span class="string">"go.opencensus.io/exporter/zipkin"</span></div><div class="line">    xray <span class="string">"github.com/census-instrumentation/opencensus-go-exporter-aws"</span></div><div class="line">  	 <span class="string">"go.opencensus.io/trace"</span></div><div class="line">   <span class="string">"go.opencensus.io/stats/view"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="comment">// Opention: Export to Prometheus Monitoring.</span></div><div class="line"> Exporter, err := prometheus.NewExporter(prometheus.Options&#123;&#125;)</div><div class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">	logger.Error(<span class="string">"Error creating prometheus exporter  "</span>, zap.Error(err))</div><div class="line">&#125;</div><div class="line">view.RegisterExporter(pExporter)</div><div class="line"></div><div class="line"></div><div class="line"> <span class="comment">// Opention: Export to Stackdriver Monitoring.</span></div><div class="line">sExporter, err := stackdriver.NewExporter(stackdriver.Options&#123;ProjectID: config.ProjectID&#125;)</div><div class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">	logger.Error(<span class="string">"Error creating stackdriver exporter  "</span>, zap.Error(err))</div><div class="line">&#125;</div><div class="line">view.RegisterExporter(sExporter)</div><div class="line"></div><div class="line"> <span class="comment">// Opention: Export to Zipkin Monitoring.</span></div><div class="line">localEndpoint, err := openzipkin.NewEndpoint(<span class="string">"service-A"</span>, <span class="string">"127.0.1.1:8080"</span>)</div><div class="line">reporter := http.NewReporter(<span class="string">"http://127.0.1.110:9411/api/v2/spans"</span>)</div><div class="line"><span class="keyword">defer</span> reporter.Close()</div><div class="line">exporter := zipkin.NewExporter(reporter, localEndpoint)</div><div class="line">trace.RegisterExporter(exporter)</div><div class="line"></div><div class="line"> <span class="comment">// Opention: Export to AWS X-Ray</span></div><div class="line">xe, err := xray.NewExporter(xray.WithVersion(<span class="string">"latest"</span>))</div><div class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</div><div class="line">	log.Fatalf(<span class="string">"Failed to create AWS X-Ray exporter: %v"</span>, err)</div><div class="line">&#125;</div><div class="line">trace.RegisterExporter(xe)</div></pre></td></tr></table></figure>
<h4 id="数据可视化"><a href="#数据可视化" class="headerlink" title="数据可视化"></a>数据可视化</h4><ul>
<li>函数内容为空（微秒级）</li>
</ul>
<p><img src="http://og2061b3n.bkt.clouddn.com/zipkin-%E7%A9%BA%E6%96%B9%E6%B3%95.png" alt=""></p>
<ul>
<li>串行调用函数方法，内容包括网络访问和持久化操作（毫秒级）</li>
</ul>
<p><img src="http://og2061b3n.bkt.clouddn.com/zipkin-%E4%B8%B2%E8%A1%8C.png" alt=""></p>
<ul>
<li>并行调用函数方法（Go routine），内容与上同</li>
</ul>
<p><img src="http://og2061b3n.bkt.clouddn.com/zipkin-%E5%B9%B6%E8%A1%8C.png" alt=""></p>
<ul>
<li>多服务调用</li>
</ul>
<p><img src="http://og2061b3n.bkt.clouddn.com/DTM-Zipkin-Twitter.png" alt="OpenZipkin-Twitter"></p>
<h2 id="第三部分：OpenCensus-Principle-工作原理-待续"><a href="#第三部分：OpenCensus-Principle-工作原理-待续" class="headerlink" title="第三部分：OpenCensus Principle | 工作原理 (待续)"></a>第三部分：OpenCensus Principle | 工作原理 (待续)</h2><h4 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h4><p>Span 共有属性：</p>
<ul>
<li>TraceId</li>
<li>SpanId</li>
<li>Start Time</li>
<li>End Time</li>
<li>Status</li>
</ul>
<p>Span 可选属性：</p>
<ul>
<li>Parent SpanId</li>
<li>Remote Parent</li>
<li>Attributes</li>
<li>Annotations</li>
<li>Message Events</li>
<li>Links</li>
</ul>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//go.opencensus.io/trace.go</span></div><div class="line"></div><div class="line"><span class="keyword">type</span> Span <span class="keyword">struct</span> &#123;</div><div class="line">	<span class="comment">// data contains information recorded about the span.</span></div><div class="line">	<span class="comment">//</span></div><div class="line">	<span class="comment">// It will be non-nil if we are exporting the span or recording events for it.</span></div><div class="line">	<span class="comment">// Otherwise, data is nil, and the Span is simply a carrier for the</span></div><div class="line">	<span class="comment">// SpanContext, so that the trace ID is propagated.</span></div><div class="line">	data        *SpanData</div><div class="line">   <span class="comment">// protects the contents of *data (but not the pointer value.)</span></div><div class="line">	mu          sync.Mutex</div><div class="line">	spanContext SpanContext</div><div class="line">	<span class="comment">// spanStore is the spanStore this span belongs to, if any, otherwise it is nil.</span></div><div class="line">	*spanStore</div><div class="line"></div><div class="line">	endOnce sync.Once</div><div class="line"></div><div class="line">	executionTracerTaskEnd <span class="function"><span class="keyword">func</span><span class="params">()</span></span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="title">type</span> <span class="title">SpanContext</span> <span class="title">struct</span> &#123;</div><div class="line">	TraceID      TraceID</div><div class="line">	SpanID       SpanID</div><div class="line">	TraceOptions TraceOptions</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><img src="http://og2061b3n.bkt.clouddn.com/OpenCensus-DataModel-Base.png" alt=""></p>
<h4 id="上下文-Context"><a href="#上下文-Context" class="headerlink" title="上下文 Context"></a>上下文 Context</h4><p><img src="http://og2061b3n.bkt.clouddn.com/DTM-Context.png" alt=""></p>
<p>上下文 Context 按照树型关系构建。以 Golang 为例，创建 Context 树第一步就是通过 context.Background() 得到根节点，再由 WithCancel()、WithTimeout() 等函数创建其它的子节点，孙节点。子节点从父节点复制得到，在子节点也可以设定新的状态值，如此就可以使元数据在子节点之间层层传递。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">Background</span><span class="params">()</span> <span class="title">Context</span></span></div><div class="line"></div><div class="line"><span class="title">func</span> <span class="title">WithCancel</span><span class="params">(parent Context)</span> <span class="params">(ctx Context, cancel CancelFunc)</span></div><div class="line"></div><div class="line"><span class="title">func</span> <span class="title">WithDeadline</span><span class="params">(parent Context, deadline time.Time)</span> <span class="params">(Context, CancelFunc)</span></div><div class="line"></div><div class="line"><span class="title">func</span> <span class="title">WithTimeout</span><span class="params">(parent Context, timeout time.Duration)</span> <span class="params">(Context, CancelFunc)</span></div><div class="line"></div><div class="line"><span class="title">func</span> <span class="title">WithValue</span><span class="params">(parent Context, key <span class="keyword">interface</span>&#123;&#125;, val <span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">Context</span></div></pre></td></tr></table></figure>
<ul>
<li>gRPC Client</li>
</ul>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">conn, err := grpc.Dial(address, grpc.WithStatsHandler(&amp;ocgrpc.ClientHandler&#123;&#125;), grpc.WithInsecure())</div><div class="line"><span class="keyword">defer</span> conn.Close()</div><div class="line"></div><div class="line">c := pb.NewGreeterClient(conn)</div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line"><span class="keyword">for</span> &#123;</div><div class="line">  r, err := c.SayHello(context.Background(), &amp;pb.HelloRequest&#123;Name: name&#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li>gRPC Server</li>
</ul>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// SayHello implements helloworld.GreeterServer</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *server)</span> <span class="title">SayHello</span><span class="params">(ctx context.Context, in *pb.HelloRequest)</span> <span class="params">(*pb.HelloReply, error)</span></span> &#123;</div><div class="line">	ctx, span := trace.StartSpan(ctx, <span class="string">"sleep"</span>)</div><div class="line">	time.Sleep(time.Duration(rand.Float64() * <span class="keyword">float64</span>(time.Second)))</div><div class="line">	span.End()</div><div class="line">	<span class="keyword">return</span> &amp;pb.HelloReply&#123;Message: <span class="string">"Hello "</span> + in.Name&#125;, <span class="literal">nil</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<ul>
<li><strong>go.opencensus.io/trace.go</strong> 源码</li>
</ul>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//go.opencensus.io/trace.go</span></div><div class="line"></div><div class="line"><span class="comment">// StartSpan starts a new child span of the current span in the context. If</span></div><div class="line"><span class="comment">// there is no span in the context, creates a new trace and span.</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">StartSpan</span><span class="params">(ctx context.Context, name <span class="keyword">string</span>, o ...StartOption)</span> <span class="params">(context.Context, *Span)</span></span> &#123;</div><div class="line">	<span class="keyword">var</span> opts StartOptions</div><div class="line">	<span class="keyword">var</span> parent SpanContext</div><div class="line">	<span class="keyword">if</span> p := FromContext(ctx); p != <span class="literal">nil</span> &#123;</div><div class="line">		parent = p.spanContext</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">for</span> _, op := <span class="keyword">range</span> o &#123;</div><div class="line">		op(&amp;opts)</div><div class="line">	&#125;</div><div class="line">	span := startSpanInternal(name, parent != SpanContext&#123;&#125;, parent, <span class="literal">false</span>, opts)</div><div class="line"></div><div class="line">	ctx, end := startExecutionTracerTask(ctx, name)</div><div class="line">	span.executionTracerTaskEnd = end</div><div class="line">	<span class="keyword">return</span> NewContext(ctx, span), span</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// FromContext returns the Span stored in a context, or nil if there isn't one.</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">FromContext</span><span class="params">(ctx context.Context)</span> *<span class="title">Span</span></span> &#123;</div><div class="line">	s, _ := ctx.Value(contextKey&#123;&#125;).(*Span)</div><div class="line">	<span class="keyword">return</span> s</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="视图"><a href="#视图" class="headerlink" title="视图"></a>视图</h4><ul>
<li>注册-订阅 模式</li>
</ul>
<p>视图注册之后开始收集给定的数据。一旦该视图被订阅，它就向已注册的 Exporter 报送数据。</p>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// source code : go.opencensus.io/view/worker.go</span></div><div class="line"></div><div class="line"><span class="comment">// Register begins collecting data for the given views.</span></div><div class="line"><span class="comment">// Once a view is subscribed, it reports data to the registered exporters.</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">Register</span><span class="params">(views ...*View)</span> <span class="title">error</span></span> &#123;</div><div class="line">	<span class="keyword">for</span> _, v := <span class="keyword">range</span> views &#123;</div><div class="line">		<span class="keyword">if</span> err := v.canonicalize(); err != <span class="literal">nil</span> &#123;</div><div class="line">			<span class="keyword">return</span> err</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	req := &amp;registerViewReq&#123;</div><div class="line">		views: views,</div><div class="line">		err:   <span class="built_in">make</span>(<span class="keyword">chan</span> error),</div><div class="line">	&#125;</div><div class="line">	defaultWorker.c &lt;- req</div><div class="line">	<span class="keyword">return</span> &lt;-req.err</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="Exporter"><a href="#Exporter" class="headerlink" title="Exporter"></a>Exporter</h4><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// source: go.opencensus.io/trace/export.go</span></div><div class="line"></div><div class="line"><span class="comment">// SpanData contains all the information collected by a Span.</span></div><div class="line"><span class="keyword">type</span> SpanData <span class="keyword">struct</span> &#123;</div><div class="line">	SpanContext</div><div class="line">	ParentSpanID SpanID</div><div class="line">	SpanKind     <span class="keyword">int</span></div><div class="line">	Name         <span class="keyword">string</span></div><div class="line">	StartTime    time.Time</div><div class="line">	<span class="comment">// The wall clock time of EndTime will be adjusted to always be offset</span></div><div class="line">	<span class="comment">// from StartTime by the duration of the span.</span></div><div class="line">	EndTime time.Time</div><div class="line">	<span class="comment">// The values of Attributes each have type string, bool, or int64.</span></div><div class="line">	Attributes    <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;</div><div class="line">	Annotations   []Annotation</div><div class="line">	MessageEvents []MessageEvent</div><div class="line">	Status</div><div class="line">	Links           []Link</div><div class="line">	HasRemoteParent <span class="keyword">bool</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Others"><a href="#Others" class="headerlink" title="Others"></a>Others</h2><ul>
<li><a href="https://github.com/orgs/census-instrumentation/people" target="_blank" rel="external">OpenCensus People</a></li>
</ul>
<h2 id="扩展阅读：分布式追踪系统"><a href="#扩展阅读：分布式追踪系统" class="headerlink" title="扩展阅读：分布式追踪系统"></a>扩展阅读：分布式追踪系统</h2><ul>
<li><a href="https://riboseyim.github.io/2018/04/27/DevOps-OpenCensus" target="_blank" rel="external">DevOps 漫谈：开源分布式跟踪系统 OpenCensus</a></li>
<li><a href="https://riboseyim.github.io/2018/05/18/DevOps-OpenTracing/" target="_blank" rel="external">DevOps 漫谈：分布式追踪系统标准体系</a></li>
<li><a href="https://riboseyim.github.io/2017/10/30/Protocol-gRPC/" target="_blank" rel="external">远程通信协议：从 CORBA 到 gRPC</a></li>
<li><a href="https://riboseyim.github.io/2017/05/24/Log/" target="_blank" rel="external">应用程序开发中的日志管理(Go语言描述)</a></li>
</ul>
<h2 id="扩展阅读：动态追踪技术"><a href="#扩展阅读：动态追踪技术" class="headerlink" title="扩展阅读：动态追踪技术"></a>扩展阅读：动态追踪技术</h2><ul>
<li><a href="https://riboseyim.github.io/2016/11/26/DTrace/" target="_blank" rel="external">动态追踪技术(一)：DTrace 导论</a></li>
<li><a href="https://mp.weixin.qq.com/s?__biz=MjM5MTY1MjQ3Nw==&amp;mid=2651939588&amp;idx=1&amp;sn=35f71c5f88d1edf23cb2efc812ab8e6c&amp;chksm=bd578c168a20050041c08618281691f0111f61c789097a69095933057618637fc54817815921#rd" target="_blank" rel="external">动态追踪技术(二)：strace+gdb 溯源 Nginx 内存溢出异常 </a></li>
<li><a href="https://riboseyim.github.io/2017/04/17/DTrace_FTrace/" target="_blank" rel="external">动态追踪技术(三)：Tracing Your Kernel Function!</a></li>
<li><a href="https://riboseyim.github.io/2017/06/27/DTrace_bcc/" target="_blank" rel="external">动态追踪技术(四)：基于 Linux bcc/BPF 实现 Go 程序动态追踪</a></li>
<li><a href="https://riboseyim.github.io/2018/02/16/DTrace-Linux/" target="_blank" rel="external">动态追踪技术(五)：Welcome DTrace for Linux</a></li>
</ul>
<h2 id="扩展阅读：开源架构技术漫谈"><a href="#扩展阅读：开源架构技术漫谈" class="headerlink" title="扩展阅读：开源架构技术漫谈"></a>扩展阅读：开源架构技术漫谈</h2><ul>
<li><a href="https://riboseyim.github.io/2017/05/23/RestfulAPI/" target="_blank" rel="external">基于Go语言快速构建一个RESTful API服务</a></li>
<li><a href="https://riboseyim.github.io/2017/06/12/OpenSource-Kafka-Microservice/" target="_blank" rel="external">基于Kafka构建事件溯源型微服务</a></li>
<li><a href="https://riboseyim.github.io/2017/12/04/Visualization-Graphite/" target="_blank" rel="external">数据可视化（七）Graphite 体系结构详解</a></li>
<li><a href="https://riboseyim.github.io/2016/08/15/OpenSource-Kafka/" target="_blank" rel="external">DevOps 资讯 | LinkedIn 开源 Kafka Monitor</a></li>
</ul>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://medium.com/@orijtech/hello-world-for-web-servers-in-go-with-opencensus-29955b3f02c6" target="_blank" rel="external">“Hello, world!” for web servers in Go with OpenCensus</a></li>
<li><a href="https://opensource.googleblog.com/2018/01/opencensus.html" target="_blank" rel="external">OpenCensus: A Stats Collection and Distributed Tracing Framework | Wednesday, January 17, 2018 | Google Open Source Blog</a></li>
<li><a href="https://medium.com/@orijtech/opencensus-for-go-grpc-developers-7f3ee1ac3d6d" target="_blank" rel="external">OpenCensus for Go gRPC developers</a></li>
<li><a href="http://www.infoq.com/cn/news/2017/11/Uber-open-spurce-Jaeger" target="_blank" rel="external">Uber正式开源其分布式跟踪系统Jaeger | 2017年11月9日</a></li>
<li><a href="http://www.infoq.com/cn/articles/evolving-distributed-tracing-at-uber-engineering" target="_blank" rel="external">Uber优步分布式追踪技术再度精进</a></li>
<li><a href="https://blog.doit-intl.com/measure-once-export-anywhere-opencensus-in-the-wild-61724f44eb00" target="_blank" rel="external">Measure Once — Export Anywhere: OpenCensus in the wild</a></li>
<li><a href="https://github.com/census-instrumentation/opencensus-go/blob/master/examples/helloworld/main.go" target="_blank" rel="external">opencensus-go-examples-helloworld-context</a></li>
<li><a href="https://medium.com/@orijtech/mongodb-driver-instrumented-with-opencensus-in-go-e691370b8184" target="_blank" rel="external">MongoDB driver instrumented with OpenCensus in Go</a></li>
<li><a href="https://segmentfault.com/a/1190000006744213#articleHeader8" target="_blank" rel="external">Go语言并发模型：使用 context | oscarzhao 2016年08月29日</a></li>
<li><a href="http://lanlingzi.cn/post/technical/2016/0802_go_context/" target="_blank" rel="external">理解Go Context机制 | 时间： 2016-08-02</a></li>
<li><a href="http://www.flysnow.org/2017/05/12/go-in-action-go-context.html" target="_blank" rel="external">Go语言实战笔记（二十）| Go Context | May 12, 2017</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Distributed Tracing and Monitoring System&lt;/li&gt;
&lt;li&gt;OpenCensus: A framework for distributed tracing&lt;/li&gt;
&lt;li&gt;OpenCensus Principle: data structure 、Context&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="架构师" scheme="http://riboseyim.github.com/tags/%E6%9E%B6%E6%9E%84%E5%B8%88/"/>
    
      <category term="OpenSource" scheme="http://riboseyim.github.com/tags/OpenSource/"/>
    
      <category term="DevOps" scheme="http://riboseyim.github.com/tags/DevOps/"/>
    
      <category term="Linux" scheme="http://riboseyim.github.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>DevOps 漫谈:从作坊到工厂的寓言故事</title>
    <link href="http://riboseyim.github.com/2018/04/10/DevOps-Phoenix/"/>
    <id>http://riboseyim.github.com/2018/04/10/DevOps-Phoenix/</id>
    <published>2018-04-10T07:12:14.000Z</published>
    <updated>2018-04-28T09:52:04.156Z</updated>
    
    <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><ul>
<li>背景：《凤凰项目》的灵魂</li>
<li>管理约束：最大的瓶颈是人</li>
<li>任务追踪：可视化工作区和看板实践</li>
<li>改进日常工作：预防性维护</li>
<li>反常识：系统里要经常出些故障、人力资源使用率与效率成反比</li>
<li>安全与审计</li>
<li>IT 价值流：像电力一样无处不在</li>
</ul>
<blockquote>
<p>转变主要不是基于自动化，相反，这种不可思议的改进来自于调整关于工作系统的策略和控制半成品的策略，确保有一个高效的跨职能团队，让所有事情都为约束点服务，以及管理好工作交接。——《凤凰项目 一个IT运维的传奇故事》</p>
</blockquote>
<a id="more"></a>
<p>谈到 DevOps 概念，有几本书是绕不过去的，《凤凰项目：一个IT运维的传奇故事》（The Phoenix Project:a Novel About IT,DevOps,and Helping Your Business Win）就是其中之一。本书的主要特色之一是将 IT 运营和工厂生产对应起来，借鉴制造业的经验提升 IT 价值。</p>
<h2 id="背景：《凤凰项目》的灵魂"><a href="#背景：《凤凰项目》的灵魂" class="headerlink" title="背景：《凤凰项目》的灵魂"></a>背景：《凤凰项目》的灵魂</h2><p>《凤凰项目》的作者金(Gene Kim);贝尔(Kevin Behr);斯帕福德(George Spafford)，显然是高德拉特的拥趸。在整个故事中都贯穿了高德拉特的思想——约束理论(限制理论，Theory of Constraints，TOC)。</p>
<blockquote>
<p>“不应该根据第一个工作站的效率来安排工作，而是根据瓶颈资源所能完成工作的速度来安排工作。”</p>
</blockquote>
<p>埃利亚胡·高德拉特博士（Eliyahu M. Goldratt，1947－2011），以色列物理学家，同时是一位企业管理领域的大师。1984年，高德拉特博士发表了他的重要著作《目标：一种持续改进的流程》（The Goal: A Process of On going Improvement），书中以小说的形式提出了约束理论。他主张一个复杂的系统隐含着简单化，即使在任何时间，一个复杂的系统可能是由成千上万人和一系列设备所组成，但是只有非常少的变数或许只有一个，称为限制，它会限制（或阻碍）此系统达到更高的目标。在此基础上，他进一步提出了在制造业经营生产活动中定义和消除制约因素的一些规范化方法以支持连续改进（Continuous Improvement），例如约束理论之外还提出了关键链（Critical Chain Project Management，CCPM）项目规划和管理方法（与关键路径分析方法不同，它主要侧重于项目执行中所需的资源，关注资源依赖，强调监测项目的进展和缓冲的使用率，而不是规划个别任务的进展速度）。精益生产或者丰田生产系统在某种程度上也是以约束理论为基础的。</p>
<p>回到《凤凰项目》，它的体裁是按照时间线叙事的日记体：临危受命的主人公一直致力于改善各个约束点（瓶颈）对于整个组织能力的限制。起初是一个无可替代的工程师，接着是应用程序部署流程，安全审计，最后约束点移到了技术部门之外，甚至包括外部供应商。简单来说，小说的脉络遵循实践约束理论的基本步骤：</p>
<ul>
<li>识别约束点；</li>
<li>利用约束点；</li>
<li>让所有其他活动都从属于约束点；</li>
<li>把约束点提升到新的水平；</li>
<li>寻找下一个约束点。</li>
</ul>
<h2 id="管理约束"><a href="#管理约束" class="headerlink" title="管理约束"></a>管理约束</h2><blockquote>
<p>“<strong>在瓶颈之外的任何地方作出的改进都是假象</strong>，在瓶颈之后作出任何改进都是徒劳的，而在瓶颈之前作出的任何改进则只会导致瓶颈处堆积更多的库存。” —— 艾利·高德拉特</p>
</blockquote>
<h4 id="最大的瓶颈是人"><a href="#最大的瓶颈是人" class="headerlink" title="最大的瓶颈是人"></a>最大的瓶颈是人</h4><p>如果希望通过这本书获得一些解决方案和技术细节的人估计要失望了，《凤凰项目》本质上是一本探讨如何提高组织效率的书，或者说主要是讨论人、顺带谈了一些协同方法论。</p>
<p>我相信很多人看完《凤凰项目》之后都会把故事里面里面一堆人物名字搞混，但是有一个角色甚至比较主角还有意思 —— 布伦特。个人能力超强，工作超努力，对各类技术细节了如指掌，所有大小项目大家都喜欢找他合作，有了问题也会第一时间想到他，典型的超级员工、英雄人物。与此同时，布伦特实际上并不像人们认为的那样聪明绝顶。他每天需要处理大量计划外工作，即使布伦特天天加班都完不成堆积如山的任务，最终造成了大量的任务积压，战略工作不断延期，管理层疲于应付各种投诉。我相信大多数发展中组织里面都会有这么一个角色存在。</p>
<p>新上任的主人公（比尔）将布伦特识别为 IT 生产环境中的约束点，并采取了更改工作流转的方式来避免布伦特被计划外工作打扰：</p>
<ul>
<li>与 CEO 达成共识，调整布伦特的工作职责：允许他拒绝除凤凰项目（战略级）以外的任何工作；</li>
<li>设置资源防火墙，任何人需要“征用”他都必须经过其部门领导评估优先级，所有资源请求通过层层过滤才能达到布伦特；</li>
<li>围绕布伦特组建了一个二线梯队，负责学习他的工作经验、编写文档、甚至实现部分自动化，逐步替代布伦特处理任务，将布伦特从各种繁琐的事情中解放出来</li>
</ul>
<blockquote>
<p>可能他是故意让自己显得无可或缺，以免其他人抢了他的工作。… 是不是布伦特把他的知识看作一种权力。也许他身上的某些部分不愿意把那些知识交出来。这也确实让他成为了几乎难以取代的人。——《凤凰项目 一个IT运维的传奇故事》 第 107 页</p>
</blockquote>
<p>值得注意的是，新的决策在开始阶段需要承受了很大的压力。领导人需要对抗的是长期形成的工作惯性，俗话说“病来如山倒、病去如抽丝”，想要改变也不是一朝一夕就可以实现的，更不要说组织内部微妙的人事关系，稍有不慎就可能踩到雷，顺畅的内部沟通、群众看得到的改进效果可以帮助解决一部分问题，但是现实中也有不可避免的碰撞。所以说，流程变更实质是是组织文化重塑的一种形式，领导者的信任与合作必不可少。这方面也是本书比较有趣的地方。</p>
<p>经过一段时间的坚持，布伦特的工作效率大大提升，顺利完成了凤凰项目，并在后来发起的独角兽和独角鲸项目取得了成功。</p>
<h2 id="任务追踪"><a href="#任务追踪" class="headerlink" title="任务追踪"></a>任务追踪</h2><p>凤凰项目故事中，主人公面对的困境是：IT 团队因为大量工作积压而导致各种任务延期。</p>
<blockquote>
<p>这个世界一定是哪里不对劲了，一半邮件都是紧急邮件。所有事情都那么重要，这可能吗？</p>
</blockquote>
<p>经过一番梳理，IT 团队的各类工作内容大致可以分为以下四种类别：</p>
<ul>
<li>第一类：业务项目，由 PMO 跟踪的正式项目；</li>
<li>第二类：IT 内部项目，由业务项目衍生的基础架构项目，或者改进项目；（* 生产能力投放度量）</li>
<li>第三类：变更（* 跨团队交接和重复跟踪）</li>
<li>第四类：计划外工作（救火工作）</li>
</ul>
<p>计划外工作可不是免费的，恰恰相反，它非常昂贵。在故事的第一部分，计划外工作是最主要的困扰，它们包括突发严重故障、业务安全漏洞引发的舆论风波、部分领导人基于个人意愿追加的临时项目等等。如果要推动战略项目的进度，<strong>必须根除计划外工作的最大源头！</strong></p>
<blockquote>
<p>计划外工作会让你丧失开展计划内工作的能力，因此必须不惜一切代价去消灭计划外工作，墨菲法则确实存在，因此总会有计划外工作，但你必须高效地处理它们。</p>
<p>第一优先级是谁喊得最响，决定因素是谁能搬出最大的领导来。我见过很多员工总是优先为某个经理服务，因为他每月带他们出去吃一次午餐。</p>
</blockquote>
<p>为了改变这一局面，主人公采用了一种“可视化工作区+任务追踪系统”的方式管理变更。</p>
<h2 id="任务可视化"><a href="#任务可视化" class="headerlink" title="任务可视化"></a>任务可视化</h2><p>可视化的目的是为了做到充分的交流，就像风吹过树林，不分彼此的摇动每一片树叶。</p>
<h4 id="可视化工作区"><a href="#可视化工作区" class="headerlink" title="可视化工作区"></a>可视化工作区</h4><p>运营中心（NOC）：一个巨大的开放式办公区域，靠一面墙放着一排长桌，巨大的显示器上显示着所有IT服务的各种状态。1级和2级客服人员占据了工作站的三排位置。“这并不是阿波罗13号的太空飞行指挥中心，但我就是这样向亲戚们解释我的工作环境的。”</p>
<p>在 NOC 运作的具体支撑手段上，高度重视看板墙（Kanban）的作用。</p>
<p>看板(Kanban)是一种生产管理系统，起源于1940年代的丰田汽车公司。看板的核心理论是基于制造业中经常提到的概念：库存。与传统会计观念不同，丰田认为库存会带来成本以及浪费，而不是增加或储存价值，应鼓励逐步消除库存，以便削减生产流程中的成本，在管理中逐渐适应“零库存”的状态。1961 年 MIT（Sloan School of Management）教授 John Little 正式提出了利特尔法则（ Little’s Law ）：在一个稳定的系统 L中，长期的平均顾客人数，等于长期的有效抵达率，系统中的平均存货等于存货单位离开系统的比率（亦即平均需求率）与存货单位在系统中平均时间的乘积。</p>
<p><strong>Cycle Time = Work in Progress / Throughput</strong></p>
<p>根据利特尔法则，跟踪工作及进展的最重要的目标是：限制在制品（Work in process，WIP），例如尚未完成制造过程的商品，或是停留在库存仓库或是产线上，等待着进一步处理的商品。在 IT 语境中，半成品一般意味着积压的开发任务、等待启动的“重要不紧急”工作、“开发完成”但是未上线发布的新功能、等待执行的线上变更等等。</p>
<blockquote>
<p>看板上的索引卡片是做成这件事最好的机制之一，因为每个人都能看到半成品。—— 《凤凰项目 一个IT运维的传奇故事》第 151 页</p>
</blockquote>
<p>本书中关于看板（Kanban）实践的启示可以概括为以下几点：</p>
<ul>
<li>目标导向：相对于强化审批流程，更重要的是通过任务卡片的梳理识别半成品积压在哪个环节，通过建立一条反馈环路能够一直往回通向产品定义、设计及开发的最初环节。</li>
<li>简洁性：例如一张变更索引卡片只要求填写必需的三条信息：变更计划的制定者、将要实施变更的系统以及一条一句话的概述，避免设置过多的必填字段和无效选项。繁琐而缺乏人性考量的工具难以发挥作用，最终将变成 “大家为了完成自己的工作，一直在胡乱对付这套系统”，再也没有比阻止人们去做他们理应做的事更能毁掉大家的热情和支持了。</li>
<li>灵活性：针对需要特别关注的问题可以采取灵活方式，不拘泥于死板格式。例如在第一部分首席工程师（布伦特）是一个阶段性瓶颈，各部门在提交卡片的时候就将“是否需要布伦特支援”作为必填信息，或者使用单独一种颜色的卡片。</li>
</ul>
<p><strong>控制半成品的能力不足，是造成长期性延误和质量问题的根源之一。</strong> <strong>“完成”的真正定义</strong> 并非开发部完成了编码，而是只有在代码经过充分测试并按设计在生产中运行时，代码才算“完成”。</p>
<p>关于变更管理，还有一些具体的实践方法值得借鉴：</p>
<ul>
<li>分级授权：可以把一部分变更审核委派给代理人</li>
<li>脆弱变更：列出了十大最脆弱的服务、应用程序和基础架构列表，可能会影响到其中任何一个的变更申请都将立刻标上记号，由 CAB 详细审查</li>
<li>标准变更（ITIL 名称）：对于之前已多次成功实施的变更，我们只需要提前批准就行。它们仍然需要提交，但可以不经过我们批准就安排操作日程。”</li>
<li>外部影响变更：对于‘复杂的中等变更’ 变更提交者有责任向可能受到影响的人员进行咨询并得到其认可，做完这些之后才可以将变更卡片送入审核流程。</li>
<li>禁止条款（透明化）：禁止未经授权的变更，禁止在服务中断期间出现未经公开的变更。</li>
</ul>
<h2 id="改进日常工作"><a href="#改进日常工作" class="headerlink" title="改进日常工作"></a>改进日常工作</h2><blockquote>
<p>改进日常工作比开展日常工作更重要。</p>
</blockquote>
<h4 id="预防性维护"><a href="#预防性维护" class="headerlink" title="预防性维护"></a>预防性维护</h4><blockquote>
<p>技术债务。它来自于走捷径，那在短时间内也许行得通。但是就像金融债务一样，久而久之，利息成本会越滚越高。如果一个部门没有付清它的技术债务，公司的每一份努力都将以计划外工作的形式来偿还那些技术债务的利息。p186</p>
</blockquote>
<p>如果你是一家跨国货运公司，你们用一百辆卡车组成的车队运送包裹，你们的一项公司目标就会是客户满意度和按时交货。一个影响按时交货的因素是车辆故障。车辆故障的一个关键起因是没有更换机油。那么，为了降低这个风险，你就要为车辆运营建立一个服务等级协议（SLA），每行驶五千英里就要更换一次机油。如果说按时交货是关键绩效指标（KPI），那么为了达到这个指标可以建立一个新的前瞻性KPI，比如说，已经按要求更换机油的车辆百分比。</p>
<p>对于 IT 组织来说，这一原则同样适用。</p>
<h2 id="两个反常识的概念"><a href="#两个反常识的概念" class="headerlink" title="两个反常识的概念"></a>两个反常识的概念</h2><h4 id="系统里要经常出些故障"><a href="#系统里要经常出些故障" class="headerlink" title="系统里要经常出些故障"></a>系统里要经常出些故障</h4><p>作者在书中提到一个观点：“系统里要经常出些故障，长此以往，再遇到困难就没有原来那么痛苦了。p216”  </p>
<p>1960 年代，工业制造领域提出了弹性制造系统（Flexible Manufacturing System，FMS）的概念。FMS 的理想是制造系统能够富有弹性（能够因应预期或不可预期的变更），又兼有自动化设备规模生产的特性，以满足顾客对于产品要求多样化的趋势。制造系统的弹性通常被分为两类：</p>
<ul>
<li>“机器弹性”：涵盖了系统制造新产品的应变能力和零件工序改变的应变能力；</li>
<li>“用途弹性”：同一组件可以使用不同机器设备而运行相同的工序之。</li>
</ul>
<p>于 IT 生产而言，就有了弹性系统，即面对各种不确定场景时（如基础存储设施故障，恶意攻击，依赖服务故障，网络超时、中断等等）都能够存活并且具备一定的自愈能力的系统。弹性系统的出发点是承认在规模化服务的场景下，故障是常态的、不可预测的，既然不可避免，就需要在系统的生命周期去主动管理它，可以主动地给系统不断施加一些压力，从而不断强化习惯并加以改进。</p>
<p><strong>Do not try to avoid failures !  Embrace them !</strong></p>
<p>具体策略方面，可以将改进周期设定为小段时间，例如每次为期两周，每期都实施一个小型的改进项目，例如周期性的服务中断演练。每次日常改进都需要覆盖“设计—检测—恢复—预防”的各个环节，只有不断重复才能建立信任感和透明度，对需要团队合作的事情来说尤其如此。</p>
<blockquote>
<p>建立起部落文化般的工作共识，这帮助我们比以往任何时候都能够更快地排除故障，而且，一旦真的需要把工作升级，也是可控而有序的。p263</p>
</blockquote>
<h4 id="人力资源使用率与效率成反比"><a href="#人力资源使用率与效率成反比" class="headerlink" title="人力资源使用率与效率成反比"></a>人力资源使用率与效率成反比</h4><p>每个人都需要空闲时间，或者说松弛时间。如果大家都没有松弛时间，半成品就会卡在系统里。或者更确切地说，卡在队列里，只是干等着。</p>
<p><img src="http://ombx24fbq.bkt.clouddn.com/DevOps-%E8%B5%84%E6%BA%90%E5%BF%99%E7%A2%8C%E7%99%BE%E5%88%86%E6%AF%94.png" alt="资源忙碌百分比"></p>
<p>图表说明：横坐标轴上是给定资源的忙碌百分比，纵坐标轴上是大致的等待时间（更确切地说是队列长度）。曲线的形状表明，当资源使用率超过80%时，等待时间就会直线上升。</p>
<p><strong>等待时间取决于资源使用率</strong>。如果一个资源的忙碌时间是50%，那么它的空闲时间也是 50%。等待时间就是50%除以50%，也就是一个时间单位（可以简化理解为 1 个小时）。另一方面，如果一个资源 90% 的时间是忙碌的，等待时间=90% /10%，也就是说至少 9 个小时。换言之，任务排队等待的时间，将是资源有 50% 空闲时的 9 倍。</p>
<p>例如，小说中的技术大拿（布伦特），30分钟的简单变更需要耗费几个星期才能完成。原因很简单，作为所有工作的瓶颈，布伦特的使用率一直是100%甚至超过100%，因此，每次交给他的工作都只能在队列里枯等，如果不进行加速或升级处置，就永远不会完成。</p>
<p>再进一步，如果简单任务实际需要 5 个以上交接步骤（分析、设计、程序、测试、发布、线上变更等），情况又会如何呢？假设所有工作中心都有 90% 的时间是忙碌的，由图上可知，在每一个工作中心的平均等待时间是 9 个小时。总共等待时间就是 5倍：45 个小时。高资源使用率带来的破坏性结果恐怕也就无需多言了。</p>
<p>因此，削减非必要人工环节、管理交接工作是提高资源周转率的关键。</p>
<h2 id="安全与审计"><a href="#安全与审计" class="headerlink" title="安全与审计"></a>安全与审计</h2><blockquote>
<p>信息安全部总是到处亮出他们的“尚方宝剑”，提出各种紧急要求，全然不顾这样做对其他部门造成的后果，因此我们有很多会议都不邀请他们参加。只要有他们在，事情肯定办不成。p35</p>
<p>一些最英明的审计师说，只有三种内部控制目标：确保财务报告的可靠性，符合法律法规，以及运营的效率和效果。就是这样。你和约翰所谈论的正是所谓‘COSO立方’（内部控制整合框架）的不同面。” p241</p>
</blockquote>
<p>本书故事中着重探讨了信息安全与审计工作，例如技术部门与内部审计部门的矛盾冲突、将安全审计置于开发构建过程之中等挺有意思的。这块比较复杂，以后再补充。</p>
<h2 id="IT-价值流：像电力一样无处不在"><a href="#IT-价值流：像电力一样无处不在" class="headerlink" title="IT 价值流：像电力一样无处不在"></a>IT 价值流：像电力一样无处不在</h2><blockquote>
<p>IT 不只是一个部门。相反，它就像电力一样无处不在。IT 是一种技能，就像能读会算一样。在无极限零部件公司，我们没有一个集中的阅读或计算部门——我们希望每一个雇员都多少掌握这些技能。理解技术能够做什么、不能做什么，已经成为这家公司里每个部门必须具备的一种核心竞争力。要是业务经理领导了一个不具备这种技能的团队或项目，他们就会失败。——《凤凰项目 一个IT运维的传奇故事》第 316 页</p>
</blockquote>
<h2 id="扩展阅读：DevOps-漫谈系列"><a href="#扩展阅读：DevOps-漫谈系列" class="headerlink" title="扩展阅读：DevOps 漫谈系列"></a>扩展阅读：<a href="https://riboseyim.github.io/2016/07/28/DevOps/" target="_blank" rel="external">DevOps 漫谈系列</a></h2><ul>
<li><a href="https://riboseyim.github.io/2018/04/10/DevOps-Phoenix/" target="_blank" rel="external">《凤凰项目》：从作坊到工厂的寓言故事</a></li>
<li><a href="https://riboseyim.github.io/2017/08/06/TeamWork-Kanban/" target="_blank" rel="external">Kanban 看板管理实践</a></li>
<li><a href="https://riboseyim.github.io/2018/03/26/DevOps-Deployment/" target="_blank" rel="external">DevOps 漫谈：基础设施部署和配置管理</a></li>
<li><a href="https://riboseyim.github.io/2017/11/12/DevOps-Container-Security/" target="_blank" rel="external">Linux 容器安全的十重境界</a></li>
<li><a href="https://riboseyim.github.io/2017/06/27/Technology-English/" target="_blank" rel="external">工程师的自我修养：全英文技术学习实践</a></li>
</ul>
<h4 id="DevOps-实践的本质是文化"><a href="#DevOps-实践的本质是文化" class="headerlink" title="DevOps 实践的本质是文化"></a><a href="https://riboseyim.github.io/2018/03/29/DevOps-Culture/" target="_blank" rel="external">DevOps 实践的本质是文化</a></h4><ul>
<li>学习力－团队生命之根</li>
<li>带领团队翻译书籍</li>
<li>Don’t make me think</li>
<li>凡是被很多人不断重复的好习惯，要将其自动化整合到工具</li>
</ul>
<h2 id="扩展阅读：凤凰项目作者推荐书单"><a href="#扩展阅读：凤凰项目作者推荐书单" class="headerlink" title="扩展阅读：凤凰项目作者推荐书单"></a>扩展阅读：凤凰项目作者推荐书单</h2><ul>
<li>《The DevOps Cookbook》(开发运维指导书)</li>
<li><a href="https://book.douban.com/subject/6862062/" target="_blank" rel="external">《持续交付：发布可靠软件的系统方法》</a></li>
</ul>
<h4 id="《目标：一种持续改进的流程》"><a href="#《目标：一种持续改进的流程》" class="headerlink" title="《目标：一种持续改进的流程》"></a>《目标：一种持续改进的流程》</h4><p>1984年，埃利亚胡·高德拉特博士撰写了他的重要著作《目标：一种持续改进的流程》（The Goal: A Process of On going Improvement）。这是一本苏格拉底式的小说，主人公是一位名叫亚历克斯·罗戈的工厂经理，他必须在90天内解决成本和按时交货的问题，否则他的工厂就要被关停。</p>
<p>高德拉特博士在他的后一本书 <strong>《绝不是靠运气》（It’s Not Luck）</strong> 中，阐述了他称之为“思维过程”的内容。那是一套了不起的方法论（但是多少有些难以做到，且往往见效缓慢），主要是教公司如何识别长期的核心冲突、了解现状、描述理想的未来状况，以及多种提高成功可能性的策划技巧。</p>
<ul>
<li>华盛顿州立大学网站“EM526 约束管理”（课程），<a href="http://public.wsu.edu/~engrmgmt/holt/em530/index.htm" target="_blank" rel="external">http://public.wsu.edu/~engrmgmt/holt/em530/index.htm</a></li>
<li>学习“思维过程”的教科书《逻辑化思维过程》，作者H.威廉·德特曼博士。</li>
</ul>
<h4 id="《丰田管理：为了获得改进、适应性和优异业绩而管理员工》"><a href="#《丰田管理：为了获得改进、适应性和优异业绩而管理员工》" class="headerlink" title="《丰田管理：为了获得改进、适应性和优异业绩而管理员工》"></a>《丰田管理：为了获得改进、适应性和优异业绩而管理员工》</h4><ul>
<li>Toyota Kata : Managing People for Improvement , Adaptive nessand SuperiorResults</li>
</ul>
<h4 id="《团队领导的五大障碍：关于领导力的寓言》"><a href="#《团队领导的五大障碍：关于领导力的寓言》" class="headerlink" title="《团队领导的五大障碍：关于领导力的寓言》"></a>《团队领导的五大障碍：关于领导力的寓言》</h4><ul>
<li>The Five Dysfunction sofa Team : A Leader ship Fable</li>
<li>作者：帕特里克·兰西奥尼</li>
</ul>
<p>团队达成目标的一个核心诱因是信任缺失。在他的模型中，五大障碍被描述为：</p>
<ul>
<li>信任缺失——不愿在团队中显示弱点；</li>
<li>惧怕冲突——在充满激情的建设性辩论中寻求和谐的假象；</li>
<li>缺乏诚意——假意与团队的决策达成一致，形成模棱两可的公司氛围；</li>
<li>回避问责——面对员工的失职行为，逃避追责，降低了工作标准；</li>
<li>忽视结果——对个人成就、地位和自我价值的关注超过了对团队成功的关注。</li>
</ul>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://book.douban.com/subject/26644070/" target="_blank" rel="external">豆瓣|《凤凰项目|The Phoenix Project》</a></li>
<li><a href="http://ijyun.github.io/2016/04/23/phoenix-project.html" target="_blank" rel="external">《凤凰项目》内容梳理|龙井的博客</a></li>
<li><a href="https://researchcenter.paloaltonetworks.com/2016/10/phoenix-project-novel-devops-helping-business-win/" target="_blank" rel="external">The Cybersecurity Canon: The Phoenix Project: A Novel About IT, DevOps, and Helping Your Business Win</a></li>
<li><a href="http://news.sciencenet.cn/htmlnews/2011/6/248411.shtm" target="_blank" rel="external">以色列物理学家、约束理论创始人埃利亚胡·戈德拉特逝世 | 2011 年</a></li>
<li><a href="http://www.itdks.com/dakalive/detail/796" target="_blank" rel="external">弹性工程-构建弹性系统|曾绿麟|美团</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;背景：《凤凰项目》的灵魂&lt;/li&gt;
&lt;li&gt;管理约束：最大的瓶颈是人&lt;/li&gt;
&lt;li&gt;任务追踪：可视化工作区和看板实践&lt;/li&gt;
&lt;li&gt;改进日常工作：预防性维护&lt;/li&gt;
&lt;li&gt;反常识：系统里要经常出些故障、人力资源使用率与效率成反比&lt;/li&gt;
&lt;li&gt;安全与审计&lt;/li&gt;
&lt;li&gt;IT 价值流：像电力一样无处不在&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;转变主要不是基于自动化，相反，这种不可思议的改进来自于调整关于工作系统的策略和控制半成品的策略，确保有一个高效的跨职能团队，让所有事情都为约束点服务，以及管理好工作交接。——《凤凰项目 一个IT运维的传奇故事》&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="最佳工程实践" scheme="http://riboseyim.github.com/tags/%E6%9C%80%E4%BD%B3%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5/"/>
    
      <category term="DevOps" scheme="http://riboseyim.github.com/tags/DevOps/"/>
    
      <category term="Manager" scheme="http://riboseyim.github.com/tags/Manager/"/>
    
  </entry>
  
  <entry>
    <title>古典音乐低俗史</title>
    <link href="http://riboseyim.github.com/2018/04/10/Artistic-Classical/"/>
    <id>http://riboseyim.github.com/2018/04/10/Artistic-Classical/</id>
    <published>2018-04-10T06:09:52.000Z</published>
    <updated>2018-05-15T05:54:49.523Z</updated>
    
    <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><ul>
<li>古典音乐低俗史</li>
<li>古典音乐经典名曲</li>
</ul>
<a id="more"></a>
<h2 id="古典音乐低俗史"><a href="#古典音乐低俗史" class="headerlink" title="古典音乐低俗史"></a>古典音乐低俗史</h2><p><img src="http://ot6idm48o.bkt.clouddn.com/IMG_4743.png" alt=""></p>
<blockquote>
<p>“没有音乐，生活将是一种错误。” —— 尼采</p>
</blockquote>
<p>今年的3月25日，是法国现代最伟大的音乐家、被称为“现代音乐之父”的阿希尔-克洛德·德彪西（Achille-Claude Debussy，1862－1918）逝世100周年。德彪西在生前已享誉厚载，是法兰西学院院士，是鲜有的头像被印在法郎纸币上的法国音乐家之一。</p>
<p>德彪西的作品在传统法国音乐风格中，结合了东方音乐、西班牙舞曲和爵士乐的特点，创造出了其别具一格的和声。德彪西被总括为印象派音乐的代表，虽然他本人并不同意，甚至设法远离这一称谓。德彪西的一生经历的女性数不胜数，其中至少两次发生自杀事件：</p>
<ul>
<li>玛丽·布兰奇·瓦斯尼尔：年长德彪西十一岁的人妻；</li>
<li>加布里埃尔·杜邦（加比，Gaby）：与德彪西同甘共苦以支持家用，但是被德彪西无情抛弃，引发了自杀风波；</li>
<li>特蕾丝·罗杰：32岁的女歌手，突然宣布结婚但是在婚礼和婚房都准备完毕时发现了加比的存在，单方面宣布解除婚约；</li>
<li>莉莉（Lily）: 女性服装店模特，比德彪西小十一岁；她生病时德彪西与爱玛私奔，企图用手枪自杀（未遂）；</li>
<li>爱玛（Emma)：德彪西的钢琴学生的母亲，富裕的银行家的妻子，与德彪西同龄；在世人眼中，他们的关系只是为了金钱。</li>
</ul>
<p>《春之祭》（Le Sacre du Printemps）是俄罗斯作曲家伊戈尔·斯特拉文斯基的代表作与成名作。全曲粗犷而又有浓郁的俄罗斯风格，是二十世纪古典音乐创作的典范。斯特拉文斯基幻想出一个俄罗斯远古时期的祭祖仪式景象：“我想像到一个肃穆的异教祭典：一群长老围成一圈坐着，看见一位少女被要求跳舞直至跳死。她是他们用以祭祀春天之神的祭品。”</p>
<p><img src="http://ot6idm48o.bkt.clouddn.com/IMG_4746.png" alt=""></p>
<p>音乐史上，《春之祭》的首演便是一场著名的骚乱。</p>
<p>1913 年巴黎香榭丽舍剧院举行首演时，狂乱的节奏及旋律，颠覆传统芭蕾的舞步，都让观众陷入疯狂，支持者和反对者在席间互相叫嚣，甚至大打出手：从管弦乐团的序奏开始，观众席上不满的声音便此起彼伏、骂声不断，强烈的抗议声和对抗议声的抗议声竞相交错，嘘声、口哨、踏步声、拍手声不绝于耳。</p>
<p><img src="http://ot6idm48o.bkt.clouddn.com/IMG_4747.png" alt=""></p>
<p>巴洛克时代，最优秀的乐团一般由教会与贵族赞助。贵族在乡村建立城堡或宫殿，并雇用一支常驻乐队来凸显自身品味，甚至还有宫廷御用的乐队作曲家写作大量新乐曲，歌剧也日益流行。1781年，莱比锡布商大厦管弦乐团成立，标志着市民管弦乐团的开始，1842年，著名的纽约爱乐乐团和维也纳爱乐乐团陆续成立。19世纪这种属于中产市民(在贵族或教会眼中，他们大概也是粗俗、缺乏教养的同义词）的乐队形式随着城市中产阶级崛起而发展迅速。</p>
<p>然而，观众席中有一个人（可可·香奈儿）注意到了这位被观众的喧哗沉重打击的音乐天才，电影<a href="https://movie.douban.com/subject/3172300/" target="_blank" rel="external">《香奈儿秘密情史》</a> 中完美重现了这一场景。</p>
<p><img src="http://ot6idm48o.bkt.clouddn.com/IMG_4748.png" alt=""></p>
<blockquote>
<p>“音乐表现越是本质、单纯，效果也就越直接、强烈。”  —— 奥尔夫</p>
</blockquote>
<p>《布兰诗歌》源自德国巴伐利亚的布兰修道院（Burana，始建于公元 740 年）中发现的一本 13 世纪手稿 —— 由神职人员、落魄文人和流浪学生们用拉丁文和中世纪德语记录的诗歌集，20 世纪由作曲家卡尔·奥尔夫编写成曲。</p>
<p>这首曲中所唱的题材无外乎三个：春、酒还有求爱。比如第 14 曲 “我在酒吧的时候”，歌词极其简单粗暴：</p>
<blockquote>
<p>太太喝，先生喝；<br>大兵喝，牧师喝；<br>男人喝，女人喝；<br>白人喝，黑人喝；<br>成家立业的喝，漂泊无依的喝；<br>蠢东西喝，聪明人喝，穷鬼同病夫喝……</p>
</blockquote>
<p>可以说，这是一首相当享乐的音乐。有关《求爱》的歌词也是类似的内容，马力全开。放荡不羁的精神,对放浪形骸的生活方式的赞美以及对封建社会的无情嘲讽都令人惊讶。毫无疑问，这些被称作”中世纪的拉丁抒情诗”的作品出现在以基督教文化为中心的时代，不能不说是一个奇迹。</p>
<p>如果考虑到此曲创作于 1937 年的纳粹德国，这样欲望全开的歌词或许就是真实的表现。（注：  1937年7月19日，“堕落艺术展”在慕尼黑举行。这个展览是纳粹对现代艺术发起的最猛烈的攻击。展览将超过650件著名的绘画、雕塑和版画集中展出，向观众将其污蔑为“堕落”的，是应当被净化的“渣滓”。）</p>
<blockquote>
<p>德国人有着一种好沉思深省的内向之感，喜幻想，多情善感；毫无疑问，正是这种性格使他们特别喜爱一种排除一切外在的兴趣而本身具备自我发展的基本要素的音乐。—— 《西方音乐史》【法】保·朗多尔米</p>
</blockquote>
<h2 id="古典音乐经典名曲"><a href="#古典音乐经典名曲" class="headerlink" title="古典音乐经典名曲"></a>古典音乐经典名曲</h2><h4 id="奥尔夫（Orff）《Carmina-Burana-布兰诗歌》"><a href="#奥尔夫（Orff）《Carmina-Burana-布兰诗歌》" class="headerlink" title="奥尔夫（Orff）《Carmina Burana|布兰诗歌》"></a>奥尔夫（Orff）《Carmina Burana|布兰诗歌》</h4><p>拥有强力而单纯的节奏和明快的旋律，乐曲、歌词潇洒。</p>
<h4 id="肖邦（Chopin）《Trois-Valses-Op-64-No-1-小狗圆舞曲》-1846-1847"><a href="#肖邦（Chopin）《Trois-Valses-Op-64-No-1-小狗圆舞曲》-1846-1847" class="headerlink" title="肖邦（Chopin）《Trois Valses Op.64 No.1 | 小狗圆舞曲》 1846-1847"></a>肖邦（Chopin）《Trois Valses Op.64 No.1 | 小狗圆舞曲》 1846-1847</h4><ul>
<li>法语：Trois Valses，在英语中也被称为 “Minute Waltz”</li>
</ul>
<p>肖邦是钢琴诗人，在世人眼前浮现出来的是纤细而病弱的王子形象，较受女性欢迎。</p>
<p>通常的说法，肖邦是看到他的情人作家乔治·桑（George Sand）所养的一只小狗追着自己尾巴团团转的场景创作《小狗圆舞曲》，肖邦将作品献给了德费努·波特卡（Delfina Potocka）伯爵夫人。</p>
<h4 id="肖邦（Chopin）《Fantasie-Impromptu-in-C-Sharp-Minor-Op-66-幻想即兴曲》"><a href="#肖邦（Chopin）《Fantasie-Impromptu-in-C-Sharp-Minor-Op-66-幻想即兴曲》" class="headerlink" title="肖邦（Chopin）《Fantasie Impromptu in C Sharp Minor Op.66 | 幻想即兴曲》"></a>肖邦（Chopin）《Fantasie Impromptu in C Sharp Minor Op.66 | 幻想即兴曲》</h4><p>《幻想即兴曲》原本是不会面世的一首作品，曲名是后人命名，肖邦留下遗言：“在我死后请烧掉曲谱。”<br>开头的旋律美妙动人，飘荡着肖邦曲目特有的浪漫情怀。虽然甜美而热情，但也微微感到心痛。这所曲子背后肯定有一个心酸的故事，难怪肖邦本人不喜欢呵。</p>
<h4 id="舒曼（Schumann）《Violin-Concerto-In-D-Minor-D小调小提琴协奏曲》"><a href="#舒曼（Schumann）《Violin-Concerto-In-D-Minor-D小调小提琴协奏曲》" class="headerlink" title="舒曼（Schumann）《Violin Concerto In D Minor | D小调小提琴协奏曲》"></a>舒曼（Schumann）《Violin Concerto In D Minor | D小调小提琴协奏曲》</h4><p>舒曼是一位苦恼的艺术家形象。晚年精神失常，跳过莱茵河（又被人捞上来）、在精神病疗养院度过晚年。作品中充满了舒曼独特而浓厚的浪漫情结，第二乐章的旋律高贵而优雅。<br>舒曼创作此曲用了2周时间，直到首次公演却过了 80 年。如果不是 1937 年，在柏林图书馆中约阿希姆的藏书中发现了乐谱，恐怕将永远被埋没。</p>
<h4 id="舒伯特（Franz-Schubert）《Schubert-Symphony-No-8-in-b-minor-D-759-未完成》"><a href="#舒伯特（Franz-Schubert）《Schubert-Symphony-No-8-in-b-minor-D-759-未完成》" class="headerlink" title="舒伯特（Franz Schubert）《Schubert Symphony No.8 in b minor D.759 | 未完成》"></a>舒伯特（Franz Schubert）《Schubert Symphony No.8 in b minor D.759 | 未完成》</h4><p>《未完成》真的是一部“未完成”的作品，在磁带时期的经典组合：A 面是贝多芬的《命运》，B 面则是《未完成》。</p>
<h4 id="柴可夫斯基（Tchaikovsky）《The-Nutcracker-胡桃夹子》"><a href="#柴可夫斯基（Tchaikovsky）《The-Nutcracker-胡桃夹子》" class="headerlink" title="柴可夫斯基（Tchaikovsky）《The Nutcracker | 胡桃夹子》"></a>柴可夫斯基（Tchaikovsky）《The Nutcracker | 胡桃夹子》</h4><blockquote>
<p>芭蕾是沉默的。相对于管弦乐团的“谈谈阔论”，登场人物却不发一言。相对的，舞者们犹如否定中立的存在一般轻快地舞蹈。—— 【日】饭尾洋一 《古典音乐说明书》 p101</p>
</blockquote>
<h4 id="斯特拉文斯基（Stravinsky）《The-Rite-of-Spring-春之祭》（芭蕾音乐，1913）"><a href="#斯特拉文斯基（Stravinsky）《The-Rite-of-Spring-春之祭》（芭蕾音乐，1913）" class="headerlink" title="斯特拉文斯基（Stravinsky）《The Rite of Spring | 春之祭》（芭蕾音乐，1913）"></a>斯特拉文斯基（Stravinsky）《The Rite of Spring | 春之祭》（芭蕾音乐，1913）</h4><p>本来是一部芭蕾舞剧，但后来脚本遗失，只剩下管弦乐总谱。</p>
<h4 id="拉威尔（Joseph-Maurice-Ravel）《Concerto-pour-la-main-gauche-D大调左手钢琴协奏曲》"><a href="#拉威尔（Joseph-Maurice-Ravel）《Concerto-pour-la-main-gauche-D大调左手钢琴协奏曲》" class="headerlink" title="拉威尔（Joseph-Maurice Ravel）《Concerto pour la main gauche | D大调左手钢琴协奏曲》"></a>拉威尔（Joseph-Maurice Ravel）《Concerto pour la main gauche | D大调左手钢琴协奏曲》</h4><p>约瑟夫-莫里斯·拉威尔（法语：Joseph-Maurice Ravel，1875年3月7日－1937年12月28日），法国作曲家和钢琴家。生于法国南部靠近西班牙的山区小城西布勒，1937年在巴黎逝世时，已经是法国乐坛中与克劳德·德彪西齐名的印象乐派作曲家。</p>
<p>与“两手”的协奏曲相比，“左手”的音乐构想更加严谨而独到。既有苦恼，又有诗歌般的情绪及幽默。<br>值得一提的是，拉威尔本人在谱曲完成后立刻进行了试演出，但未能仅使用左手弹奏，而是用了双手。</p>
<h4 id="拉威尔（Joseph-Maurice-Ravel）《Bolero-波莱罗舞曲》"><a href="#拉威尔（Joseph-Maurice-Ravel）《Bolero-波莱罗舞曲》" class="headerlink" title="拉威尔（Joseph-Maurice Ravel）《Boléro | 波莱罗舞曲》"></a>拉威尔（Joseph-Maurice Ravel）《Boléro | 波莱罗舞曲》</h4><ul>
<li>法语名称：Boléro，<br>1928 年拉威尔创作《波莱罗舞曲》的时候已经 53 岁。波莱罗舞曲原本指西班牙舞曲中的一种。使用小军鼓作为开篇，这个节奏重复了 169 次，持续 15 分钟有余。</li>
</ul>
<p>情节：在西班牙的一个小酒店里，一个少女在翩翩起舞。开始时她只是缓缓跳动，舞姿优美而轻盈。随着音乐的逐渐热烈，舞蹈也越来越欢快奔放，迷住了在场的人们。他们开始随着音乐打着节拍助兴，并情不自禁地与少女一起欢舞，最后在狂欢的气氛中结束。</p>
<h4 id="伦纳德·伯恩斯坦（Leonard-Bernstei）《Candide-Overture-老实人·序曲》"><a href="#伦纳德·伯恩斯坦（Leonard-Bernstei）《Candide-Overture-老实人·序曲》" class="headerlink" title="伦纳德·伯恩斯坦（Leonard Bernstei）《Candide Overture| 老实人·序曲》"></a>伦纳德·伯恩斯坦（Leonard Bernstei）《Candide Overture| 老实人·序曲》</h4><p>原本是作为音乐剧的开幕音乐创作。开场号角齐鸣，充满了沸腾般的跃动感，整曲精力充沛、一气呵成。</p>
<h4 id="约翰·施特劳斯二世-Johann-Baptist-Strauss-《An-der-schonen-blauen-Donau-op-314-蓝色多瑙河》"><a href="#约翰·施特劳斯二世-Johann-Baptist-Strauss-《An-der-schonen-blauen-Donau-op-314-蓝色多瑙河》" class="headerlink" title="约翰·施特劳斯二世(Johann Baptist Strauss) 《An der schönen blauen Donau op.314 | 蓝色多瑙河》"></a>约翰·施特劳斯二世(Johann Baptist Strauss) 《An der schönen blauen Donau op.314 | 蓝色多瑙河》</h4><ul>
<li>德语：An der schönen blauen Donau Op.314<br>实际上多瑙河既不清、也不美，不怎么蓝，浑浊中混杂着绿色，一如普奥战争惨败后帝国首都维也纳市民哀叹的心境。<br>据说有了此曲之后，多瑙河两岸的人们才蓦然发现，原来多瑙河是“蓝色的”。Amazing !</li>
</ul>
<h4 id="贝多芬（Ludwig-van-Beethoven）《The-Symphony-No-9-in-D-minor-Op-125-第九交响曲》"><a href="#贝多芬（Ludwig-van-Beethoven）《The-Symphony-No-9-in-D-minor-Op-125-第九交响曲》" class="headerlink" title="贝多芬（Ludwig van Beethoven）《The Symphony No.9 in D minor, Op.125 | 第九交响曲》"></a>贝多芬（Ludwig van Beethoven）《The Symphony No.9 in D minor, Op.125 | 第九交响曲》</h4><p>《第九交响曲》不仅仅需要管弦乐团进行演奏，还需要合唱和独唱，是超过 1 个小时的巨作。该曲在世界文化界有相当重要的地位，尤其该曲第四乐章部分乐段经指挥家赫伯特·冯·卡拉扬整理后，以《欢乐颂》（Ode to Joy）之名成为欧洲联盟的官方盟歌。</p>
<p><img src="http://ot6idm48o.bkt.clouddn.com/IMG_4742.png" alt=""></p>
<h4 id="埃尔加（Edward-William-Elgar）《Pomp-and-Circumstance-Marches-Op-39-威风堂堂进行曲》"><a href="#埃尔加（Edward-William-Elgar）《Pomp-and-Circumstance-Marches-Op-39-威风堂堂进行曲》" class="headerlink" title="埃尔加（Edward William Elgar）《Pomp and Circumstance Marches Op.39 | 威风堂堂进行曲》"></a>埃尔加（Edward William Elgar）《Pomp and Circumstance Marches Op.39 | 威风堂堂进行曲》</h4><p>这首曲子经常在足球赛场上听到。英格兰许多球队的球迷都会高歌“希望与荣光之地”来鼓舞选手。</p>
<h4 id="瓦格纳（Wilhelm-Richard-Wagner）《Wedding-March-婚礼进行曲》"><a href="#瓦格纳（Wilhelm-Richard-Wagner）《Wedding-March-婚礼进行曲》" class="headerlink" title="瓦格纳（Wilhelm Richard Wagner）《Wedding March | 婚礼进行曲》"></a>瓦格纳（Wilhelm Richard Wagner）《Wedding March | 婚礼进行曲》</h4><p>有名的婚礼进行曲有两种。一首是瓦格纳的婚礼进行曲，庄严肃穆；另一首是门德尔松的婚礼进行曲，华丽而隆重、充满祝福。</p>
<p>瓦格纳的作品是在歌剧《罗恩格林》中女主人公埃尔莎和天鹅骑士的婚礼上演奏的，代表了分离与死亡。门德尔松的看起来更吉利一些，但是，瓦格纳的故事隐喻“婚后才第一次知道对方是怎样的人”，似乎更有深意。</p>
<h4 id="帕赫贝尔（Johann-Pachelbel）《Canon-in-D-Major-卡农》"><a href="#帕赫贝尔（Johann-Pachelbel）《Canon-in-D-Major-卡农》" class="headerlink" title="帕赫贝尔（Johann Pachelbel）《Canon in D Major | 卡农》"></a>帕赫贝尔（Johann Pachelbel）《Canon in D Major | 卡农》</h4><p>作者死后200年的1919年才首次出版，过了三个世纪以上才得以成名的最强古典乐。</p>
<h4 id="萨蒂（Erik-Satie）《Gymnopedie-裸体歌舞》第一首"><a href="#萨蒂（Erik-Satie）《Gymnopedie-裸体歌舞》第一首" class="headerlink" title="萨蒂（Erik Satie）《Gymnopédie |裸体歌舞》第一首"></a>萨蒂（Erik Satie）《Gymnopédie |裸体歌舞》第一首</h4><p>治愈系经典作品。慵懒的旋律缓缓流淌，非常适合大脑一片空白，边发呆边听的音乐。</p>
<h4 id="巴赫《Goldberg-Variationen，BWV-988-哥德堡变奏曲》"><a href="#巴赫《Goldberg-Variationen，BWV-988-哥德堡变奏曲》" class="headerlink" title="巴赫《Goldberg-Variationen，BWV 988 | 哥德堡变奏曲》"></a>巴赫《Goldberg-Variationen，BWV 988 | 哥德堡变奏曲》</h4><p>据说是凯瑟琳伯爵拜托巴赫写一首适合在失眠夜听的曲子。巴赫应其要求，创作了这首超长的变奏曲大作。<br>开篇的咏叹调平稳安详，但之后的部分却洋溢着刺激旋律，听这样的曲子真的会困吗？</p>
<h4 id="普罗科菲耶夫（Sergei-Sergeyevich-Prokofiev）《Cinderella-Op-87-灰姑娘》华尔兹"><a href="#普罗科菲耶夫（Sergei-Sergeyevich-Prokofiev）《Cinderella-Op-87-灰姑娘》华尔兹" class="headerlink" title="普罗科菲耶夫（Sergei Sergeyevich Prokofiev）《Cinderella,Op.87 | 灰姑娘》华尔兹"></a>普罗科菲耶夫（Sergei Sergeyevich Prokofiev）《Cinderella,Op.87 | 灰姑娘》华尔兹</h4><p>普罗科菲耶夫是“遵从旧古典乐芭蕾的传统”谱写了《灰姑娘》，这首曲子用于灰姑娘出发去舞会之前的场景，在舞会舞蹈前，华尔兹已抢先开始演奏。</p>
<p>1941 年普罗科菲耶夫抛妻弃子，选择了 25 岁的女作家米拉·门德尔松（Mira Mendelson）。1948 年他被指责犯上了“形式主义的错误”，并被要求要注意作品的“民族性”。这件事影响了普罗科菲耶夫的健康，他的第一任夫人丽娜也因间谍嫌疑被捕（丽娜生于西班牙，在美国长大），并被判处在劳动营服役 20 年的重刑。</p>
<p>1953年3月5日普罗科菲耶夫去世，讽刺的是，正是当日，苦难大施主斯大林也逝世。普罗科菲耶夫曾被授予“斯大林奖”，死后被追授“列宁奖”。</p>
<h4 id="德彪西（Achille-Claude-Debussy）《Children’s-Corner-儿童乐园》"><a href="#德彪西（Achille-Claude-Debussy）《Children’s-Corner-儿童乐园》" class="headerlink" title="德彪西（Achille-Claude Debussy）《Children’s Corner | 儿童乐园》"></a>德彪西（Achille-Claude Debussy）《Children’s Corner | 儿童乐园》</h4><p>钢琴曲集《儿童乐园》是为了德彪西刚刚 3 岁的 Chou-Chou 而作的。作品充满了温柔和幽默，还添上了给女儿的献词，连封面的设计都充满了爱意。</p>
<h4 id="巴达捷夫斯卡（Tekla-Badarzewska-Baranowska）《Modlitwa-dziewicy-少女的祈祷》钢琴独奏"><a href="#巴达捷夫斯卡（Tekla-Badarzewska-Baranowska）《Modlitwa-dziewicy-少女的祈祷》钢琴独奏" class="headerlink" title="巴达捷夫斯卡（Tekla Bądarzewska-Baranowska）《Modlitwa dziewicy | 少女的祈祷》钢琴独奏"></a>巴达捷夫斯卡（Tekla Bądarzewska-Baranowska）《Modlitwa dziewicy | 少女的祈祷》钢琴独奏</h4><p>仅有的一首由真正的少女创作的“少女名曲”。巴达捷夫斯卡创作的时候年仅 17 岁，1861 年，年仅 27 岁的巴达捷夫斯卡留下丈夫和 5 个孩子去世了。</p>
<h4 id="奥涅格（Arthur-Honegger，港译：康涅格）《Pacific-231-太平洋-231-》"><a href="#奥涅格（Arthur-Honegger，港译：康涅格）《Pacific-231-太平洋-231-》" class="headerlink" title="奥涅格（Arthur Honegger，港译：康涅格）《Pacific 231 | 太平洋 231 》"></a>奥涅格（Arthur Honegger，港译：康涅格）《Pacific 231 | 太平洋 231 》</h4><p>瑞士作曲家奥涅格（Arthur Honegger）是一位热衷于铁道的作曲家。他有一句名言，“就像其他人喜爱女性和马那样，我爱着电车”。奥涅格在交响乐《太平洋 231》中用管弦乐队还原了蒸汽列车，通过节奏变化演绎出加速感，“231” 表示的是车轴配置，前轮、动轮、辅助轮的数量分别是2个、3个、1个。</p>
<h4 id="哈恰图良（Aram-Il’yich-Khachaturian）《Sabre-Dance-马刀舞曲》"><a href="#哈恰图良（Aram-Il’yich-Khachaturian）《Sabre-Dance-马刀舞曲》" class="headerlink" title="哈恰图良（Aram Il’yich Khachaturian）《Sabre Dance | 马刀舞曲》"></a>哈恰图良（Aram Il’yich Khachaturian）《Sabre Dance | 马刀舞曲》</h4><p>节奏快速，激烈热情。<br>《马刀舞曲》是一篇急就章，乐曲中的焦躁感或许就是作曲者当时的心情。《马刀舞曲》的巨大成功反而衬托得作曲者其他作品都不起眼了，哈恰图良懊恼道“若知道会让其他作品失去关注的话，我就不会写了”。</p>
<h4 id="乔治·比才（Georges-Bizet）《Carmen-卡门》"><a href="#乔治·比才（Georges-Bizet）《Carmen-卡门》" class="headerlink" title="乔治·比才（Georges Bizet）《Carmen | 卡门》"></a>乔治·比才（Georges Bizet）《Carmen | 卡门》</h4><p>歌剧中无人不知，无人不晓的存在。</p>
<h4 id="古斯塔夫·马勒（德：Gustav-Mahler）《Symphony-No-1-Titan-第一交响曲·巨人》"><a href="#古斯塔夫·马勒（德：Gustav-Mahler）《Symphony-No-1-Titan-第一交响曲·巨人》" class="headerlink" title="古斯塔夫·马勒（德：Gustav Mahler）《Symphony No.1 Titan | 第一交响曲·巨人》"></a>古斯塔夫·马勒（德：Gustav Mahler）《Symphony No.1 Titan | 第一交响曲·巨人》</h4><p>“交响曲要像世界一样，必须要能包容万象。”</p>
<h2 id="扩展阅读"><a href="#扩展阅读" class="headerlink" title="扩展阅读"></a>扩展阅读</h2><ul>
<li><a href="https://riboseyim.github.io/2018/04/10/Artistic-Classical/" target="_blank" rel="external">古典音乐低俗史</a></li>
<li><a href="https://riboseyim.github.io/2017/04/20/Artistic-The-Mad-Phoenix/" target="_blank" rel="external">舞台剧：南海十三郎</a></li>
<li><a href="https://riboseyim.github.io/2016/09/10/Lincoln/" target="_blank" rel="external">电影评论|灵魂解码《林肯》</a></li>
<li><a href="https://riboseyim.github.io/2017/05/13/Lincoln-Spielberg/" target="_blank" rel="external">电影评论|斯皮尔伯格的林肯情怀</a></li>
<li><a href="https://riboseyim.github.io/2017/10/18/Artistic-Poetry/" target="_blank" rel="external">风月集|诗三百，思无邪</a></li>
<li><a href="https://riboseyim.github.io/2017/04/13/Artistic-Les-Miserables/" target="_blank" rel="external">世纪小说《悲惨世界》</a></li>
<li><a href="https://riboseyim.github.io/2017/10/04/Redology-DunMing/" target="_blank" rel="external">红楼故事：佩刀沽酒作长歌</a></li>
<li><a href="https://riboseyim.github.io/2018/02/04/Redology-Intelligence/" target="_blank" rel="external">红楼故事：康熙的秘密情报系统</a></li>
<li><a href="https://riboseyim.github.io/2017/01/30/Artistic-Garden/" target="_blank" rel="external">江南园林鉴赏|南京瞻园</a></li>
<li><a href="https://riboseyim.github.io/2016/10/15/Artistic-Zhuhai-AirShow/" target="_blank" rel="external">摄影专辑|珠海航空航天展览</a></li>
<li><a href="https://riboseyim.github.io/2018/05/14/Addiction-Decision-Coffee/" target="_blank" rel="external">嗑药简史（四）：咖啡上瘾，喝还是不喝？</a></li>
</ul>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://mp.weixin.qq.com/s/vyjD4UMGQTeBwD0EmNmb4w" target="_blank" rel="external">古典音乐欣赏从这里轻松入门 | 原创 2016-10-30 古典音乐</a></li>
<li><a href="https://mp.weixin.qq.com/s/2Ee3RR0zBsADlY0W99ryIA" target="_blank" rel="external">《 THE FENCER 》，一部真实题材的击剑作品、一部 FIE 推荐的击剑电影！</a></li>
<li><a href="https://mp.weixin.qq.com/s/sVeqSaIykxHjolQ9ZnEmlQ" target="_blank" rel="external">绝望的微笑–柴可夫斯基《悲怆》交响曲</a></li>
<li><a href="http://www.pku-hall.com/jtqk03.aspx?id=97" target="_blank" rel="external">天生的激进分子：德彪西</a></li>
<li><a href="https://mp.weixin.qq.com/s/X5LnROCCneDXpMTj45zviw" target="_blank" rel="external">【音乐研究】音乐品位折射你的思维</a></li>
<li><a href="https://site.douban.com/245962/widget/notes/190876031/note/566596043/" target="_blank" rel="external">【2016-5-23】本科论文 | 纳粹德国1937年“堕落艺术展”研究 （by 骆舒星 ）</a></li>
<li><a href="https://mp.weixin.qq.com/s?__biz=MzA4MjA2OTEyMw==&amp;mid=2650273241&amp;idx=1&amp;sn=34c74edaeef5cd60416dd65308253818&amp;scene=1&amp;srcid=0502aSqSyEI8aerb4TsZS66d#rd" target="_blank" rel="external">@古典音乐：西方音乐发展脉络全景图</a></li>
<li><a href="https://mp.weixin.qq.com/s?__biz=MzA5ODEwODAwNg==&amp;mid=207920664&amp;idx=3&amp;sn=9ee957ef699d35345abfa13ed0881412&amp;scene=1#rd" target="_blank" rel="external">@欧美内参：德国学校是怎么教音乐的？</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;古典音乐低俗史&lt;/li&gt;
&lt;li&gt;古典音乐经典名曲&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Art" scheme="http://riboseyim.github.com/tags/Art/"/>
    
  </entry>
  
  <entry>
    <title>Commander-Navy-Digital</title>
    <link href="http://riboseyim.github.com/2018/04/09/Commander-Navy-Digital/"/>
    <id>http://riboseyim.github.com/2018/04/09/Commander-Navy-Digital/</id>
    <published>2018-04-09T09:39:06.000Z</published>
    <updated>2018-04-16T10:05:38.578Z</updated>
    
    <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><a id="more"></a>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://mp.weixin.qq.com/s/3U7QifYIVnUPScBM78RDGQ" target="_blank" rel="external">美军核潜艇部队现状及其发展 | 2018-03-12 知远战略与防务研究所</a></li>
<li><a href="https://www.pmume.com/hjbk/nnc0w.shtml" target="_blank" rel="external">海军百科|潜艇潜望镜</a></li>
<li><a href="https://www.pmume.com/hjbk/nnoih.shtml" target="_blank" rel="external">海军百科|攻击潜望镜</a></li>
<li><a href="http://digi.tech.qq.com/a/20170921/013387.htm" target="_blank" rel="external">美国海军居然用Xbox手柄来控制潜艇潜望镜|腾讯数码2017-09-21</a></li>
<li><a href="https://www.digitaltrends.com/gaming/xbox-360-controller-us-navy-submarine-periscope/" target="_blank" rel="external">The U.S. Navy is using Xbox 360 controllers to operate submarine periscopes | 9.19.17</a></li>
<li><a href="https://www.digitaltrends.com/cool-tech/navy-xbox-controllers-attack-submarines/" target="_blank" rel="external">Newest Navy attack sub uses an Xbox controller to operate its periscope | 3.17.18</a></li>
<li><a href="https://www.digitaltrends.com/health-fitness/navy-bans-e-cigarettes/" target="_blank" rel="external">Dishonorable discharge for e-cigs — U.S. Navy bans the devices aboard vessels|4.16.17</a></li>
<li><a href="https://www.digitaltrends.com/cool-tech/littoral-combat-ships/" target="_blank" rel="external">Navy uses virtual reality to train crews for deployment on the ships of tomorrow|9.2.17</a></li>
<li><a href="https://zh.wikipedia.org/wiki/%E5%BC%97%E5%90%89%E5%B0%BC%E4%BA%9A%E7%BA%A7%E6%A0%B8%E6%BD%9C%E8%89%87" target="_blank" rel="external">维基百科：弗吉尼亚级攻击型核潜艇</a></li>
<li><a href="https://zh.wikipedia.org/wiki/%E7%BE%8E%E5%9C%8B%E6%B5%B7%E8%BB%8D%E6%BD%9B%E8%89%87%E7%B4%9A%E5%88%A5%E5%88%97%E8%A1%A8" target="_blank" rel="external">维基百科：美国海军潜艇级别列表</a></li>
<li><a href="http://www.hfdsb.gov.cn/News/jsjs/201801/20180124113319_28949.html" target="_blank" rel="external">宁波破获特大卷烟案，案值上亿| 加热不燃烧新型卷烟非法经营案 | 2018-1-24　来源：宁波晚报　作者：张贻富</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h2&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Machine Learning:如何选择机器学习算法？</title>
    <link href="http://riboseyim.github.com/2018/04/02/Machine-Learning-Algorithms-Sheet/"/>
    <id>http://riboseyim.github.com/2018/04/02/Machine-Learning-Algorithms-Sheet/</id>
    <published>2018-04-02T07:28:39.000Z</published>
    <updated>2018-05-07T12:58:43.077Z</updated>
    
    <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><ul>
<li>识别和应用机器学习算法解决问题</li>
<li>机器学习算法备忘单</li>
<li>何时使用特定算法? 线性回归 vs 逻辑回归,Linear SVM vs kernel SVM,Trees</li>
<li>神经网络和深度学习：k-means/k-modes,GMM,Hierarchical clustering,PCA,SVD,LDA</li>
</ul>
<a id="more"></a>
<h2 id="Machine-Learning-Algorithms-Overview"><a href="#Machine-Learning-Algorithms-Overview" class="headerlink" title="Machine Learning Algorithms Overview"></a>Machine Learning Algorithms Overview</h2><p>关于目前最流行的一些机器学习算法，建议阅读：</p>
<ul>
<li><a href="https://riboseyim.github.io/2018/02/10/Machine-Learning-Algorithms/" target="_blank" rel="external">Machine Learning:机器学习算法</a></li>
<li><a href="https://riboseyim.github.io/2018/01/25/Machine-Learning-Books/" target="_blank" rel="external">Machine Learning:机器学习书单</a></li>
</ul>
<p>如果您已经非常熟悉这些算法，可以跳过本节。</p>
<h2 id="Which-machine-learning-algorithm-should-I-use"><a href="#Which-machine-learning-algorithm-should-I-use" class="headerlink" title="Which machine learning algorithm should I use?"></a>Which machine learning algorithm should I use?</h2><ul>
<li><a href="https://blogs.sas.com/content/subconsciousmusings/2017/04/12/machine-learning-algorithm-use/?utm_source=twitter&amp;utm_medium=cpc&amp;utm_campaign=analytics-global&amp;utm_content=US_tap" target="_blank" rel="external">Which machine learning algorithm should I use? | Hui Li | Principal Staff Scientist, Data Science</a></li>
</ul>
<p>面对各种机器学习算法时，经常遇到的一个典型问题是“我应该使用哪种算法？” 问题的答案取决于许多因素，其中包括：</p>
<ul>
<li>数据的大小，质量和性质</li>
<li>可用的计算时间</li>
<li>任务的紧迫性</li>
<li>你想对数据做什么</li>
</ul>
<p>即使是一位经验丰富的数据科学家，也无法在尝试不同的算法之前知道哪种算法会表现最好。我们并不主张这是唯一的、完美的方案，而是希望能够根据一些明确的因素提供指导——首先应该尝试哪些算法。</p>
<h3 id="机器学习算法备忘单"><a href="#机器学习算法备忘单" class="headerlink" title="机器学习算法备忘单"></a>机器学习算法备忘单</h3><p>机器学习算法备忘单（The machine learning algorithm cheat sheet）可以帮助您从各种机器学习算法中进行选择，以找到适合您的特定问题的适当算法。本文将说明使用备忘单的过程。</p>
<p>由于备忘单是为初学者数据科学家和分析师设计的，因此在讨论算法时会做一些简化假设。这里推荐的算法来自几位数据科学家和机器学习专家和开发人员的反馈和提示。有几个问题我们的看法并不一致，对于这些问题，我们试图强调通用性、尽量调和差异。随着我们的知识库发展，将包含一套更完整的方法，其他算法将在稍后添加。</p>
<p><img src="http://omb2onfvy.bkt.clouddn.com/machine-learning-cheet-sheet.png" alt="The machine learning algorithm cheat sheet"></p>
<h4 id="如何使用备忘单"><a href="#如何使用备忘单" class="headerlink" title="如何使用备忘单"></a>如何使用备忘单</h4><p>备忘单使用方法，依次阅读的路径和算法标签，例如：</p>
<ul>
<li>如果要执行降维（dimension reduction），则使用主成分分析（principal component analysis）</li>
<li>如果您需要快速进行数值预测（numeric prediction），请使用决策树（decision tree）或逻辑回归（ logistic regression）</li>
<li>如果您需要分层结果，则使用分层聚类（hierarchical clustering）</li>
</ul>
<p>有些场景可能会适用不止一个分支，也有些场景不能完美匹配上，重要的是要记住，这些路径只是基于经验的方法，因此一些建议并不完全准确。许多数据科学家的关电视，找到最好算法的唯一方法就是尝试所有算法（the only sure way to find the very best algorithm is to try all of them）。</p>
<h2 id="何时使用特定算法"><a href="#何时使用特定算法" class="headerlink" title="何时使用特定算法?"></a>何时使用特定算法?</h2><h4 id="线性回归-vs-逻辑回归"><a href="#线性回归-vs-逻辑回归" class="headerlink" title="线性回归 vs 逻辑回归"></a>线性回归 vs 逻辑回归</h4><p>线性回归是一种讨论连续因变量之间关系的建模方法。如果因变量不是连续的而是分类的，则可以使用 logit link function 将线性回归转化为逻辑回归。逻辑回归是一种简单，快速而强大的分类算法。这里我们讨论二进制情况下的因变量</p>
<p>在逻辑回归中，我们使用不同的假设类来尝试预测给定示例属于“1”类的概率与其属于“-1”类的概率。</p>
<table>
<thead>
<tr>
<th>线性回归</th>
<th>逻辑回归</th>
</tr>
</thead>
<tbody>
<tr>
<td><img src="http://omb2onfvy.bkt.clouddn.com/machine-learning-linear-regression.png" alt="Linear regression"></td>
<td><img src="http://omb2onfvy.bkt.clouddn.com/machine-learning-logistic-regresion.png" alt="Logistic regression"></td>
</tr>
</tbody>
</table>
<h4 id="Linear-SVM-vs-kernel-SVM"><a href="#Linear-SVM-vs-kernel-SVM" class="headerlink" title="Linear SVM vs kernel SVM"></a>Linear SVM vs kernel SVM</h4><p>当数据的各种类型不是线性可分的时候，核方法（Kernel method 或 Kernel tricks）可以用来将非线性可分的空间映射到更高维的线性可分的空间。</p>
<p>支持向量机（SVM）算法相当于通过法线（Normal vector）和超平面偏差（bias  of the hyperplane）获得分类器。这个超平面（边界）尽可能宽地分隔不同的类，该问题可以转化为约束优化问题。</p>
<p>当大多数因变量是数字时，逻辑回归和 SVM 是首先应该尝试的分类方法。这些模型易于实现，参数易调整，性能也相当不错。非常适合初学者。</p>
<p><img src="http://omb2onfvy.bkt.clouddn.com/machine-learning-kernal-SVM.png" alt="Kernel tricks are used to map a non-linearly separable functions into a higher dimension linearly separable function."></p>
<table>
<thead>
<tr>
<th>线性回归</th>
<th>逻辑回归</th>
</tr>
</thead>
<tbody>
<tr>
<td><img src="http://omb2onfvy.bkt.clouddn.com/machine-learning-Group-By-Linear-Regression.jpg" alt="Group By Linear Regression"></td>
<td><img src="http://omb2onfvy.bkt.clouddn.com/machine-learning-Logistic-Regression-SAS.jpg" alt="machine-learning-Logistic-Regression-SAS"></td>
</tr>
</tbody>
</table>
<h4 id="树-Tree"><a href="#树-Tree" class="headerlink" title="树 | Tree"></a>树 | Tree</h4><ul>
<li>预测模型中的决策树</li>
</ul>
<p>决策树（Decision Tree），随机森林（Random Forest）和梯度提升（Gradient Boosting ）都是基于决策树的算法。决策树有许多变体，但它们都做同样的事情 - 将特征空间细分成大多数标签相同的区域。决策树很容易理解和实施。但是，当我们耗尽树枝（branch）并且深入时，它们倾向于过度拟合数据。随机森林和梯度提升是两种使用树算法的实现，具有良好的精确度，是克服过拟合问题（over-fitting problem）的流行方法。</p>
<p><img src="http://omb2onfvy.bkt.clouddn.com/machine-learning-decision-tree.png" alt="A decision tree for prediction model"></p>
<p>注：在统计学中，过拟合（overfitting，或称过度拟合）现象是指在拟合一个统计模型时，使用过多参数。对比于可获取的数据总量来说，一个荒谬的模型只要足够复杂，是可以完美地适应数据。过拟合一般可以视为违反奥卡姆剃刀原则。当可选择的参数的自由度超过数据所包含信息内容时，这会导致最后（拟合后）模型使用任意的参数，这会减少或破坏模型一般化的能力（目标效果应适用于一般化的情况而非只是训练时所使用的现有数据（根据它的归纳偏向））。另一种常见的现象是使用太少参数，以致于不适应数据，这则称为乏适（underfitting，或称：拟合不足）现象。</p>
<h3 id="神经网络和深度学习"><a href="#神经网络和深度学习" class="headerlink" title="神经网络和深度学习"></a>神经网络和深度学习</h3><p><img src="http://omb2onfvy.bkt.clouddn.com/machine-learning-cnn-architecture.jpg" alt="A convolution neural network architecture"></p>
<p>神经网络在 20 世纪 80 年代中期由于其并行和分布式处理能力而兴旺发达。但是在这个领域的研究受反向传播算法无效性的阻碍，它广泛用于优化神经网络参数。支持向量机（SVM）和其他更简单的模型，可以通过求解凸优化问题来轻松训练，逐渐取代机器学习中的神经网络。</p>
<p>近年来，诸如无监督预训练（ unsupervised pre-training）和分层贪婪训练（layer-wise greedy training）等新的和改进的训练技术促进了神经网络的复兴。日益强大的计算能力，例如图形处理单元（GPU）和大规模并行处理（MPP），也刺激了神经网络的发展，已经发明出具有数千层的神经网络模型。</p>
<p>注：反向传播（Backpropagation，缩写 BP）是“误差反向传播”的简称，一种与最优化方法（如梯度下降法）结合使用的，用来训练人工神经网络的常见方法。该方法对网络中所有权重计算损失函数的梯度。这个梯度会反馈给最优化方法，用来更新权值以最小化损失函数。</p>
<h3 id="SAS-Visual-Analytics-中的神经网络"><a href="#SAS-Visual-Analytics-中的神经网络" class="headerlink" title="SAS Visual Analytics 中的神经网络"></a>SAS Visual Analytics 中的神经网络</h3><p>换句话说，浅层神经网络已演变成深度学习神经网络。深度神经网络对于监督学习非常成功。当用于语音和图像识别时，深度学习的表现与人类一样好，甚至更好。应用于无监督学习任务（如特征提取），深度学习还可从原始图像或语音中提取特征，而人工干预则更少。</p>
<p>神经网络由三部分组成：输入层（input layer），隐藏层（hidden layers）和输出层（output layer）。训练样本定义了输入层和输出层。当输出层是一个分类变量时，神经网络就是解决分类问题的一种方法。当输出层是连续变量时，网络可以用来做回归。当输出层与输入层相同时，网络可用于提取内在特征。隐藏层的数量决定了模型的复杂性和建模容量。</p>
<p><img src="http://omb2onfvy.bkt.clouddn.com/machine-learning-vdmml_neural.png" alt="A neural network in SAS Visual Analytics"></p>
<h4 id="k-means-k-modes，GMM（高斯混合模型）聚类"><a href="#k-means-k-modes，GMM（高斯混合模型）聚类" class="headerlink" title="k-means / k-modes，GMM（高斯混合模型）聚类"></a>k-means / k-modes，GMM（高斯混合模型）聚类</h4><p>k-means / k-modes，GMM 聚类旨在将 n 个观测分为 k 个聚类。 简单地说，k-means 的结果是每个数据点被 assign 到其中某一个 cluster 了，即 hard  assignment，而 GMM 则给出这些数据点被 assign 到每个cluster 的概率，又称作 soft assignment 。每个样本都有与每个群集关联的概率。当给定聚类数 k 时，两种算法都足够简单快速地进行聚类。</p>
<table>
<thead>
<tr>
<th>k-means</th>
<th>GMM</th>
</tr>
</thead>
<tbody>
<tr>
<td><img src="http://omb2onfvy.bkt.clouddn.com/machine-learning-kmeans-clustering-1.png" alt="K Means Clustering"></td>
<td><img src="http://omb2onfvy.bkt.clouddn.com/machine-learning-gaussianmixturemodel-1.png" alt="Gaussian Mixture Model"></td>
</tr>
</tbody>
</table>
<h4 id="DBSCAN-基于密度的空间聚类"><a href="#DBSCAN-基于密度的空间聚类" class="headerlink" title="DBSCAN | 基于密度的空间聚类"></a>DBSCAN | 基于密度的空间聚类</h4><p>DBSCAN ，Density-based spatial clustering of applications with noise ，是在 1996 年由 Martin Ester 等提出的聚类分析算法， 这个算法是以密度为本的：给定某空间里的一个点集合，该算法能把附近的点分成一组（有很多相邻点的点），并标记出位于低密度区域的局外点（最接近它的点也十分远），DBSCAN 是一个最常用的聚类分析算法。</p>
<p><img src="http://omb2onfvy.bkt.clouddn.com/machine-learning-dbscan.jpg" alt="A DBSCAN illustration"></p>
<h4 id="Hierarchical-clustering-分层聚类"><a href="#Hierarchical-clustering-分层聚类" class="headerlink" title="Hierarchical clustering | 分层聚类"></a>Hierarchical clustering | 分层聚类</h4><p>分层分区可以使用树结构（树状图）可视化。它不需要集群的数量作为输入，并且可以使用不同的 K 来在不同粒度级别处查看分区（即精炼/粗化集群  refine/coarsen clusters）。</p>
<p><img src="http://omb2onfvy.bkt.clouddn.com/machine-learning-Hierarchical_clustering.png" alt="Hierarchical clustering"></p>
<h4 id="PCA，SVD和LDA"><a href="#PCA，SVD和LDA" class="headerlink" title="PCA，SVD和LDA"></a>PCA，SVD和LDA</h4><p>我们通常不希望直接将大量特征提供给机器学习算法，因为某些特征可能无关紧要，或者“内在”维度可能小于特征的数量。主成分分析（PCA，Principal components analysis），奇异值分解（SVD，Singular value decomposition）和隐含狄利克雷分布（LDA，latent Dirichlet allocation）均可用于降维。</p>
<p>PCA 是一种无监督聚类方法，它将原始数据空间映射到较低维空间，同时保留尽可能多的信息。 PCA 基本上找到最能保留数据方差的子空间，子空间由数据协方差矩阵的主要特征向量定义。</p>
<p>SVD 和 PCA 有一定联系——中心数据矩阵的 SVD（特征 vs. 样本）能提供定义由 PCA 所找到的同样子空间的主左奇异向量（dominant left singular vectors）。然而，SVD 是一种更通用的技术，因为它也可以做 PCA 不能做的事情。例如，用户与电影矩阵的 SVD 能够提取可以在推荐系统中使用的用户资料和电影资料。另外，在自然语言处理（NLP）中，SVD 还被广泛用作主题建模工具，称为潜在语义分析（ latent semantic analysis ）。</p>
<p>NLP 中的相关技术是隐含狄利克雷分布（ LDA ）。 LDA 是概率性主题模型，它以与高斯混合模型（GMM）相似的方式，即将连续数据按照高斯密度分解——将文档分解为主题。与 GMM 不同的是，LDA 对离散数据（文档中的词）进行建模，并且它约束了主题需是根据狄利克雷分布的先验分布。</p>
<h2 id="总结：选择算法时的注意事项"><a href="#总结：选择算法时的注意事项" class="headerlink" title="总结：选择算法时的注意事项"></a>总结：选择算法时的注意事项</h2><p>选择算法时请始终考虑以下方面：准确性（accuracy），训练时间（training time）和易用性（ease of use）。许多用户将准确性放在首位，而 <strong>初学者倾向于关注他们最熟悉的算法（Beginners tend to focus on algorithms they know best）</strong>。</p>
<p>首先要考虑的是如何获得结果，无论结果如何。<strong>初学者倾向于选择易于实现并能够快速获得结果的算法（Beginners tend to choose algorithms that are easy to implement and can obtain results quickly）</strong>。这个工作无可厚非，只需确保它只是整个过程的第一步。一旦您获得了一些结果并熟悉数据，您可能需要花更多时间、使用更复杂的算法来加强对数据的理解，从而进一步改进结果。</p>
<p>最好的算法也许不是那些已经获得最高准确率的方法，因为算法通常需要仔细调整、广泛训练才可以实现可用性方面的最佳性能。</p>
<h2 id="扩展阅读-《The-Machine-Learning-Master》"><a href="#扩展阅读-《The-Machine-Learning-Master》" class="headerlink" title="扩展阅读:《The Machine Learning Master》"></a>扩展阅读:<a href="https://www.gitbook.com/book/riboseyim/machine-learning" target="_blank" rel="external">《The Machine Learning Master》</a></h2><p><img src="http://p11slcnom.bkt.clouddn.com/banner-MLM-201803.png" alt=""></p>
<ul>
<li><a href="https://riboseyim.github.io/2018/01/17/Machine-Learning-TensorFlow/" target="_blank" rel="external">Machine Learning(一):基于 TensorFlow 实现宠物血统智能识别</a></li>
<li><a href="https://riboseyim.github.io/2018/01/15/Machine-Learning-OpenCV/" target="_blank" rel="external">Machine Learning(二):宠物智能识别之 Using OpenCV with Node.js</a></li>
<li><a href="https://riboseyim.github.io/2018/02/09/Machine-Learning-Projects/" target="_blank" rel="external">Machine Learning:机器学习项目</a></li>
<li><a href="https://riboseyim.github.io/2018/02/10/Machine-Learning-Algorithms/" target="_blank" rel="external">Machine Learning:机器学习算法</a></li>
<li><a href="https://riboseyim.github.io/2018/04/02/Machine-Learning-Algorithms-Sheet/" target="_blank" rel="external">Machine Learning:如何选择机器学习算法</a></li>
<li><a href="https://riboseyim.github.io/2018/05/07/Machine-Learning-Neural-Network" target="_blank" rel="external">Machine Learning:神经网络基础</a></li>
<li><a href="https://riboseyim.github.io/2018/01/25/Machine-Learning-Books/" target="_blank" rel="external">Machine Learning:机器学习书单</a></li>
<li><a href="https://riboseyim.github.io/2017/08/29/Machine-Learning-News" target="_blank" rel="external">Machine Learning:人工智能媒体报道集</a></li>
<li><a href="https://riboseyim.github.io/2018/02/16/Machine-Learning-Law/" target="_blank" rel="external">Machine Learning:机器学习技术与知识产权法</a></li>
<li><a href="https://riboseyim.github.io/2018/03/09/Machine-Learning-Economist/" target="_blank" rel="external">Machine Learning:经济学家谈人工智能</a></li>
<li><a href="https://riboseyim.github.io/2017/09/15/Visualization-Graphviz/" target="_blank" rel="external">数据可视化（三）基于 Graphviz 实现程序化绘图</a></li>
</ul>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://blogs.sas.com/content/subconsciousmusings/2017/04/12/machine-learning-algorithm-use/?utm_source=twitter&amp;utm_medium=cpc&amp;utm_campaign=analytics-global&amp;utm_content=US_tap" target="_blank" rel="external">Which machine learning algorithm should I use? | Hui Li | Principal Staff Scientist, Data Science</a></li>
<li><a href="https://arxiv.org/pdf/1302.1552.pdf" target="_blank" rel="external">An Information-Theoretic Analysis of Hard and Soft Assignment Methods for Clustering </a></li>
<li><a href="http://www.iro.umontreal.ca/~lisa/pointeurs/BengioNips2006All.pdf" target="_blank" rel="external">Greedy Layer-Wise Training of Deep Networks</a></li>
<li><a href="https://blogs.sas.com/content/subconsciousmusings/2018/03/09/understanding-interpreting-data-set/" target="_blank" rel="external">Understanding and interpreting your data set  1</a></li>
<li><a href="http://www.kernel-machines.org/publications/pdfs/0701907.pdf" target="_blank" rel="external">KERNEL METHODS IN MACHINE LEARNING1 |By Thomas Hofmann, Bernhard Scholkopf and Alexander J. Smola</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;识别和应用机器学习算法解决问题&lt;/li&gt;
&lt;li&gt;机器学习算法备忘单&lt;/li&gt;
&lt;li&gt;何时使用特定算法? 线性回归 vs 逻辑回归,Linear SVM vs kernel SVM,Trees&lt;/li&gt;
&lt;li&gt;神经网络和深度学习：k-means/k-modes,GMM,Hierarchical clustering,PCA,SVD,LDA&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="架构师" scheme="http://riboseyim.github.com/tags/%E6%9E%B6%E6%9E%84%E5%B8%88/"/>
    
      <category term="数学与算法" scheme="http://riboseyim.github.com/tags/%E6%95%B0%E5%AD%A6%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
      <category term="Machine-Learning" scheme="http://riboseyim.github.com/tags/Machine-Learning/"/>
    
  </entry>
  
  <entry>
    <title>Lincoln-Chicago-Orchestra</title>
    <link href="http://riboseyim.github.com/2018/03/30/Lincoln-Chicago-Orchestra/"/>
    <id>http://riboseyim.github.com/2018/03/30/Lincoln-Chicago-Orchestra/</id>
    <published>2018-03-30T08:17:42.000Z</published>
    <updated>2018-03-30T08:18:47.271Z</updated>
    
    <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://zh.wikipedia.org/wiki/%E7%AE%A1%E5%BC%A6%E4%B9%90%E5%9B%A2%E5%88%97%E8%A1%A8" target="_blank" rel="external">维基百科：芝加哥交响乐团</a></li>
<li><a href="https://zh.wikipedia.org/wiki/%E7%AE%A1%E5%BC%A6%E4%B9%90%E5%9B%A2%E5%88%97%E8%A1%A8" target="_blank" rel="external">维基百科：管弦乐团列表</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h2&gt;&lt;h2 id=&quot;参考文献&quot;&gt;&lt;a href=&quot;#参考文献&quot; class=&quot;headerlink&quot; title=&quot;参考文献&quot;&gt;&lt;/a&gt;参考文献&lt;/h
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>DevOps 漫谈:DevOps实践的本质是文化</title>
    <link href="http://riboseyim.github.com/2018/03/29/DevOps-Culture/"/>
    <id>http://riboseyim.github.com/2018/03/29/DevOps-Culture/</id>
    <published>2018-03-29T01:21:17.000Z</published>
    <updated>2018-04-26T02:11:18.984Z</updated>
    
    <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><ul>
<li>DevOps实践的本质是文化</li>
</ul>
<a id="more"></a>
<h2 id="DevOps实践的本质是文化"><a href="#DevOps实践的本质是文化" class="headerlink" title="DevOps实践的本质是文化"></a>DevOps实践的本质是文化</h2><p>2016-07-24 运维日 广州活动纪要<br>地点：羊城晚报 同创汇</p>
<h4 id="刘宇"><a href="#刘宇" class="headerlink" title="刘宇"></a>刘宇</h4><p>职业路径：新浪－&gt;Puppet实践－&gt;Puppet系列文集－&gt;InfoQ编辑－&gt;西山居<br>社区：LinuxTone.org、InfoQ</p>
<ul>
<li>Automation：工具化</li>
<li>Lean 精益：</li>
<li>Measurement：度量一切</li>
<li><p>Sharing：不管是否成功</p>
</li>
<li><p>人物：Patrick Debois：比利时，独立顾问，DevOps领袖（2008年）</p>
</li>
</ul>
<p><strong>推荐书单</strong></p>
<ul>
<li><a href="https://riboseyim.github.io/2018/04/10/DevOps-Phoenix/" target="_blank" rel="external">《The Phoenix Project》</a></li>
<li><p>《The DevOps Cookbook》</p>
</li>
<li><p>企业：Facebook</p>
<blockquote>
<p>Don’t make me think</p>
</blockquote>
</li>
</ul>
<p><strong>凡是被很多人不断重复的好习惯，要将其自动化整合到工具</strong></p>
<ul>
<li>实践经验<br>1.站立会<br>2.<a href="https://riboseyim.github.io/2017/08/06/TeamWork-Kanban/" target="_blank" rel="external">Kanban|看板</a><br>3.复盘：总结－发现问题－改进<br>4.<a href="https://riboseyim.github.io/2017/06/27/Technology-English/" target="_blank" rel="external">带领团队翻译书籍 （这事听着都打鸡血)</a></li>
</ul>
<blockquote>
<p>学习力－团队生命之根</p>
</blockquote>
<h4 id="魅族云"><a href="#魅族云" class="headerlink" title="魅族云"></a>魅族云</h4><p>1.异地多活：专线打通多个IDC机房<br>2.KVM<br>3.网络：OpenStack 实现控制器、GSLB 全局负载均衡，智能路由</p>
<h4 id="微信：自动压力测试实践"><a href="#微信：自动压力测试实践" class="headerlink" title="微信：自动压力测试实践"></a>微信：自动压力测试实践</h4><p>张兴：8年＋</p>
<p>1.生产环境运行压力测试<br>2.接入Proxy层，调整请求分配权重<br>3.压测管控</p>
<p>失败监控（系统、逻辑）<br>耗时监控（SUR client）<br>快速拒绝（如何判断是否可以丢弃？）<br>硬件限制（CPU，内存，网卡）</p>
<p>数据：<br>15s监控数据入库画图，<br>1min回退配置（1w台服务器），<br>降低放量速率</p>
<h4 id="YY安全"><a href="#YY安全" class="headerlink" title="YY安全"></a>YY安全</h4><ul>
<li>案例一：海量小包攻击性防御<br>1.20140828  脉冲DDoS攻击<br>40小时，40人团队，监控不足<br>5秒钟一次，发送小包</li>
</ul>
<p>黑产报价：150元可购买 15G流量，700W pps，攻击成本低</p>
<ul>
<li>案例二：合作方服务器被入侵概率高（木马）</li>
</ul>
<p>ps/netstat污染处理：内核态，查看System.Call  (可以挖掘写一篇)</p>
<ul>
<li><p>案例三：主播IP泄漏<br>业务逻辑bug，异常抛出IP</p>
</li>
<li><p>案例四<br>确定当前主要矛盾：投诉盗号、盗刷？服务器入侵？DDoS ?<br>利用现有资源（自有编制、第三方合作），最大投入产出比</p>
</li>
<li><p>决策变量<br>技术预研、业务规模、发展阶段、主要矛盾（切入点）</p>
</li>
</ul>
<h2 id="扩展阅读：DevOps-漫谈系列"><a href="#扩展阅读：DevOps-漫谈系列" class="headerlink" title="扩展阅读：DevOps 漫谈系列"></a>扩展阅读：<a href="https://riboseyim.github.io/2016/07/28/DevOps/" target="_blank" rel="external">DevOps 漫谈系列</a></h2><ul>
<li><a href="https://riboseyim.github.io/2018/04/10/DevOps-Phoenix/" target="_blank" rel="external">《凤凰项目》：从作坊到工厂的寓言故事</a></li>
<li><a href="https://riboseyim.github.io/2017/08/06/TeamWork-Kanban/" target="_blank" rel="external">Kanban 看板管理实践</a></li>
<li><a href="https://riboseyim.github.io/2018/03/26/DevOps-Deployment/" target="_blank" rel="external">DevOps 漫谈：基础设施部署和配置管理</a></li>
<li><a href="https://riboseyim.github.io/2017/11/12/DevOps-Container-Security/" target="_blank" rel="external">Linux 容器安全的十重境界</a></li>
<li><a href="https://riboseyim.github.io/2017/06/27/Technology-English/" target="_blank" rel="external">工程师的自我修养：全英文技术学习实践</a></li>
</ul>
<h4 id="DevOps-实践的本质是文化"><a href="#DevOps-实践的本质是文化" class="headerlink" title="DevOps 实践的本质是文化"></a><a href="https://riboseyim.github.io/2018/03/29/DevOps-Culture/" target="_blank" rel="external">DevOps 实践的本质是文化</a></h4><ul>
<li>学习力－团队生命之根</li>
<li>带领团队翻译书籍</li>
<li>Don’t make me think</li>
<li>凡是被很多人不断重复的好习惯，要将其自动化整合到工具</li>
</ul>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://mp.weixin.qq.com/s?__biz=MzA4Nzg5Nzc5OA==&amp;mid=400138875&amp;idx=1&amp;sn=01b4ea2978370d215442e4a22d7d2a7f&amp;scene=1&amp;srcid=1028tfQzmCsfXfTybP9dWEAy#rd" target="_blank" rel="external">中小企业监控体系构建实战</a></li>
<li><a href="https://mp.weixin.qq.com/s?__biz=MzAwMDU1MTE1OQ==&amp;mid=2653548227&amp;idx=1&amp;sn=3deb458aa18fa878dc9eaf89aaa78303&amp;chksm=813a7f5bb64df64d7037213ef34b3ff6c09375593ec82919b214829b825e82565b6058366ef1&amp;mpshare=1&amp;scene=1&amp;srcid=01190z58NNndr7YlKBPp5Jz6#rd" target="_blank" rel="external">LinkedIn:如何利用大数据算法定位网站性能瓶颈(BOSS)</a></li>
<li><a href="http://jaseywang.me/2017/02/08/%e6%a0%91%e8%8e%93%e6%b4%beraspberrypi%e3%80%81saltstack-%e5%9c%a8%e7%ba%bf%e4%b8%8b%e8%87%aa%e5%8a%a9%e6%9c%ba%e8%bf%90%e7%bb%b4%e4%b8%8a%e7%9a%84%e5%ba%94%e7%94%a8/" target="_blank" rel="external">树莓派(raspberrypi)、saltstack 在线下自助机运维上的应用 | Jasey Wang</a></li>
<li><a href="http://abruzzi.github.com/2016/05/design-for-failure/" target="_blank" rel="external">邱俊涛：为故障和失败做设计</a></li>
<li><a href="http://coolshell.cn/articles/17737.html" target="_blank" rel="external">酷壳：AWS 的 S3 故障回顾和思考</a></li>
<li><a href="http://coolshell.cn/articles/17680.html" target="_blank" rel="external">酷壳：从GITLAB误删除数据库想到的</a></li>
<li><a href="http://coolshell.cn/articles/17446.html" target="_blank" rel="external">酷壳：这多年来我一直在钻研的技术</a></li>
<li><a href="http://www.infoq.com/cn/presentations/chatops-at-github" target="_blank" rel="external">GitHub运维机器人</a></li>
<li><a href="https://mp.weixin.qq.com/s?__biz=MjM5MDE0Mjc4MA==&amp;mid=206585329&amp;idx=1&amp;sn=b3cdb637dfff9b4378ec703c9b27a331&amp;scene=1%23rd" target="_blank" rel="external">运维的本质：可视化 |2015-05-14 王津银 InfoQ</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;DevOps实践的本质是文化&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="最佳工程实践" scheme="http://riboseyim.github.com/tags/%E6%9C%80%E4%BD%B3%E5%B7%A5%E7%A8%8B%E5%AE%9E%E8%B7%B5/"/>
    
      <category term="架构师" scheme="http://riboseyim.github.com/tags/%E6%9E%B6%E6%9E%84%E5%B8%88/"/>
    
      <category term="DevOps" scheme="http://riboseyim.github.com/tags/DevOps/"/>
    
  </entry>
  
  <entry>
    <title>DevOps 漫谈：基础设施部署和配置管理</title>
    <link href="http://riboseyim.github.com/2018/03/26/DevOps-Deployment/"/>
    <id>http://riboseyim.github.com/2018/03/26/DevOps-Deployment/</id>
    <published>2018-03-26T10:01:39.000Z</published>
    <updated>2018-05-02T03:14:45.860Z</updated>
    
    <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><ul>
<li>Ansible vs. Chef vs. Fabric vs. Puppet vs. SaltStack</li>
</ul>
<a id="more"></a>
<p><img src="http://og2061b3n.bkt.clouddn.com/Deploying-Management-Tools.png" alt=""></p>
<p>在生产环境中工作，常常意味着连续部署和遍布全球的基础设施。如果您的基础架构是分散式和基于云的，同时您需要在大量服务器上频繁部署大量类似的服务，如果此时有一种方法可以自动配置和维护以上所有内容将是您的一大福音。</p>
<p>部署管理工具（Deployment management tools）和配置管理工具(configuration management tools)是为此目的而设计的。它们使您能够使用“食谱”（recipes），“剧本” (playbooks)，模板(templates)或任何术语来简化整个环境中的自动化和编排，以提供标准、一致的部署。</p>
<p>在选择工具时请记住几点注意事项。首先是了解工具的模型。有些工具采用主控模式（master-client model），它有一个集中控制点（master）与分布式部署的服务器进行通信，其他部分则可以在更本地的层面上运行。另一个考虑因素是你的环境构成。有些工具是采用不同的语言编写的，对于特定的操作系统或设置可能会有所不同。确保您选择的工具与您的环境完美配合，充分利用团队的特定技能可以为您节省很多麻烦。</p>
<h4 id="1-Ansible"><a href="#1-Ansible" class="headerlink" title="1. Ansible"></a>1. Ansible</h4><p><img src="http://og2061b3n.bkt.clouddn.com/Ansible-Logo.jpg" alt=""><br>￼Ansible是一种开源工具，用于以可重复的方式将应用程序部署到远程节点和配置服务器。它为您提供了基于推送模型（push model ）推送多层应用程序和应用程序组件的通用框架，您也可以根据需要将其设置为 master-client 模式。 Ansible 建立在可用于各种系统上部署应用程序的剧本(playbook)。</p>
<p><strong>何时使用它</strong> ：对您来说最重要的是快速，轻松地启动和运行，并且您不想在远程节点或受管服务器上安装代理（Agent）。如果您的需求重点更多地放在系统管理员身上，专注于精简和快速，请考虑 Ansible 。</p>
<p>价格：免费的开源版本，Ansible Tower 的付费套餐每年 5000 美元（最多可容纳100个节点）。</p>
<p><strong>赞成的理由：</strong></p>
<ul>
<li>基于 SSH , 不需要在远程节点安装任何代理</li>
<li>学习曲线平缓、使用 YAML</li>
<li>Playbook 结构简单，结构清晰</li>
<li>具有变量注册功能，可以使前一个任务作为后一个任务的变量</li>
<li>代码库精简</li>
</ul>
<p><strong>反对的理由：</strong></p>
<ul>
<li>相较其他编程语言的工具功能有限。</li>
<li>通过 DSL 实现其逻辑，这意味着需要经常查看文档直到您学会为止</li>
<li>即使是最基本功能也需要变量注册，这可能使简单任务变得复杂</li>
<li>内省（Introspection）很差。例如很难在剧本中看到变量的值</li>
<li>输入，输出和配置文件格式之间缺乏一致性</li>
<li>性能存在一定瓶颈</li>
</ul>
<p><img src="http://og2061b3n.bkt.clouddn.com/Ansible-Tower-Dashboard.png" alt=""></p>
<h4 id="2-Chef"><a href="#2-Chef" class="headerlink" title="2. Chef"></a>2. Chef</h4><p><img src="http://og2061b3n.bkt.clouddn.com/Chef-Logo.jpg" alt=""><br>￼Chef 是一个配置管理开源工具，用户群专注面向开发者。Chef 作为 master-client  模式运行，需要一个单独的工作站来控制 master 。Chef 基于 Ruby 开发，纯 Ruby 可以支持大多数元素。Chef 的设计是透明的，并遵循给定的指示，这意味着你必须确保你的指示是清楚的。</p>
<p>何时使用它：在考虑 Chef 之前，需要确保你熟悉 Git ，因为它需要配置 Git ，你必须编写 Ruby 代码。Chef 适合以开发为中心（development-focused ）的团队和环境。对于寻求更成熟异构环境解决方案的企业来说，这是一件好事。</p>
<p>价格：提供免费的开源版本，标准版和高级版计划以每年节点为单位定价。 Chef Automate 的价格为每个节点 137 美元，或者采用 Hosted Chef 每个节点每年节省72 美元。</p>
<p><strong>赞成的理由：</strong></p>
<ul>
<li>丰富的模块和配置配方(recipes)</li>
<li>代码驱动的方法为您提供更多的配置控制和灵活性</li>
<li>以 Git 为中心赋予 Chef 强大的版本控制功能</li>
<li>‘Knife’工具（使用 SSH 从工作站部署代理）减轻了安装负担</li>
</ul>
<p><strong>反对的理由：</strong></p>
<ul>
<li>如果您还不熟悉 Ruby 和面向过程编程，学习曲线会非常陡峭</li>
<li>这不是一个简单的工具，可能需要维护大量的代码库和复杂的环境</li>
<li>不支持推送功能</li>
</ul>
<p><img src="http://og2061b3n.bkt.clouddn.com/Chef-Compliance-Node.png" alt=""></p>
<h4 id="3-Fabric"><a href="#3-Fabric" class="headerlink" title="3. Fabric"></a>3. Fabric</h4><p><img src="http://og2061b3n.bkt.clouddn.com/Fabric-Logo.jpg" alt=""><br>Fabric 是一个基于 Python 的应用程序部署工具。Fabric 的主要用途是在多个远程系统上运行任务，但它也可以通过插件的方式进行扩展，以提供更高级的功能。 Fabric 将配置您的操作系统，进行操作系统/服务器管理，自动化部署您的应用。<br>￼<br>何时使用它：如果您刚刚开始进入部署自动化领域，Fabric 是一个良好的开端。如果您的环境至少包含一点 Python，它都会有所帮助。</p>
<p>价格：免费</p>
<p><strong>赞成的理由：</strong></p>
<ul>
<li>擅长部署以任何语言编写的应用程序。它不依赖于系统架构，而是依赖于操作系统和软件包管理器</li>
<li>相比其他工具更简单，更易于部署</li>
<li>与 SSH 进行了广泛的整合，以实现基于脚本的流水线</li>
</ul>
<p><strong>反对的理由：</strong></p>
<ul>
<li>Fabric 是单点设置（通常是运行部署的机器）</li>
<li>使用 PUSH 模型，因此不如其他工具那样适合流水线部署模型</li>
<li>虽然它是用于在大多数语言中部署应用程序的绝佳工具，但它确实需要运行Python，所以您的环境中必须至少有一个适用于 Fabric 的 Python 环境</li>
</ul>
<p><img src="http://og2061b3n.bkt.clouddn.com/Fabric-Dashboard-1024x823.png" alt=""></p>
<h4 id="4-Puppet"><a href="#4-Puppet" class="headerlink" title="4. Puppet"></a>4. Puppet</h4><p><img src="http://og2061b3n.bkt.clouddn.com/Puppet-Logo.png" alt=""><br>￼Puppet 长期依赖是全面配置管理领域的标准工具之一。Puppet 是一个开源工具，但是考虑到它已经存在了多长时间，它已经在一些最大和最苛刻的环境中进行了部署和验证。 Puppet 基于 Ruby 开发，但使用更接近 JSON 的领域专用语言（Domain Specific Language，DSL）。Puppet 采用master-client 模式运行，并采用模型驱动(model-driven)的方法。 Puppet 将工作设计为一系列依赖关系列表，根据您的设置，这可以使事情变得更容易或更容易混淆。</p>
<p><strong>何时使用它：</strong> 如果稳定性和成熟度对您来说是最关键的因素，Puppet 是一个不错的选择。对于具有异构环境的大型企业和涉及多种技能范围的 DevOps 团队而言而言，这是一件好事。</p>
<p>价格：Puppet 分为免费的开源版本和付费的企业版本，商业版每年每个节点 120 美元（提供批量折扣）。</p>
<p><strong>赞成的理由：</strong></p>
<ul>
<li>通过 Puppet Labs 建立了完善的支持社区</li>
<li>具有最成熟的接口，几乎可以在所有操作系统上运行</li>
<li>安装和初始设置简单</li>
<li>最完整的 Web UI</li>
<li>强大的报表功能</li>
</ul>
<p><strong>反对的理由：</strong></p>
<ul>
<li>对于更高级的任务，您需要使用基于 Ruby 的 CLI（这意味着您必须了解Ruby）</li>
<li>纯 Ruby 版本的支持正在缩减（而不是那些使用 Puppet 定制 DSL 的版本）</li>
<li>Puppet 代码库可能会变得庞大，新人需要更多的帮助</li>
<li>与代码驱动方法相比，模型驱动方法意味着用户的控制更少</li>
</ul>
<p><img src="http://og2061b3n.bkt.clouddn.com/Puppet-Dashboard.png" alt=""></p>
<h4 id="5-Saltstack"><a href="#5-Saltstack" class="headerlink" title="5. Saltstack"></a>5. Saltstack</h4><p><img src="http://og2061b3n.bkt.clouddn.com/SaltStack-Logo.jpg" alt=""></p>
<p>￼SaltStack（或 Salt）是一种基于 CLI 的工具，可以将其设置为 master-client 模型或非集中模型。 Salt 基于Python 开发，提供了 PUSH 和 SSH 两种方法与客户端通讯。 Salt 允许对客户端和配置模板进行分组，以简化对环境的控制。<br><strong>何时使用它：</strong> 如果可扩展性和弹性是一个大问题，则 Salt 是一个不错的选择。对系统管理员来说，Salt 提供的可用性非常重要。</p>
<p>价格：提供免费的开源版本，以及基于年度/节点订阅的 SaltStack Enterprise 版本。具体的价格没有在他们的网站上列出，据说每个节点每年的起步价为 150 美元。</p>
<p><strong>赞成的理由：</strong></p>
<ul>
<li>一旦你渡过了入门阶段，就可以简单地组织和使用</li>
<li>DSL 功能丰富，不需要逻辑和状态</li>
<li>输入，输出和配置非常一致，全部所有 YAML （一个可读性高，用来表达数据序列的格式）</li>
<li>内省(Introspection)非常好。很容易看到 Salt 内部发生了什么</li>
<li>强大的社区</li>
<li>很高的可扩展性和灵活性</li>
</ul>
<p><strong>反对的理由：</strong></p>
<ul>
<li>对于新用户来说，非常难以配置，学习曲线陡峭</li>
<li>在入门级别而言，文档很难理解</li>
<li>Web UI  比同领域的其他工具更新、更轻量</li>
<li>对非 Linux 操作系统没有很好的支持</li>
</ul>
<p><img src="https://docs.saltstack.com/en/getstarted/images/salt-subsystems.png" alt="Salt Subsystems"></p>
<p><img src="http://og2061b3n.bkt.clouddn.com/SlatStack-Subsystem-Job.png" alt=""></p>
<h4 id="Ansible-vs-Chef-vs-Fabric-vs-Puppet-vs-SaltStack"><a href="#Ansible-vs-Chef-vs-Fabric-vs-Puppet-vs-SaltStack" class="headerlink" title="Ansible vs. Chef vs. Fabric vs. Puppet vs. SaltStack"></a>Ansible vs. Chef vs. Fabric vs. Puppet vs. SaltStack</h4><p>您使用的配置管理或部署自动化工具取决于您的环境需求和偏好。 Chef 和 Puppet 是一些较老的、更成熟的选项，它们适用于那些重视成熟性和稳定性而非简单性的大型企业和环境。 Ansible 和 SaltStack 是寻求快速和简约解决方案人士的理想选择，同时在不需要支持某些特殊功能或具有大量操作系统的环境中工作。Fabric 对于小型环境和那些正在寻求更低门槛和入门级解决方案的人来说是一个很好的工具。</p>
<h2 id="SaltStack"><a href="#SaltStack" class="headerlink" title="SaltStack"></a>SaltStack</h2><ul>
<li>Arch:Client/Server</li>
<li>develop language: Python</li>
<li>future: REAL-TIME COMMUNICATION</li>
</ul>
<h4 id="SaltStack-ABC"><a href="#SaltStack-ABC" class="headerlink" title="SaltStack ABC"></a>SaltStack ABC</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">## Install</span></div><div class="line">$ brew install saltstack</div><div class="line"><span class="comment">## Role:Master</span></div><div class="line">$ service salt-master start</div><div class="line">$ netstat -ant | grep 450 | grep LISTEN</div><div class="line">tcp4       0      0  *.4506                 *.*                    LISTEN     </div><div class="line">tcp4       0      0  *.4505                 *.*                    LISTEN</div><div class="line"><span class="comment">## Role:Master</span></div></pre></td></tr></table></figure>
<h4 id="SaltStack-Resources"><a href="#SaltStack-Resources" class="headerlink" title="SaltStack Resources"></a>SaltStack Resources</h4><ul>
<li><a href="https://github.com/saltstack-formulas" target="_blank" rel="external">SaltStack Formulas</a></li>
</ul>
<h2 id="Ansible"><a href="#Ansible" class="headerlink" title="Ansible"></a>Ansible</h2><ul>
<li>Arch: SSH batch tools</li>
<li>develop language: Python<h4 id="Ansible-ABC"><a href="#Ansible-ABC" class="headerlink" title="Ansible ABC"></a>Ansible ABC</h4></li>
</ul>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># Install</span></div><div class="line">$ sudo pip install ansible</div><div class="line"><span class="comment"># 默认路径 /etc/ansible/hosts ,参数 -i 指定 hosts 文件</span></div><div class="line">$ ansible all -m shell <span class="_">-a</span> <span class="string">"hostname"</span> --ask-pass -i /yourdir/ansible_hosts</div><div class="line"><span class="comment"># 或者通过环境变量指定</span></div><div class="line">$ <span class="built_in">export</span> ANSIBLE_HOSTS=~/ansible_hosts</div><div class="line">$ <span class="built_in">echo</span> <span class="string">"127.0.0.1"</span> &gt; ~/ansible_hosts</div></pre></td></tr></table></figure>
<h2 id="Puppet"><a href="#Puppet" class="headerlink" title="Puppet"></a>Puppet</h2><ul>
<li>Arch: Agent/Server</li>
<li>develop language: Ruby</li>
<li>enterprise &amp; community edition</li>
</ul>
<h4 id="Puppet-ABC"><a href="#Puppet-ABC" class="headerlink" title="Puppet ABC"></a>Puppet ABC</h4><h2 id="WordBook"><a href="#WordBook" class="headerlink" title="WordBook"></a>WordBook</h2><h4 id="YAML"><a href="#YAML" class="headerlink" title="YAML"></a><a href="http://yaml.org" target="_blank" rel="external">YAML</a></h4><p>YAML 语言（发音 /ˈjæməl/ ）实质上是一种通用的数据串行化格式。基本语法规则如下:</p>
<ul>
<li>大小写敏感</li>
<li>使用缩进表示层级关系</li>
<li>缩进时不允许使用Tab键，只允许使用空格。</li>
<li>缩进的空格数目不重要，只要相同层级的元素左侧对齐即可</li>
<li># 表示行注释</li>
</ul>
<p>YAML 支持的数据结构：</p>
<ul>
<li>对象：键值对的集合，又称为映射（mapping）/ 哈希（hashes） / 字典（dictionary）</li>
<li>数组：一组按次序排列的值，又称为序列（sequence） / 列表（list）</li>
<li><p>纯量（scalars）：单个的、不可再分的值</p>
</li>
<li><p><a href="http://www.ruanyifeng.com/blog/2016/07/yaml.html" target="_blank" rel="external">YAML 语言教程</a></p>
</li>
</ul>
<h4 id="DSL-Domain-Specific-Language-领域专用语言"><a href="#DSL-Domain-Specific-Language-领域专用语言" class="headerlink" title="DSL|Domain Specific Language,领域专用语言"></a><a href="https://en.wikipedia.org/wiki/Domain-specific_language" target="_blank" rel="external">DSL|Domain Specific Language,领域专用语言</a></h4><p>DSL的目标受众是非程序员，业务员或者最终用户。<br>DSL 最大的设计原则就是简单，通过简化语言中的元素，降低使用者的负担；无论是 Regex、SQL 还是 HTML 以及 CSS，其说明文档往往只有几页，非常易于学习和掌握。但是，由此带来的问题就是，DSL 中缺乏抽象的概念，比如：模块化、变量以及方法等。</p>
<ul>
<li><a href="http://www.infoq.com/cn/articles/dsl-discussion" target="_blank" rel="external">领域专用语言(DSL)迷思</a></li>
<li><a href="http://www.infoq.com/cn/articles/dsl-discussion" target="_blank" rel="external">谈谈 DSL 以及 DSL 的应用（以 CocoaPods 为例）</a></li>
</ul>
<h2 id="扩展阅读：DevOps-漫谈系列"><a href="#扩展阅读：DevOps-漫谈系列" class="headerlink" title="扩展阅读：DevOps 漫谈系列"></a>扩展阅读：<a href="https://riboseyim.github.io/2016/07/28/DevOps/" target="_blank" rel="external">DevOps 漫谈系列</a></h2><ul>
<li><a href="https://riboseyim.github.io/2018/04/10/DevOps-Phoenix/" target="_blank" rel="external">《凤凰项目》：从作坊到工厂的寓言故事</a></li>
<li><a href="https://riboseyim.github.io/2017/08/06/TeamWork-Kanban/" target="_blank" rel="external">Kanban 看板管理实践</a></li>
<li><a href="https://riboseyim.github.io/2018/03/26/DevOps-Deployment/" target="_blank" rel="external">DevOps 漫谈：基础设施部署和配置管理</a></li>
<li><a href="https://riboseyim.github.io/2017/11/12/DevOps-Container-Security/" target="_blank" rel="external">Linux 容器安全的十重境界</a></li>
<li><a href="https://riboseyim.github.io/2017/06/27/Technology-English/" target="_blank" rel="external">工程师的自我修养：全英文技术学习实践</a></li>
</ul>
<h4 id="DevOps-实践的本质是文化"><a href="#DevOps-实践的本质是文化" class="headerlink" title="DevOps 实践的本质是文化"></a><a href="https://riboseyim.github.io/2018/03/29/DevOps-Culture/" target="_blank" rel="external">DevOps 实践的本质是文化</a></h4><ul>
<li>学习力－团队生命之根</li>
<li>带领团队翻译书籍</li>
<li>Don’t make me think</li>
<li>凡是被很多人不断重复的好习惯，要将其自动化整合到工具</li>
</ul>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://blog.takipi.com/deployment-management-tools-chef-vs-puppet-vs-ansible-vs-saltstack-vs-fabric/" target="_blank" rel="external">Deployment Management Tools: Chef vs. Puppet vs. Ansible vs. SaltStack vs. Fabric</a></li>
<li><a href="https://www.zhihu.com/question/22707761" target="_blank" rel="external">SaltStack 与 Ansible 选择？| zhihu.com</a></li>
<li><a href="http://www.saltstack.cn" target="_blank" rel="external">中国SaltStack用户组|China SaltStack User Group</a></li>
<li><a href="http://www.saltstack.cn/kb/managing-firewall-with-salt/#managing-firewall-with-salt" target="_blank" rel="external">基于Salt管理iptables防火墙规则</a></li>
<li><a href="https://linux.cn/article-4215-1.html#3_875" target="_blank" rel="external">Ansible ：一个配置管理和IT自动化工具</a></li>
<li><a href="https://www.ibm.com/developerworks/cn/opensource/os-devops-saltstack-in-cloud/index.html" target="_blank" rel="external">自动化运维工具 SaltStack 在云计算环境中的实践</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;Ansible vs. Chef vs. Fabric vs. Puppet vs. SaltStack&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="DevOps" scheme="http://riboseyim.github.com/tags/DevOps/"/>
    
      <category term="Linux" scheme="http://riboseyim.github.com/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>数学常识|如何度量复杂性</title>
    <link href="http://riboseyim.github.com/2018/03/25/Mathmetics-Complexity/"/>
    <id>http://riboseyim.github.com/2018/03/25/Mathmetics-Complexity/</id>
    <published>2018-03-25T12:05:04.000Z</published>
    <updated>2018-03-26T09:17:56.443Z</updated>
    
    <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><ul>
<li>复杂系统、复杂度(Complexity)</li>
<li>如何度量复杂度：熵、算法信息量、逻辑深度、热力学深度、计算能力、层次性</li>
</ul>
<a id="more"></a>
<h2 id="如何度量复杂度"><a href="#如何度量复杂度" class="headerlink" title="如何度量复杂度"></a>如何度量复杂度</h2><p>2001 年，物理学家劳埃德（Seth Lloyd）发表了一篇文章（《Measures of complexity：A non-exhaustive list.  IEEE Control Systems Magazine, August 2001 》），分别从动力学、热力学、信息论等方面列出了 40 种度量复杂性的方法。提出了度量一个事物或过程的复杂性的三个维度：</p>
<ul>
<li>描述它有多困难 ？</li>
<li>产生它有多困难 ？</li>
<li>其组织程度如何 ？</li>
</ul>
<h4 id="用熵度量复杂性"><a href="#用熵度量复杂性" class="headerlink" title="用熵度量复杂性"></a>用熵度量复杂性</h4><p><strong>香农熵</strong>，相对于信息接收者的平均信息量或“惊奇度”。例如，假设消息由符号 A、C、G 和 T 组成。如果序列高度有序，如“A  A  A  A  A  A …… A ” 则熵为零。完全随机的序列则有最大可能熵。最复杂的对象不是最有序的或最随机的，而是介于两者之间。</p>
<p>在英语里，信息和情报是同一个词（Information），而我们知道情报的作用就是排除不确定性。</p>
<blockquote>
<p>如果没有信息，任何公式或者数字的游戏都无法排除不确定性。这个朴素的结论非常重要，但是在研究工作中经常被一些半瓶子醋的专家忽视，希望做这方面工作的读者谨记。(吴军 |《数学之美》)</p>
</blockquote>
<p>用香农熵度量复杂性的问题。首先，所针对的对象或过程需要转换成某种“消息”的形式，这并不总是那么容易做到。另外，随机消息的熵最高，但是那些最复杂的对象都不是完全随机的。例如变形虫的基因长度远远超过其他动植物，具备复杂功能的人类基因也不是随机的，甚至能看到长期历史演化出来的规律。</p>
<h4 id="用算法信息量度量复杂性"><a href="#用算法信息量度量复杂性" class="headerlink" title="用算法信息量度量复杂性"></a>用算法信息量度量复杂性</h4><p>为了改进熵度量复杂性的方法，1997 年柯尔莫哥洛夫（Andrey Kolmogorov）等人提出了算法信息量的概念。他们将事物的复杂度定义为能够产生对事物完整描述的最短计算机程序的长度。</p>
<p>为了计算有效复杂性，首先要给出事物规则性的最佳描述；有效复杂性定义为包含在描述中的信息量或规则集合的算法信息量。事物的结构可预测性越大，有效复杂性就越低。</p>
<p>对于一个事物的各种规则集，如何决定哪个是最好的呢？<strong>奥卡姆剃刀（Occam’s Razor, Ockham’s Razor）</strong>，意思是简约之法则。最好的规则集是能够描述事物的最小规则集，同时还能将事物的随机成分最小化。奥卡姆剃刀在现代医学中的应用最具代表性，医生和医学哲学家提出了 <strong>症状化约原则（diagnostic parsimony）</strong>。即在诊断某个病症时，医生应该尽量寻找会导致所有症状的最简单可能性。“当你听到背后有蹄声时，应该想到马而不是斑马。”  </p>
<p>虽然症状化约原则常常可能是正确的，然而也有争锋相对的意见：<strong>西卡姆格言（Hickam’s dictum）</strong>，“病人乐意得多少种病就能得多少种病。”  从统计数据看，一个病人的多种症状往往会归于多种常见疾病，而不是仅仅一种。另外，排除统计的因素，有许多病人无法使用单一疾病来解释众多的症状，被证实患有多种疾病。实际上，医生很难根据一个症状来判断是或者不是某个疾病，而是不断地根据病人的生活环境、日常习惯、用药史等等来建立、测试和修改对于症状的假设才是更好的方法。</p>
<h4 id="用逻辑深度度量复杂性"><a href="#用逻辑深度度量复杂性" class="headerlink" title="用逻辑深度度量复杂性"></a>用逻辑深度度量复杂性</h4><p>为了更加接近我们对复杂性的直觉，数学家班尼特在 20 世纪 80 年代初提出了 <strong>逻辑深度（logical depth）</strong> 的概念。</p>
<p>用班尼特的话说，“有逻辑深度的事物从根本上必须是长时间计算或漫长动力过程的产物，否则就不可能产生。” 或是像劳埃德说的，“用最合理的方法生成某个事物时需要处理的信息量等同于这个事物的复杂性，这是一个很吸引人的想法。”</p>
<h4 id="用热力学深度度量复杂性"><a href="#用热力学深度度量复杂性" class="headerlink" title="用热力学深度度量复杂性"></a>用热力学深度度量复杂性</h4><p>20 世纪 80 年代末，劳埃德和裴杰斯（Heinz Pagels）提出了一种复杂性度量方法：热力学深度（thermodynamic depth）。</p>
<p>与图灵机生成对事物的描述所需的时间步不同，热力学深度首先是确定“产生出这个事物最科学合理的确定事件序列”，然后测量“物理构造过程所需的热力源和信息源的总量”。例如，要确定人类基因组的热力学深度，得从最早出现的第一个生物的基因组开始，列出直到现代人类出现的所有遗传演化事件（随机变异、重组、基因复制等）。</p>
<p>问题：如何定义系统的状态粒度，在列出事件时，如何确定相关的宏观状态。</p>
<h4 id="用计算能力度量复杂性"><a href="#用计算能力度量复杂性" class="headerlink" title="用计算能力度量复杂性"></a>用计算能力度量复杂性</h4><p>一种观点认为，系统的计算能力如果等价于通用图灵机的计算能力，就是复杂系统。不过，班尼特等人则认为，具有执行通用计算的能力并不意味着系统本身就是复杂的；应当测量的是<strong>系统处理输入时的行为的复杂性</strong>。</p>
<h4 id="用层次性度量复杂性"><a href="#用层次性度量复杂性" class="headerlink" title="用层次性度量复杂性"></a>用层次性度量复杂性</h4><p>如何用层次（degree of hierarchy）来刻画一个系统的复杂性：复杂系统由子系统组成，子系统下面又有子系统，不断往下。（《复杂性的结构》：The architecture of complexity. Simon 1962）</p>
<p>西蒙认为，复杂系统最重要的共性就是 <strong>层次性</strong> 和 <strong>不可分解性</strong>。在层次性复杂系统中，子系统内部的紧密相互作用比子系统之间要多得多。例如，细胞内部的新陈代谢网络就比细胞之间的作用要复杂得多。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>各种度量复杂性的方法都抓住了一些方面，但都存在理论上和实践上的局限性，还远不能有效刻画实际系统的复杂性，度量方法的多样性也表明复杂系统具有许多维度，无法用单一的尺度来刻画。</p>
<h2 id="扩展阅读"><a href="#扩展阅读" class="headerlink" title="扩展阅读"></a>扩展阅读</h2><ul>
<li><a href="https://riboseyim.github.io/2018/02/10/Machine-Learning-Algorithms/" target="_blank" rel="external">Machine Learning:机器学习算法</a></li>
<li><a href="https://riboseyim.github.io/2018/03/09/Machine-Learning-Economist/" target="_blank" rel="external">Machine Learning:经济学家谈人工智能</a></li>
<li><a href="https://riboseyim.github.io/2017/09/15/Visualization-Graphviz/" target="_blank" rel="external">数据可视化（三）基于 Graphviz 实现程序化绘图 | 开源中国首页推荐·每日一博</a></li>
<li>Why draw when you can code?</li>
<li>Graphviz 简介</li>
<li>最佳 Graphviz 实践：流程图、数据结构图、网络路径 Trace Route、复杂社会关系链分析、机器学习算法-决策树(Decision Tree)</li>
</ul>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li>2001 劳埃德（Seth Lloyd）《Measures of complexity：A non-exhaustive list.  IEEE Control Systems Magazine, August 2001 》</li>
<li>1962 Simon《复杂性的结构》：The architecture of complexity.</li>
<li><a href="https://www.guokr.com/article/172437/" target="_blank" rel="external">如何测出一句话中的信息量</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;复杂系统、复杂度(Complexity)&lt;/li&gt;
&lt;li&gt;如何度量复杂度：熵、算法信息量、逻辑深度、热力学深度、计算能力、层次性&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="架构师" scheme="http://riboseyim.github.com/tags/%E6%9E%B6%E6%9E%84%E5%B8%88/"/>
    
      <category term="数学与算法" scheme="http://riboseyim.github.com/tags/%E6%95%B0%E5%AD%A6%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
      <category term="科技史" scheme="http://riboseyim.github.com/tags/%E7%A7%91%E6%8A%80%E5%8F%B2/"/>
    
  </entry>
  
  <entry>
    <title>Machine Learning:WordBook</title>
    <link href="http://riboseyim.github.com/2018/03/21/Machine-Learning-WordBook/"/>
    <id>http://riboseyim.github.com/2018/03/21/Machine-Learning-WordBook/</id>
    <published>2018-03-21T03:08:01.000Z</published>
    <updated>2018-05-07T12:57:04.274Z</updated>
    
    <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><a id="more"></a>
<h2 id="Basic"><a href="#Basic" class="headerlink" title="Basic"></a>Basic</h2><h2 id="数学概念"><a href="#数学概念" class="headerlink" title="数学概念"></a>数学概念</h2><ul>
<li>泰勒级数 Taylor series</li>
</ul>
<p>用无限项连加式——级数来表示一个函数，这些相加的项由函数在某一点的导数求得，以 1715 年发表了泰勒公式的英国数学家布鲁克·泰勒（Sir Brook Taylor）来命名。通过函数在自变量零点的导数求得的泰勒级数又叫做麦克劳林级数，以苏格兰数学家科林·麦克劳林的名字命名。</p>
<ul>
<li>导数 Derivative</li>
</ul>
<p>导数（Derivative）是微积分学中重要的基础概念。一个函数在某一点的导数描述了这个函数在这一点附近的变化率。导数的本质是通过极限的概念对函数进行局部的线性逼近。</p>
<ul>
<li>偏导数 Partial Derivatives</li>
</ul>
<p>在数学中，一个多变量的函数的偏导数是它关于其中一个变量的导数，而保持其他变量恒定（相对于全导数，在其中所有变量都允许变化）</p>
<ul>
<li>超参数 Hyper Parameter</li>
</ul>
<p>在机器学习中，超参数是在学习过程开始之前设置的一个参数。相比之下，其他参数的值是通过训练得到的。</p>
<p>不同的模型训练算法需要不同的超参数，一些简单的算法（如普通最小二乘回归）不需要。给定这些超参数，训练算法从数据中学习参数。例如，LASSO 是一种算法，将正则化超参数添加到普通最小二乘回归中，它必须在通过训练算法估计参数之前设置。在深度学习中，常见的超参数有：学习速率，迭代次数，层数，每层神经元的个数等。</p>
<ul>
<li>激活函数 Activation Function</li>
</ul>
<p>在 计算网络中， 一个节点的激活函数定义了该节点在给定的输入或输入的集合下的输出</p>
<h2 id="Deep-Learning"><a href="#Deep-Learning" class="headerlink" title="Deep Learning"></a>Deep Learning</h2><h4 id="Neural-Network"><a href="#Neural-Network" class="headerlink" title="Neural Network"></a>Neural Network</h4><ul>
<li>神经网络（Neural Network，缩写 NN）</li>
<li>人工神经网络（Artificial Neural Network，缩写 ANN）</li>
</ul>
<p>人工神经网络（Artificial neural network，缩写ANN），简称神经网络（neural network，缩写NN）或类神经网络，是一种模仿生物神经网络(动物的中枢神经系统，特别是大脑)的结构和功能的数学模型或计算模型。神经网络由大量的人工神经元联结进行计算。大多数情况下人工神经网络能在外界信息的基础上改变内部结构，是一种自适应系统。现代神经网络是一种非线性统计性数据建模工具，常用来对输入和输出间复杂的关系进行建模，或用来探索数据的模式。</p>
<h4 id="Convolutional-Neural-Network"><a href="#Convolutional-Neural-Network" class="headerlink" title="Convolutional Neural Network"></a>Convolutional Neural Network</h4><ul>
<li>卷积神经网络(Convolutional Neural Network,缩写 CNN )<br>In machine learning, a convolutional neural network (CNN, or ConvNet) is a type of feed-forward artificial neural network in which the connectivity pattern between its neurons is inspired by the organization of the animal visual cortex, whose individual neurons are arranged in such a way that they respond to overlapping regions tiling the visual field. Convolutional networks were inspired by biological processes and are variations of multilayer perceptrons designed to use minimal amounts of preprocessing. They have wide applications in image and video recognition, recommender systems and natural language processing.</li>
</ul>
<h4 id="RNN"><a href="#RNN" class="headerlink" title="RNN"></a>RNN</h4><ul>
<li>RNN 一般指代时间递归神经网络(Recurrent Neural Network)</li>
<li>结构递归神经网络(Recursive Neural Network)</li>
</ul>
<p>A recurrent neural network (RNN) is a class of artificial neural network where connections between units form a directed cycle. This creates an internal state of the network which allows it to exhibit dynamic temporal behavior. Unlike feedforward neural networks, RNNs can use their internal memory to process arbitrary sequences of inputs. This makes them applicable to tasks such as unsegmented connected handwriting recognition or speech recognition.</p>
<p>递归神经网络（RNN）是两种人工神经网络的总称。时间递归神经网络的神经元间连接构成有向图，而结构递归神经网络利用相似的神经网络结构递归构造更为复杂的深度网络。单纯递归神经网络因为无法处理随着递归，权重指数级爆炸或消失的问题（Vanishing gradient problem），难以捕捉长期时间关联；而结合不同的LSTM可以很好解决这个问题。</p>
<h4 id="GAN"><a href="#GAN" class="headerlink" title="GAN"></a>GAN</h4><p>Generative Adversarial Network，生成对抗网络<br>非监督式学习的一种方法，通过让两个神经网络相互博弈的方式进行学习。该方法由伊恩·古德费洛等人于2014年提出）</p>
<h4 id="Autoencoders-自动编码"><a href="#Autoencoders-自动编码" class="headerlink" title="Autoencoders 自动编码"></a>Autoencoders 自动编码</h4><h4 id="Reinforcement-Learning-强化学习"><a href="#Reinforcement-Learning-强化学习" class="headerlink" title="Reinforcement Learning 强化学习"></a>Reinforcement Learning 强化学习</h4><p>Reinforcement learning is an area of machine learning inspired by behaviorist psychology, concerned with how software agents ought to take actions in an environment so as to maximize some notion of cumulative reward. The problem, due to its generality, is studied in many other disciplines, such as game theory, control theory, operations research, information theory, simulation-based optimization, multi-agent systems, swarm intelligence, statistics, and genetic algorithms. In the operations research and control literature, the field where reinforcement learning methods are studied is called approximate dynamic programming. The problem has been studied in the theory of optimal control, though most studies are concerned with the existence of optimal solutions and their characterization, and not with the learning or approximation aspects. In economics and game theory, reinforcement learning may be used to explain how equilibrium may arise under bounded rationality.</p>
<p>强化学习是机器学习中的一个领域，强调如何基于环境而行动，以取得最大化的预期利益。其灵感来源于心理学中的行为主义理论，即有机体如何在环境给予的奖励或惩罚的刺激下，逐步形成对刺激的预期，产生能获得最大利益的习惯性行为。这个方法具有普适性，因此在其他许多领域都有研究，例如博弈论、控制论、运筹学、信息论、模拟优化方法、多主体系统学习、群体智能、统计学以及遗传算法。在运筹学和控制理论研究的语境下，强化学习被称作“近似动态规划”（approximate dynamic programming，ADP）。在最优控制理论中也有研究这个问题，虽然大部分的研究是关于最优解的存在和特性，并非是学习或者近似方面。在经济学和博弈论中，强化学习被用来解释在有限理性的条件下如何出现平衡。</p>
<h2 id="Open-Source-Library"><a href="#Open-Source-Library" class="headerlink" title="Open Source Library"></a>Open Source Library</h2><h4 id="TensorFlow"><a href="#TensorFlow" class="headerlink" title="TensorFlow"></a>TensorFlow</h4><p>TensorFlow is an open source software library for machine learning in various kinds of perceptual and language understanding tasks. It is a second-generation API which is currently used for both research and production by 50 different teams in dozens of commercial Google products, such as speech recognition, Gmail, Google Photos, and Search. These teams had previously used DistBelief, a first-generation API. TensorFlow was originally developed by the Google Brain team for Google’s research and production purposes and later released under the Apache 2.0 open source license on November 9, 2015.</p>
<h4 id="Scikit-Learn-机器学习算法库"><a href="#Scikit-Learn-机器学习算法库" class="headerlink" title="Scikit-Learn 机器学习算法库"></a>Scikit-Learn 机器学习算法库</h4><p>Scikit-Learn(formerly scikits.learn) is a free software machine learning library for the Python programming language. It features various classification, regression and clustering algorithms including support vector machines, random forests, gradient boosting, k-means and DBSCAN, and is designed to interoperate with the Python numerical and scientific libraries NumPy and SciPy.</p>
<h4 id="COCO-SSD"><a href="#COCO-SSD" class="headerlink" title="COCO SSD"></a>COCO SSD</h4><p>Ok that worked pretty well, but how do we deal with images that show multiple objects. Well to recognize multiple objects in a single image, we will utilize what’s called a Single Shot Multibox Detector (SSD). In our second example we will look at a SSD model trained with the COCO (Common Object in Context) dataset. The model we are using has been trained on 84 different classes.</p>
<h2 id="扩展阅读-《The-Machine-Learning-Master》"><a href="#扩展阅读-《The-Machine-Learning-Master》" class="headerlink" title="扩展阅读:《The Machine Learning Master》"></a>扩展阅读:<a href="https://www.gitbook.com/book/riboseyim/machine-learning" target="_blank" rel="external">《The Machine Learning Master》</a></h2><p><img src="http://p11slcnom.bkt.clouddn.com/banner-MLM-201803.png" alt=""></p>
<ul>
<li><a href="https://riboseyim.github.io/2018/01/17/Machine-Learning-TensorFlow/" target="_blank" rel="external">Machine Learning(一):基于 TensorFlow 实现宠物血统智能识别</a></li>
<li><a href="https://riboseyim.github.io/2018/01/15/Machine-Learning-OpenCV/" target="_blank" rel="external">Machine Learning(二):宠物智能识别之 Using OpenCV with Node.js</a></li>
<li><a href="https://riboseyim.github.io/2018/02/09/Machine-Learning-Projects/" target="_blank" rel="external">Machine Learning:机器学习项目</a></li>
<li><a href="https://riboseyim.github.io/2018/02/10/Machine-Learning-Algorithms/" target="_blank" rel="external">Machine Learning:机器学习算法</a></li>
<li><a href="https://riboseyim.github.io/2018/04/02/Machine-Learning-Algorithms-Sheet/" target="_blank" rel="external">Machine Learning:如何选择机器学习算法</a></li>
<li><a href="https://riboseyim.github.io/2018/05/07/Machine-Learning-Neural-Network" target="_blank" rel="external">Machine Learning:神经网络基础</a></li>
<li><a href="https://riboseyim.github.io/2018/01/25/Machine-Learning-Books/" target="_blank" rel="external">Machine Learning:机器学习书单</a></li>
<li><a href="https://riboseyim.github.io/2017/08/29/Machine-Learning-News" target="_blank" rel="external">Machine Learning:人工智能媒体报道集</a></li>
<li><a href="https://riboseyim.github.io/2018/02/16/Machine-Learning-Law/" target="_blank" rel="external">Machine Learning:机器学习技术与知识产权法</a></li>
<li><a href="https://riboseyim.github.io/2018/03/09/Machine-Learning-Economist/" target="_blank" rel="external">Machine Learning:经济学家谈人工智能</a></li>
<li><a href="https://riboseyim.github.io/2017/09/15/Visualization-Graphviz/" target="_blank" rel="external">数据可视化（三）基于 Graphviz 实现程序化绘图</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h2&gt;
    
    </summary>
    
    
      <category term="Machine-Learning" scheme="http://riboseyim.github.com/tags/Machine-Learning/"/>
    
  </entry>
  
  <entry>
    <title>Machine-Learning-TensorFlow-ProtoBuf</title>
    <link href="http://riboseyim.github.com/2018/03/20/Machine-Learning-TensorFlow-ProtoBuf/"/>
    <id>http://riboseyim.github.com/2018/03/20/Machine-Learning-TensorFlow-ProtoBuf/</id>
    <published>2018-03-20T09:41:30.000Z</published>
    <updated>2018-04-13T01:49:16.809Z</updated>
    
    <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><a id="more"></a>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="https://medium.com/@dboyliao/%E7%B0%A1%E4%BB%8B-google-protocol-buffer-1dd5fa2e1e69" target="_blank" rel="external">簡介 Google Protocol Buffer</a></li>
<li><a href="https://zhuanlan.zhihu.com/p/31308381" target="_blank" rel="external">Tensorflow框架实现中的“三”种图</a></li>
<li><a href="http://blog.csdn.net/huachao1001/article/details/78502910" target="_blank" rel="external">Tensorflow将模型导出为一个文件及接口设置</a></li>
<li><a href="https://towardsdatascience.com/how-to-use-dataset-in-tensorflow-c758ef9e4428" target="_blank" rel="external">How to use Dataset in TensorFlow| The built-in Input Pipeline. Never use ‘feed-dict’ anymore</a></li>
<li><a href="https://towardsdatascience.com/deploy-tensorflow-models-9813b5a705d5" target="_blank" rel="external">Deploy TensorFlow models | Super fast and concise tutorial</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h2&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Machine Learning:经济学家谈人工智能</title>
    <link href="http://riboseyim.github.com/2018/03/09/Machine-Learning-Economist/"/>
    <id>http://riboseyim.github.com/2018/03/09/Machine-Learning-Economist/</id>
    <published>2018-03-09T08:55:07.000Z</published>
    <updated>2018-05-15T01:52:22.073Z</updated>
    
    <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><ul>
<li>为什么人工智能的繁荣没有提高生产率</li>
<li>Artificial Intelligence is a General Purpose Technology</li>
<li>Measuring AI Capital</li>
</ul>
<a id="more"></a>
<h2 id="Previous-Posts"><a href="#Previous-Posts" class="headerlink" title="Previous Posts"></a>Previous Posts</h2><ul>
<li><a href="https://riboseyim.github.io/2017/08/29/Machine-Learning-News" target="_blank" rel="external">Machine Learning:人工智能媒体报道集</a></li>
<li>媒体报道|经济学人：译者的悲伤 | 20170527</li>
<li>媒体报道|经济学人：计算机如何学习人类语言？| 20170111</li>
</ul>
<h2 id="为什么人工智能的繁荣没有提高生产率"><a href="#为什么人工智能的繁荣没有提高生产率" class="headerlink" title="为什么人工智能的繁荣没有提高生产率"></a>为什么人工智能的繁荣没有提高生产率</h2><p>人工智能技术的进步无处不在，从自动驾驶汽车到机器人助理到高级语音识别。到处都是，除了生产力统计数据。这种情况看起来像是索洛悖论（Solow Paradox，又称 Productivity Paradox 生产率悖论）的重演，1987 年由麻省理工学院（ MIT，Massachusetts Institute of Technology）经济学家和诺贝尔奖得主罗伯特·索洛所阐述的理论。最近一项研究认为索洛悖论的罪魁祸首可能是实施新技术的滞后，研究人员包括 MIT 斯隆管理学院的教授 <a href="http://ebusiness.mit.edu/erik/" target="_blank" rel="external">Erik Brynjolfsson</a>，MIT 博士生 Daniel Rock 和芝加哥大学布斯商学院（University of Chicago Booth School of Business）的经济学教授 <a href="https://www.chicagobooth.edu/faculty/directory/s/chad-syverson" target="_blank" rel="external">Chad Syverson</a>。</p>
<p>根据市场调研公司 CB Insights 的数据，尽管以科技为中心的纳斯达克综合指数（Nasdaq Composite Index）从 2012 年到 2017 年翻了一番，与人工智能相关的技术投资在 2016 年激增了八倍以上、超过 50 亿美元。但这些并没有促进劳动生产率（labor-productivity）的增长，2005 年到 2017 年的增长率还不到 1995 年至 2004 年年均增长率（3％）的一半。</p>
<p>尽管如此，研究人员认为依然有理由持乐观态度，他们认为新技术需要时间在整个经济中传播和实施。他们引用了蒸汽机，电力和内燃机的案例，这些发明都是通过几年和几十年的时间才发挥变革性影响。因为这些技术的广泛应用还需要其他配套技术创新。研究人员指出，交流电安全实用三十年后，至少有一半的美国制造商还没有通电，因为制造商还没有弄清楚如何基于小型电动机重组生产过程。研究人员说这并不罕见; 企业几乎总是花费更多的精力来重新设计业务流程和培训人员，而不是为自己购买新技术。</p>
<h4 id="Artificial-Intelligence-is-a-General-Purpose-Technology"><a href="#Artificial-Intelligence-is-a-General-Purpose-Technology" class="headerlink" title="Artificial Intelligence is a General Purpose Technology"></a><strong>Artificial Intelligence is a General Purpose Technology</strong></h4><blockquote>
<p>As important as specific applications of AI may be, we argue that the more important economic effects of AI, machine learning, and associated new technologies stem from the fact that they embody the characteristics of general purpose technologies (GPTs).</p>
</blockquote>
<p>例如，机器学习系统（machine learning system）已经将机器的能力转化为执行许多基本的知觉类型，以实现更广泛的应用。机器视觉 – 查看和识别物体的能力，在照片中标记它们，并解读视频流。识别错误率地改善，从1/30(帧) 提高到 1/30万(帧)，自动驾驶汽车越来越具有可行性。</p>
<p><img src="http://omb2onfvy.bkt.clouddn.com/ML-Paper-Paradox.png" alt="AI技术进步&amp;图像识别错误率"></p>
<h4 id="Measuring-AI-Capital"><a href="#Measuring-AI-Capital" class="headerlink" title="Measuring AI Capital"></a><strong>Measuring AI Capital</strong></h4><p>研究人员提出人工智能应视为新的资本形式，确切说是一种无形资本，这种资本会随着投资的增加而累积，会对生产率持续产生作用，其价值会发生折旧（随着时间流逝而贬值）。</p>
<p>引入人工智能技术而产生的成本、组织变革、新技能等因素需要纳入到无形资本的框架当中并构建新的预测模型（J-Curve），随后的实证研究表明，新的模型可以更好地反映技术对生产率增长的影响作用。</p>
<p>人工智能的影响评估结果取决于各国统计方案中如何衡量人工智能资本（AI ）。人工智能资本计量的主要困难在于其许多产出将是无形的。人工智能大量使用在财务上体现作为其他资本的投入，包括新型软件，以及人力和组织资本，而不是最终消费品。包括人力资本在内的其他大部分资本，与 AI 本身一样，大部分都是无形的。</p>
<p>更具体地说，有效使用人工智能需要开发数据集，建立企业的专业人力资本，并实施新的业务流程。这些都需要大量的资本支出和维护。在古典增长核算模型中，这些无形支出的有形对应物（包括计算资源，服务器和房地产的购买）很容易衡量。另一方面，与之配套的生产投资价值则很难量化。在购买资本资产后，企业还会产生额外的调整成本（adjustment costs）。例如，业务流程重新设计和安装成本。</p>
<blockquote>
<p>Much of the market value of AI capital specifically and IT capital more generally may be derived from the capitalized short-term quasi-rents earned by firms that have already reorganized to extract service flows from new investment.</p>
</blockquote>
<p><img src="http://omb2onfvy.bkt.clouddn.com/ML-Paper-Paradox-Growth.png" alt=""></p>
<p>人工智能悖论与世界的变化是一致的。研究人员考虑了悖论的其他可能原因，其中包括对 AI 的盲目乐观，生产力效益正在发生但被误判，新技术的收益存在但仅限于一小部分工人，给出的解释是实现延迟（<strong>here’s an implementation delay</strong>）。他们写道：“这种看似悖论的两半都是正确的”。在这个观点中，预示着随着应用的扩展，人工智能技术突破对生产力的影响将越来越大。人工智能投资成本高昂，需要配套设施的发展，需要时间和资源来实施。</p>
<h4 id="背景知识：索洛悖论"><a href="#背景知识：索洛悖论" class="headerlink" title="背景知识：索洛悖论"></a>背景知识：索洛悖论</h4><p>20世纪80年代末，美国学者查斯曼(Strassman)调查了292个企业，结果发现这些企业的IT投资和投资回报率(ROI)之间没有明显的关联。</p>
<p>1987 年获得诺贝尔奖的经济学家罗伯特·索洛(Robert Solow)将这种现象称为“生产率悖论”(Productivity Paradox)：“我们到处都看得见计算机，就是在生产率统计方面却看不见计算机（Computers everywhere except in the productivity statistics.）”。</p>
<h2 id="扩展阅读-《The-Machine-Learning-Master》"><a href="#扩展阅读-《The-Machine-Learning-Master》" class="headerlink" title="扩展阅读:《The Machine Learning Master》"></a>扩展阅读:<a href="https://www.gitbook.com/book/riboseyim/machine-learning" target="_blank" rel="external">《The Machine Learning Master》</a></h2><p><img src="http://p11slcnom.bkt.clouddn.com/banner-MLM-201803.png" alt=""></p>
<ul>
<li><a href="https://riboseyim.github.io/2018/01/17/Machine-Learning-TensorFlow/" target="_blank" rel="external">Machine Learning(一):基于 TensorFlow 实现宠物血统智能识别</a></li>
<li><a href="https://riboseyim.github.io/2018/01/15/Machine-Learning-OpenCV/" target="_blank" rel="external">Machine Learning(二):宠物智能识别之 Using OpenCV with Node.js</a></li>
<li><a href="https://riboseyim.github.io/2018/02/09/Machine-Learning-Projects/" target="_blank" rel="external">Machine Learning:机器学习项目</a></li>
<li><a href="https://riboseyim.github.io/2018/02/10/Machine-Learning-Algorithms/" target="_blank" rel="external">Machine Learning:机器学习算法</a></li>
<li><a href="https://riboseyim.github.io/2018/04/02/Machine-Learning-Algorithms-Sheet/" target="_blank" rel="external">Machine Learning:如何选择机器学习算法</a></li>
<li><a href="https://riboseyim.github.io/2018/05/07/Machine-Learning-Neural-Network" target="_blank" rel="external">Machine Learning:神经网络基础</a></li>
<li><a href="https://riboseyim.github.io/2018/01/25/Machine-Learning-Books/" target="_blank" rel="external">Machine Learning:机器学习书单</a></li>
<li><a href="https://riboseyim.github.io/2017/08/29/Machine-Learning-News" target="_blank" rel="external">Machine Learning:人工智能媒体报道集</a></li>
<li><a href="https://riboseyim.github.io/2018/02/16/Machine-Learning-Law/" target="_blank" rel="external">Machine Learning:机器学习技术与知识产权法</a></li>
<li><a href="https://riboseyim.github.io/2018/03/09/Machine-Learning-Economist/" target="_blank" rel="external">Machine Learning:经济学家谈人工智能</a></li>
<li><a href="https://riboseyim.github.io/2017/09/15/Visualization-Graphviz/" target="_blank" rel="external">数据可视化（三）基于 Graphviz 实现程序化绘图</a></li>
</ul>
<h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><ul>
<li><a href="http://www.nber.org/chapters/c14007.pdf" target="_blank" rel="external">Artificial Intelligence and the Modern Productivity Paradox: A Clash of Expectations and Statistics</a></li>
<li><a href="http://review.chicagobooth.edu/economics/2018/article/why-ai-boom-isn-t-boosting-productivity" target="_blank" rel="external">why-ai-boom-isn-t-boosting-productivity</a></li>
<li><a href="https://mp.weixin.qq.com/s/WOlrTOUjU0srGAOMg1_ASg" target="_blank" rel="external">论文代写了解一下：要价63000美元的枪手论文是如何产生的？</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;为什么人工智能的繁荣没有提高生产率&lt;/li&gt;
&lt;li&gt;Artificial Intelligence is a General Purpose Technology&lt;/li&gt;
&lt;li&gt;Measuring AI Capital&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Science" scheme="http://riboseyim.github.com/tags/Science/"/>
    
      <category term="Economist" scheme="http://riboseyim.github.com/tags/Economist/"/>
    
      <category term="Policy&amp;Law" scheme="http://riboseyim.github.com/tags/Policy-Law/"/>
    
      <category term="Manager" scheme="http://riboseyim.github.com/tags/Manager/"/>
    
      <category term="Machine-Learning" scheme="http://riboseyim.github.com/tags/Machine-Learning/"/>
    
  </entry>
  
</feed>
